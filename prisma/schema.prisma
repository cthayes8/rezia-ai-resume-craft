// Prisma schema file for Supabase Postgres
// Define your data models in this file and manage migrations with Prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  /// Use DIRECT_URL for migrations/DDL to bypass pgbouncer
  directUrl = env("DIRECT_URL")
}

/// Generated cover letters linked to an optimization run
model CoverLetter {
  id                 String           @id @default(cuid())
  userId             String
  optimizationRunId  String           @unique
  letterText         String           @db.Text
  createdAt          DateTime         @default(now())

  // Relations
  user               User             @relation(fields: [userId], references: [id])
  optimizationRun    OptimizationRun  @relation(fields: [optimizationRunId], references: [id])
}

// Core entities
model User {
  // Clerk user ID
  id                String             @id
  email             String             @unique
  fullName          String?
  /**
   * First name captured from Clerk sign-up
   */
  firstName         String?
  /**
   * Last name captured from Clerk sign-up
   */
  lastName          String?
  createdAt         DateTime           @default(now())
  deletedAt         DateTime?          // soft-delete timestamp
  freeRunsRemaining Int                @default(1)

  // Relations
  resumeFiles       ResumeFile[]
  optimizationRuns  OptimizationRun[]
  feedbacks         Feedback[]
  subscriptions     Subscription[]
  usageEvents       UsageEvent[]
  /**
   * Saved resume snapshots (max 3 per user)
   */
  savedResumes      SavedResume[]
  /// Generated cover letters
  coverLetters      CoverLetter[]
}

/// A resume file uploaded by a user
model ResumeFile {
  id               String      @id @default(cuid())
  userId           String
  fileName         String
  filePath         String
  uploadedAt       DateTime    @default(now())
  originalTextHash String?     // optional hash for dedupe

  // Relations
  user             User             @relation(fields: [userId], references: [id])
  optimizationRuns OptimizationRun[]
}

/// A single optimization run: input/output, metadata & usage
model OptimizationRun {
  id              String      @id @default(cuid())
  userId          String
  resumeFileId    String?     // null if freeform text
  jobDescription  String
  templateId      String
  originalText    String      @db.Text
  optimizedText   String      @db.Text
  bulletRewrites  Json
  summaryRewrite  String      @db.Text
  skillsRewrite   String      @db.Text
  keywords        Json
  requirements    Json
  targetTitle     String
  targetCompany   String
  aiModel         String
  tokenCount      Int
  costUsd         Float
  createdAt       DateTime    @default(now())
  deletedAt       DateTime?   // soft-delete timestamp

  // Relations
  user             User              @relation(fields: [userId], references: [id])
  resumeFile       ResumeFile?       @relation(fields: [resumeFileId], references: [id])
  feedbacks        Feedback[]
  usageRecords     UsageRecord[]
  /// Associated cover letter (if generated)
  coverLetter      CoverLetter?
}

/// User feedback ratings and comments for a run
model Feedback {
  id                 String           @id @default(cuid())
  optimizationRunId  String
  userId             String
  rating             Int              // e.g. 1-5
  comments           String?
  createdAt          DateTime         @default(now())

  // Relations
  user               User             @relation(fields: [userId], references: [id])
  optimizationRun    OptimizationRun  @relation(fields: [optimizationRunId], references: [id])
}

/// Stripe subscription details per user
model Subscription {
  id                   String           @id @default(cuid())
  userId               String
  stripeCustomerId     String
  stripeSubscriptionId String
  planName             String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  // Relations
  user                 User             @relation(fields: [userId], references: [id])
  usageRecords         UsageRecord[]
}

/// Billing usage record per run
model UsageRecord {
  id                 String            @id @default(cuid())
  subscriptionId     String
  optimizationRunId  String
  tokenCount         Int
  costUsd            Float
  createdAt          DateTime          @default(now())

  // Relations
  subscription       Subscription      @relation(fields: [subscriptionId], references: [id])
  optimizationRun    OptimizationRun   @relation(fields: [optimizationRunId], references: [id])
}

/// Arbitrary user events for analytics and model feedback
model UsageEvent {
  id         String     @id @default(cuid())
  userId     String
  eventType  String     // upload, optimize, viewHistory, feedback, etc.
  meta       Json
  createdAt  DateTime   @default(now())

  // Relations
  user       User       @relation(fields: [userId], references: [id])
}

/// Saved resumes that users can reuse (max 3 per user)
model SavedResume {
  id        String   @id @default(cuid())
  userId    String
  name      String
  content   String   @db.Text
  /**
   * Hash of the raw resume text for caching parse results
   */
  /// Hash of the raw resume text for caching parse results
  textHash  String?
  /**
   * Cached parsed resume JSON; use to skip re-parsing
   */
  parsedData Json?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}