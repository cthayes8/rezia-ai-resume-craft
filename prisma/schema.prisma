generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

/// Use DIRECT_URL for migrations/DDL to bypass pgbouncer
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Generated cover letters linked to an optimization run
model CoverLetter {
  id                String          @id @default(cuid())
  userId            String
  optimizationRunId String          @unique
  letterText        String
  createdAt         DateTime        @default(now())
  optimizationRun   OptimizationRun @relation(fields: [optimizationRunId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

model User {
  id                String            @id
  email             String            @unique
  fullName          String?
  /// *
  ///    * First name captured from Clerk sign-up
  firstName         String?
  /// *
  ///    * Last name captured from Clerk sign-up
  lastName          String?
  createdAt         DateTime          @default(now())
  deletedAt         DateTime?
  freeRunsRemaining Int               @default(1)
  coverLetters      CoverLetter[]
  feedbacks         Feedback[]
  optimizationRuns  OptimizationRun[]
  resumeFiles       ResumeFile[]
  savedResumes      SavedResume[]
  subscriptions     Subscription[]
  usageEvents       UsageEvent[]
}

/// A resume file uploaded by a user
model ResumeFile {
  id               String            @id @default(cuid())
  userId           String
  fileName         String
  filePath         String
  uploadedAt       DateTime          @default(now())
  originalTextHash String?
  optimizationRuns OptimizationRun[]
  user             User              @relation(fields: [userId], references: [id])
}

/// A single optimization run: input/output, metadata & usage
model OptimizationRun {
  id             String        @id @default(cuid())
  userId         String
  resumeFileId   String?
  jobDescription String
  templateId     String
  originalText   String
  optimizedText  String
  bulletRewrites Json
  summaryRewrite String
  skillsRewrite  String
  keywords       Json
  requirements   Json
  targetTitle    String
  targetCompany  String
  aiModel        String
  tokenCount     Int
  costUsd        Float
  createdAt      DateTime      @default(now())
  deletedAt      DateTime?
  coverLetter    CoverLetter?
  feedbacks      Feedback[]
  resumeFile     ResumeFile?   @relation(fields: [resumeFileId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  usageRecords   UsageRecord[]
}

/// User feedback ratings and comments for a run
model Feedback {
  id                String          @id @default(cuid())
  optimizationRunId String
  userId            String
  rating            Int
  comments          String?
  createdAt         DateTime        @default(now())
  optimizationRun   OptimizationRun @relation(fields: [optimizationRunId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

/// Stripe subscription details per user
model Subscription {
  id                   String        @id @default(cuid())
  userId               String
  planName             String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  stripeCustomerId     String?
  /// The Stripe subscription ID (unique per subscription)
  stripeSubscriptionId String?        @unique
  user                 User          @relation(fields: [userId], references: [id])
  usageRecords         UsageRecord[]
}

/// Billing usage record per run
model UsageRecord {
  id                String          @id @default(cuid())
  subscriptionId    String
  optimizationRunId String
  tokenCount        Int
  costUsd           Float
  createdAt         DateTime        @default(now())
  optimizationRun   OptimizationRun @relation(fields: [optimizationRunId], references: [id])
  subscription      Subscription    @relation(fields: [subscriptionId], references: [id])
}

/// Arbitrary user events for analytics and model feedback
model UsageEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  meta      Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

/// Saved resumes that users can reuse (max 3 per user)
model SavedResume {
  id         String   @id @default(cuid())
  userId     String
  name       String
  content    String
  createdAt  DateTime @default(now())
  /// *
  ///    * Cached parsed resume JSON; use to skip re-parsing
  parsedData Json?
  /// *
  ///    * Hash of the raw resume text for caching parse results
  /// Hash of the raw resume text for caching parse results
  textHash   String?
  user       User     @relation(fields: [userId], references: [id])
}
