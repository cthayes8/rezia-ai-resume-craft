generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Generated cover letters linked to an optimization run
model CoverLetter {
  id                String          @id @default(cuid())
  userId            String
  optimizationRunId String          @unique
  letterText        String
  createdAt         DateTime        @default(now())
  optimizationRun   OptimizationRun @relation(fields: [optimizationRunId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

model User {
  id                String            @id
  email             String            @unique
  fullName          String?
  /// *
  /// * First name captured from Clerk sign-up
  firstName         String?
  /// *
  /// * Last name captured from Clerk sign-up
  lastName          String?
  createdAt         DateTime          @default(now())
  deletedAt         DateTime?
  freeRunsRemaining Int               @default(1)
  /// User plan: free, standard, or premium
  plan              String            @default("free")
  coverLetters      CoverLetter[]
  feedbacks         Feedback[]
  optimizationRuns  OptimizationRun[]
  resumeFiles       ResumeFile[]
  savedResumes      SavedResume[]
  subscriptions     Subscription[]
  usageEvents       UsageEvent[]
  unifiedResumes    UnifiedResume[]
  templateUsages    TemplateUsage[]
}

/// A resume file uploaded by a user
model ResumeFile {
  id               String            @id @default(cuid())
  userId           String
  fileName         String
  filePath         String
  uploadedAt       DateTime          @default(now())
  originalTextHash String?
  optimizationRuns OptimizationRun[]
  user             User              @relation(fields: [userId], references: [id])
}

/// A single optimization run: input/output, metadata & usage
model OptimizationRun {
  id                String        @id @default(cuid())
  userId            String
  resumeFileId      String?
  jobDescription    String
  templateId        String
  originalText      String
  optimizedText     String
  bulletRewrites    Json
  summaryRewrite    String
  skillsRewrite     String
  keywords          Json
  requirements      Json
  targetTitle       String
  targetCompany     String
  aiModel           String
  tokenCount        Int
  costUsd           Float
  createdAt         DateTime      @default(now())
  deletedAt         DateTime?
  /// Optional notes or feedback for the optimized resume score
  optimizedAtsNotes String?
  /// ATS score for the optimized resume (0–100)
  optimizedAtsScore Float?
  /// Optional notes or feedback for the original resume score
  originalAtsNotes  String?
  /// ATS score for the original resume (0–100)
  originalAtsScore  Float?
  coverLetter       CoverLetter?
  feedbacks         Feedback[]
  resumeFile        ResumeFile?   @relation(fields: [resumeFileId], references: [id])
  user              User          @relation(fields: [userId], references: [id])
  usageRecords      UsageRecord[]
  /// Associated scorecard for this run (one-to-one)
  scorecard         Scorecard?
}

/// User feedback ratings and comments for a run
model Feedback {
  id                String          @id @default(cuid())
  optimizationRunId String
  userId            String
  rating            Int
  comments          String?
  createdAt         DateTime        @default(now())
  optimizationRun   OptimizationRun @relation(fields: [optimizationRunId], references: [id])
  user              User            @relation(fields: [userId], references: [id])
}

/// Stripe subscription details per user
model Subscription {
  id                   String        @id @default(cuid())
  userId               String
  planName             String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  stripeCustomerId     String?
  /// The Stripe subscription ID (unique per subscription)
  stripeSubscriptionId String?       @unique
  user                 User          @relation(fields: [userId], references: [id])
  usageRecords         UsageRecord[]
}

/// Billing usage record per run
model UsageRecord {
  id                String          @id @default(cuid())
  subscriptionId    String
  optimizationRunId String
  tokenCount        Int
  costUsd           Float
  createdAt         DateTime        @default(now())
  optimizationRun   OptimizationRun @relation(fields: [optimizationRunId], references: [id])
  subscription      Subscription    @relation(fields: [subscriptionId], references: [id])
}

/// Arbitrary user events for analytics and model feedback
model UsageEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  meta      Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

/// Stored scorecards for resume optimization runs
model Scorecard {
  /// Unique identifier for this scorecard
  id                String          @id @default(cuid())
  /// Reference to the optimization run
  optimizationRunId String          @unique
  /// Overall score (0–100)
  overallScore      Int
  /// Detailed metrics per dimension (JSON array)
  metrics           Json
  /// LLM-generated key takeaways for this scorecard
  takeaways         Json?
  /// Discrete red-flag warning messages
  redFlags          Json?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  /// Relation to the associated optimization run
  optimizationRun   OptimizationRun @relation(fields: [optimizationRunId], references: [id])
}

/// Saved resumes that users can reuse (max 3 per user)
model SavedResume {
  id         String   @id @default(cuid())
  userId     String
  name       String
  content    String
  createdAt  DateTime @default(now())
  /// *
  /// * Cached parsed resume JSON; use to skip re-parsing
  parsedData Json?
  /// *
  /// * Hash of the raw resume text for caching parse results
  /// Hash of the raw resume text for caching parse results
  textHash   String?
  user       User     @relation(fields: [userId], references: [id])
}

/// Unified resumes with builder and optimization data
model UnifiedResume {
  id      String @id @default(cuid())
  userId  String
  version Int    @default(1)

  // Builder data
  builderData Json

  // Optimization data
  optimizationData Json?

  // Sharing and analytics
  sharingData Json?

  // Metadata
  title    String
  template String @default("modern")

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  analyzedAt  DateTime?
  publishedAt DateTime?

  // Relations
  user     User             @relation(fields: [userId], references: [id])
  analyses ResumeAnalysis[]
  shares   ResumeShare[]

  @@index([userId])
  @@index([createdAt])
}

/// Advanced resume analysis results
model ResumeAnalysis {
  id             String @id @default(cuid())
  resumeId       String
  jobDescription String

  // Analysis results
  overallScore     Int
  keywordMatches   Json
  similarityScore  Float
  atsCompatibility Json
  sectionScores    Json
  recommendations  Json
  insights         Json

  // Metadata
  analysisVersion String @default("2.0")
  modelUsed       String @default("gpt-4-turbo")
  processingTime  Int? // milliseconds

  createdAt DateTime @default(now())

  // Relations
  resume UnifiedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
  @@index([createdAt])
}

/// Resume sharing and public links
model ResumeShare {
  id         String @id @default(cuid())
  resumeId   String
  shareToken String @unique

  // Share settings
  isPublic  Boolean   @default(false)
  password  String?
  expiresAt DateTime?

  // Analytics
  viewCount  Int       @default(0)
  lastViewed DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume UnifiedResume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  views  ShareView[]

  @@index([shareToken])
  @@index([resumeId])
}

/// Track individual resume views
model ShareView {
  id      String @id @default(cuid())
  shareId String

  // View metadata
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?

  viewedAt DateTime @default(now())

  // Relations
  share ResumeShare @relation(fields: [shareId], references: [id], onDelete: Cascade)

  @@index([shareId])
  @@index([viewedAt])
}

/// Resume templates for the builder
model ResumeTemplate {
  id          String  @id @default(cuid())
  name        String
  description String?
  category    String  @default("professional")

  // Template data
  structure Json // Layout and styling
  sections  Json // Default sections configuration

  // Metadata
  isActive  Boolean @default(true)
  isPremium Boolean @default(false)
  sortOrder Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

/// Template usage analytics
model TemplateUsage {
  id         String   @id @default(cuid())
  templateId String
  userId     String
  usedAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([templateId])
  @@index([userId])
  @@index([usedAt])
}
