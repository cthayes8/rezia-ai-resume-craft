
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CoverLetter
 * Generated cover letters linked to an optimization run
 */
export type CoverLetter = $Result.DefaultSelection<Prisma.$CoverLetterPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ResumeFile
 * A resume file uploaded by a user
 */
export type ResumeFile = $Result.DefaultSelection<Prisma.$ResumeFilePayload>
/**
 * Model OptimizationRun
 * A single optimization run: input/output, metadata & usage
 */
export type OptimizationRun = $Result.DefaultSelection<Prisma.$OptimizationRunPayload>
/**
 * Model Feedback
 * User feedback ratings and comments for a run
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Subscription
 * Stripe subscription details per user
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model UsageRecord
 * Billing usage record per run
 */
export type UsageRecord = $Result.DefaultSelection<Prisma.$UsageRecordPayload>
/**
 * Model UsageEvent
 * Arbitrary user events for analytics and model feedback
 */
export type UsageEvent = $Result.DefaultSelection<Prisma.$UsageEventPayload>
/**
 * Model Scorecard
 * Stored scorecards for resume optimization runs
 */
export type Scorecard = $Result.DefaultSelection<Prisma.$ScorecardPayload>
/**
 * Model SavedResume
 * Saved resumes that users can reuse (max 3 per user)
 */
export type SavedResume = $Result.DefaultSelection<Prisma.$SavedResumePayload>
/**
 * Model UnifiedResume
 * Unified resumes with builder and optimization data
 */
export type UnifiedResume = $Result.DefaultSelection<Prisma.$UnifiedResumePayload>
/**
 * Model ResumeAnalysis
 * Advanced resume analysis results
 */
export type ResumeAnalysis = $Result.DefaultSelection<Prisma.$ResumeAnalysisPayload>
/**
 * Model ResumeShare
 * Resume sharing and public links
 */
export type ResumeShare = $Result.DefaultSelection<Prisma.$ResumeSharePayload>
/**
 * Model ShareView
 * Track individual resume views
 */
export type ShareView = $Result.DefaultSelection<Prisma.$ShareViewPayload>
/**
 * Model ResumeTemplate
 * Resume templates for the builder
 */
export type ResumeTemplate = $Result.DefaultSelection<Prisma.$ResumeTemplatePayload>
/**
 * Model TemplateUsage
 * Template usage analytics
 */
export type TemplateUsage = $Result.DefaultSelection<Prisma.$TemplateUsagePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CoverLetters
 * const coverLetters = await prisma.coverLetter.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CoverLetters
   * const coverLetters = await prisma.coverLetter.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.coverLetter`: Exposes CRUD operations for the **CoverLetter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoverLetters
    * const coverLetters = await prisma.coverLetter.findMany()
    * ```
    */
  get coverLetter(): Prisma.CoverLetterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeFile`: Exposes CRUD operations for the **ResumeFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeFiles
    * const resumeFiles = await prisma.resumeFile.findMany()
    * ```
    */
  get resumeFile(): Prisma.ResumeFileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.optimizationRun`: Exposes CRUD operations for the **OptimizationRun** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OptimizationRuns
    * const optimizationRuns = await prisma.optimizationRun.findMany()
    * ```
    */
  get optimizationRun(): Prisma.OptimizationRunDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usageRecord`: Exposes CRUD operations for the **UsageRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsageRecords
    * const usageRecords = await prisma.usageRecord.findMany()
    * ```
    */
  get usageRecord(): Prisma.UsageRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usageEvent`: Exposes CRUD operations for the **UsageEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsageEvents
    * const usageEvents = await prisma.usageEvent.findMany()
    * ```
    */
  get usageEvent(): Prisma.UsageEventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scorecard`: Exposes CRUD operations for the **Scorecard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Scorecards
    * const scorecards = await prisma.scorecard.findMany()
    * ```
    */
  get scorecard(): Prisma.ScorecardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.savedResume`: Exposes CRUD operations for the **SavedResume** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedResumes
    * const savedResumes = await prisma.savedResume.findMany()
    * ```
    */
  get savedResume(): Prisma.SavedResumeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.unifiedResume`: Exposes CRUD operations for the **UnifiedResume** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UnifiedResumes
    * const unifiedResumes = await prisma.unifiedResume.findMany()
    * ```
    */
  get unifiedResume(): Prisma.UnifiedResumeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeAnalysis`: Exposes CRUD operations for the **ResumeAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeAnalyses
    * const resumeAnalyses = await prisma.resumeAnalysis.findMany()
    * ```
    */
  get resumeAnalysis(): Prisma.ResumeAnalysisDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeShare`: Exposes CRUD operations for the **ResumeShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeShares
    * const resumeShares = await prisma.resumeShare.findMany()
    * ```
    */
  get resumeShare(): Prisma.ResumeShareDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shareView`: Exposes CRUD operations for the **ShareView** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareViews
    * const shareViews = await prisma.shareView.findMany()
    * ```
    */
  get shareView(): Prisma.ShareViewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.resumeTemplate`: Exposes CRUD operations for the **ResumeTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeTemplates
    * const resumeTemplates = await prisma.resumeTemplate.findMany()
    * ```
    */
  get resumeTemplate(): Prisma.ResumeTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.templateUsage`: Exposes CRUD operations for the **TemplateUsage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TemplateUsages
    * const templateUsages = await prisma.templateUsage.findMany()
    * ```
    */
  get templateUsage(): Prisma.TemplateUsageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CoverLetter: 'CoverLetter',
    User: 'User',
    ResumeFile: 'ResumeFile',
    OptimizationRun: 'OptimizationRun',
    Feedback: 'Feedback',
    Subscription: 'Subscription',
    UsageRecord: 'UsageRecord',
    UsageEvent: 'UsageEvent',
    Scorecard: 'Scorecard',
    SavedResume: 'SavedResume',
    UnifiedResume: 'UnifiedResume',
    ResumeAnalysis: 'ResumeAnalysis',
    ResumeShare: 'ResumeShare',
    ShareView: 'ShareView',
    ResumeTemplate: 'ResumeTemplate',
    TemplateUsage: 'TemplateUsage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "coverLetter" | "user" | "resumeFile" | "optimizationRun" | "feedback" | "subscription" | "usageRecord" | "usageEvent" | "scorecard" | "savedResume" | "unifiedResume" | "resumeAnalysis" | "resumeShare" | "shareView" | "resumeTemplate" | "templateUsage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      CoverLetter: {
        payload: Prisma.$CoverLetterPayload<ExtArgs>
        fields: Prisma.CoverLetterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoverLetterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoverLetterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>
          }
          findFirst: {
            args: Prisma.CoverLetterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoverLetterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>
          }
          findMany: {
            args: Prisma.CoverLetterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>[]
          }
          create: {
            args: Prisma.CoverLetterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>
          }
          createMany: {
            args: Prisma.CoverLetterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoverLetterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>[]
          }
          delete: {
            args: Prisma.CoverLetterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>
          }
          update: {
            args: Prisma.CoverLetterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>
          }
          deleteMany: {
            args: Prisma.CoverLetterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoverLetterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoverLetterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>[]
          }
          upsert: {
            args: Prisma.CoverLetterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoverLetterPayload>
          }
          aggregate: {
            args: Prisma.CoverLetterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoverLetter>
          }
          groupBy: {
            args: Prisma.CoverLetterGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoverLetterGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoverLetterCountArgs<ExtArgs>
            result: $Utils.Optional<CoverLetterCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ResumeFile: {
        payload: Prisma.$ResumeFilePayload<ExtArgs>
        fields: Prisma.ResumeFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>
          }
          findFirst: {
            args: Prisma.ResumeFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>
          }
          findMany: {
            args: Prisma.ResumeFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>[]
          }
          create: {
            args: Prisma.ResumeFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>
          }
          createMany: {
            args: Prisma.ResumeFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>[]
          }
          delete: {
            args: Prisma.ResumeFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>
          }
          update: {
            args: Prisma.ResumeFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>
          }
          deleteMany: {
            args: Prisma.ResumeFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>[]
          }
          upsert: {
            args: Prisma.ResumeFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeFilePayload>
          }
          aggregate: {
            args: Prisma.ResumeFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeFile>
          }
          groupBy: {
            args: Prisma.ResumeFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeFileCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeFileCountAggregateOutputType> | number
          }
        }
      }
      OptimizationRun: {
        payload: Prisma.$OptimizationRunPayload<ExtArgs>
        fields: Prisma.OptimizationRunFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OptimizationRunFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OptimizationRunFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>
          }
          findFirst: {
            args: Prisma.OptimizationRunFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OptimizationRunFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>
          }
          findMany: {
            args: Prisma.OptimizationRunFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>[]
          }
          create: {
            args: Prisma.OptimizationRunCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>
          }
          createMany: {
            args: Prisma.OptimizationRunCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OptimizationRunCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>[]
          }
          delete: {
            args: Prisma.OptimizationRunDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>
          }
          update: {
            args: Prisma.OptimizationRunUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>
          }
          deleteMany: {
            args: Prisma.OptimizationRunDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OptimizationRunUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OptimizationRunUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>[]
          }
          upsert: {
            args: Prisma.OptimizationRunUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OptimizationRunPayload>
          }
          aggregate: {
            args: Prisma.OptimizationRunAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOptimizationRun>
          }
          groupBy: {
            args: Prisma.OptimizationRunGroupByArgs<ExtArgs>
            result: $Utils.Optional<OptimizationRunGroupByOutputType>[]
          }
          count: {
            args: Prisma.OptimizationRunCountArgs<ExtArgs>
            result: $Utils.Optional<OptimizationRunCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      UsageRecord: {
        payload: Prisma.$UsageRecordPayload<ExtArgs>
        fields: Prisma.UsageRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsageRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsageRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>
          }
          findFirst: {
            args: Prisma.UsageRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsageRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>
          }
          findMany: {
            args: Prisma.UsageRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>[]
          }
          create: {
            args: Prisma.UsageRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>
          }
          createMany: {
            args: Prisma.UsageRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsageRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>[]
          }
          delete: {
            args: Prisma.UsageRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>
          }
          update: {
            args: Prisma.UsageRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>
          }
          deleteMany: {
            args: Prisma.UsageRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsageRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsageRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>[]
          }
          upsert: {
            args: Prisma.UsageRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageRecordPayload>
          }
          aggregate: {
            args: Prisma.UsageRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsageRecord>
          }
          groupBy: {
            args: Prisma.UsageRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsageRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsageRecordCountArgs<ExtArgs>
            result: $Utils.Optional<UsageRecordCountAggregateOutputType> | number
          }
        }
      }
      UsageEvent: {
        payload: Prisma.$UsageEventPayload<ExtArgs>
        fields: Prisma.UsageEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsageEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsageEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          findFirst: {
            args: Prisma.UsageEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsageEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          findMany: {
            args: Prisma.UsageEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>[]
          }
          create: {
            args: Prisma.UsageEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          createMany: {
            args: Prisma.UsageEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsageEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>[]
          }
          delete: {
            args: Prisma.UsageEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          update: {
            args: Prisma.UsageEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          deleteMany: {
            args: Prisma.UsageEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsageEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsageEventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>[]
          }
          upsert: {
            args: Prisma.UsageEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          aggregate: {
            args: Prisma.UsageEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsageEvent>
          }
          groupBy: {
            args: Prisma.UsageEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsageEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsageEventCountArgs<ExtArgs>
            result: $Utils.Optional<UsageEventCountAggregateOutputType> | number
          }
        }
      }
      Scorecard: {
        payload: Prisma.$ScorecardPayload<ExtArgs>
        fields: Prisma.ScorecardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScorecardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScorecardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>
          }
          findFirst: {
            args: Prisma.ScorecardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScorecardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>
          }
          findMany: {
            args: Prisma.ScorecardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>[]
          }
          create: {
            args: Prisma.ScorecardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>
          }
          createMany: {
            args: Prisma.ScorecardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScorecardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>[]
          }
          delete: {
            args: Prisma.ScorecardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>
          }
          update: {
            args: Prisma.ScorecardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>
          }
          deleteMany: {
            args: Prisma.ScorecardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScorecardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScorecardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>[]
          }
          upsert: {
            args: Prisma.ScorecardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorecardPayload>
          }
          aggregate: {
            args: Prisma.ScorecardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScorecard>
          }
          groupBy: {
            args: Prisma.ScorecardGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScorecardGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScorecardCountArgs<ExtArgs>
            result: $Utils.Optional<ScorecardCountAggregateOutputType> | number
          }
        }
      }
      SavedResume: {
        payload: Prisma.$SavedResumePayload<ExtArgs>
        fields: Prisma.SavedResumeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SavedResumeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedResumeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>
          }
          findFirst: {
            args: Prisma.SavedResumeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedResumeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>
          }
          findMany: {
            args: Prisma.SavedResumeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>[]
          }
          create: {
            args: Prisma.SavedResumeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>
          }
          createMany: {
            args: Prisma.SavedResumeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SavedResumeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>[]
          }
          delete: {
            args: Prisma.SavedResumeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>
          }
          update: {
            args: Prisma.SavedResumeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>
          }
          deleteMany: {
            args: Prisma.SavedResumeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SavedResumeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SavedResumeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>[]
          }
          upsert: {
            args: Prisma.SavedResumeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SavedResumePayload>
          }
          aggregate: {
            args: Prisma.SavedResumeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSavedResume>
          }
          groupBy: {
            args: Prisma.SavedResumeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SavedResumeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedResumeCountArgs<ExtArgs>
            result: $Utils.Optional<SavedResumeCountAggregateOutputType> | number
          }
        }
      }
      UnifiedResume: {
        payload: Prisma.$UnifiedResumePayload<ExtArgs>
        fields: Prisma.UnifiedResumeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnifiedResumeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnifiedResumeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>
          }
          findFirst: {
            args: Prisma.UnifiedResumeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnifiedResumeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>
          }
          findMany: {
            args: Prisma.UnifiedResumeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>[]
          }
          create: {
            args: Prisma.UnifiedResumeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>
          }
          createMany: {
            args: Prisma.UnifiedResumeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UnifiedResumeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>[]
          }
          delete: {
            args: Prisma.UnifiedResumeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>
          }
          update: {
            args: Prisma.UnifiedResumeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>
          }
          deleteMany: {
            args: Prisma.UnifiedResumeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnifiedResumeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UnifiedResumeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>[]
          }
          upsert: {
            args: Prisma.UnifiedResumeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnifiedResumePayload>
          }
          aggregate: {
            args: Prisma.UnifiedResumeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnifiedResume>
          }
          groupBy: {
            args: Prisma.UnifiedResumeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnifiedResumeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnifiedResumeCountArgs<ExtArgs>
            result: $Utils.Optional<UnifiedResumeCountAggregateOutputType> | number
          }
        }
      }
      ResumeAnalysis: {
        payload: Prisma.$ResumeAnalysisPayload<ExtArgs>
        fields: Prisma.ResumeAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>
          }
          findFirst: {
            args: Prisma.ResumeAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>
          }
          findMany: {
            args: Prisma.ResumeAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>[]
          }
          create: {
            args: Prisma.ResumeAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>
          }
          createMany: {
            args: Prisma.ResumeAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>[]
          }
          delete: {
            args: Prisma.ResumeAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>
          }
          update: {
            args: Prisma.ResumeAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.ResumeAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeAnalysisUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>[]
          }
          upsert: {
            args: Prisma.ResumeAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeAnalysisPayload>
          }
          aggregate: {
            args: Prisma.ResumeAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeAnalysis>
          }
          groupBy: {
            args: Prisma.ResumeAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeAnalysisCountAggregateOutputType> | number
          }
        }
      }
      ResumeShare: {
        payload: Prisma.$ResumeSharePayload<ExtArgs>
        fields: Prisma.ResumeShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>
          }
          findFirst: {
            args: Prisma.ResumeShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>
          }
          findMany: {
            args: Prisma.ResumeShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>[]
          }
          create: {
            args: Prisma.ResumeShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>
          }
          createMany: {
            args: Prisma.ResumeShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>[]
          }
          delete: {
            args: Prisma.ResumeShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>
          }
          update: {
            args: Prisma.ResumeShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>
          }
          deleteMany: {
            args: Prisma.ResumeShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeShareUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>[]
          }
          upsert: {
            args: Prisma.ResumeShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeSharePayload>
          }
          aggregate: {
            args: Prisma.ResumeShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeShare>
          }
          groupBy: {
            args: Prisma.ResumeShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeShareCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeShareCountAggregateOutputType> | number
          }
        }
      }
      ShareView: {
        payload: Prisma.$ShareViewPayload<ExtArgs>
        fields: Prisma.ShareViewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareViewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareViewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>
          }
          findFirst: {
            args: Prisma.ShareViewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareViewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>
          }
          findMany: {
            args: Prisma.ShareViewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>[]
          }
          create: {
            args: Prisma.ShareViewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>
          }
          createMany: {
            args: Prisma.ShareViewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShareViewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>[]
          }
          delete: {
            args: Prisma.ShareViewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>
          }
          update: {
            args: Prisma.ShareViewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>
          }
          deleteMany: {
            args: Prisma.ShareViewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareViewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShareViewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>[]
          }
          upsert: {
            args: Prisma.ShareViewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareViewPayload>
          }
          aggregate: {
            args: Prisma.ShareViewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareView>
          }
          groupBy: {
            args: Prisma.ShareViewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareViewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareViewCountArgs<ExtArgs>
            result: $Utils.Optional<ShareViewCountAggregateOutputType> | number
          }
        }
      }
      ResumeTemplate: {
        payload: Prisma.$ResumeTemplatePayload<ExtArgs>
        fields: Prisma.ResumeTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>
          }
          findFirst: {
            args: Prisma.ResumeTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>
          }
          findMany: {
            args: Prisma.ResumeTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>[]
          }
          create: {
            args: Prisma.ResumeTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>
          }
          createMany: {
            args: Prisma.ResumeTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResumeTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>[]
          }
          delete: {
            args: Prisma.ResumeTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>
          }
          update: {
            args: Prisma.ResumeTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>
          }
          deleteMany: {
            args: Prisma.ResumeTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResumeTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>[]
          }
          upsert: {
            args: Prisma.ResumeTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResumeTemplatePayload>
          }
          aggregate: {
            args: Prisma.ResumeTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResumeTemplate>
          }
          groupBy: {
            args: Prisma.ResumeTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResumeTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<ResumeTemplateCountAggregateOutputType> | number
          }
        }
      }
      TemplateUsage: {
        payload: Prisma.$TemplateUsagePayload<ExtArgs>
        fields: Prisma.TemplateUsageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplateUsageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplateUsageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>
          }
          findFirst: {
            args: Prisma.TemplateUsageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplateUsageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>
          }
          findMany: {
            args: Prisma.TemplateUsageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>[]
          }
          create: {
            args: Prisma.TemplateUsageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>
          }
          createMany: {
            args: Prisma.TemplateUsageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplateUsageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>[]
          }
          delete: {
            args: Prisma.TemplateUsageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>
          }
          update: {
            args: Prisma.TemplateUsageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>
          }
          deleteMany: {
            args: Prisma.TemplateUsageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplateUsageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TemplateUsageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>[]
          }
          upsert: {
            args: Prisma.TemplateUsageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplateUsagePayload>
          }
          aggregate: {
            args: Prisma.TemplateUsageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplateUsage>
          }
          groupBy: {
            args: Prisma.TemplateUsageGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplateUsageGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplateUsageCountArgs<ExtArgs>
            result: $Utils.Optional<TemplateUsageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    coverLetter?: CoverLetterOmit
    user?: UserOmit
    resumeFile?: ResumeFileOmit
    optimizationRun?: OptimizationRunOmit
    feedback?: FeedbackOmit
    subscription?: SubscriptionOmit
    usageRecord?: UsageRecordOmit
    usageEvent?: UsageEventOmit
    scorecard?: ScorecardOmit
    savedResume?: SavedResumeOmit
    unifiedResume?: UnifiedResumeOmit
    resumeAnalysis?: ResumeAnalysisOmit
    resumeShare?: ResumeShareOmit
    shareView?: ShareViewOmit
    resumeTemplate?: ResumeTemplateOmit
    templateUsage?: TemplateUsageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    coverLetters: number
    feedbacks: number
    optimizationRuns: number
    resumeFiles: number
    savedResumes: number
    subscriptions: number
    usageEvents: number
    unifiedResumes: number
    templateUsages: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coverLetters?: boolean | UserCountOutputTypeCountCoverLettersArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
    optimizationRuns?: boolean | UserCountOutputTypeCountOptimizationRunsArgs
    resumeFiles?: boolean | UserCountOutputTypeCountResumeFilesArgs
    savedResumes?: boolean | UserCountOutputTypeCountSavedResumesArgs
    subscriptions?: boolean | UserCountOutputTypeCountSubscriptionsArgs
    usageEvents?: boolean | UserCountOutputTypeCountUsageEventsArgs
    unifiedResumes?: boolean | UserCountOutputTypeCountUnifiedResumesArgs
    templateUsages?: boolean | UserCountOutputTypeCountTemplateUsagesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCoverLettersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoverLetterWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOptimizationRunsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptimizationRunWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResumeFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeFileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSavedResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedResumeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUsageEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUnifiedResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnifiedResumeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTemplateUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateUsageWhereInput
  }


  /**
   * Count Type ResumeFileCountOutputType
   */

  export type ResumeFileCountOutputType = {
    optimizationRuns: number
  }

  export type ResumeFileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRuns?: boolean | ResumeFileCountOutputTypeCountOptimizationRunsArgs
  }

  // Custom InputTypes
  /**
   * ResumeFileCountOutputType without action
   */
  export type ResumeFileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFileCountOutputType
     */
    select?: ResumeFileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResumeFileCountOutputType without action
   */
  export type ResumeFileCountOutputTypeCountOptimizationRunsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptimizationRunWhereInput
  }


  /**
   * Count Type OptimizationRunCountOutputType
   */

  export type OptimizationRunCountOutputType = {
    feedbacks: number
    usageRecords: number
  }

  export type OptimizationRunCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | OptimizationRunCountOutputTypeCountFeedbacksArgs
    usageRecords?: boolean | OptimizationRunCountOutputTypeCountUsageRecordsArgs
  }

  // Custom InputTypes
  /**
   * OptimizationRunCountOutputType without action
   */
  export type OptimizationRunCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRunCountOutputType
     */
    select?: OptimizationRunCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OptimizationRunCountOutputType without action
   */
  export type OptimizationRunCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * OptimizationRunCountOutputType without action
   */
  export type OptimizationRunCountOutputTypeCountUsageRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageRecordWhereInput
  }


  /**
   * Count Type SubscriptionCountOutputType
   */

  export type SubscriptionCountOutputType = {
    usageRecords: number
  }

  export type SubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usageRecords?: boolean | SubscriptionCountOutputTypeCountUsageRecordsArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionCountOutputType
     */
    select?: SubscriptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeCountUsageRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageRecordWhereInput
  }


  /**
   * Count Type UnifiedResumeCountOutputType
   */

  export type UnifiedResumeCountOutputType = {
    analyses: number
    shares: number
  }

  export type UnifiedResumeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    analyses?: boolean | UnifiedResumeCountOutputTypeCountAnalysesArgs
    shares?: boolean | UnifiedResumeCountOutputTypeCountSharesArgs
  }

  // Custom InputTypes
  /**
   * UnifiedResumeCountOutputType without action
   */
  export type UnifiedResumeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResumeCountOutputType
     */
    select?: UnifiedResumeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UnifiedResumeCountOutputType without action
   */
  export type UnifiedResumeCountOutputTypeCountAnalysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeAnalysisWhereInput
  }

  /**
   * UnifiedResumeCountOutputType without action
   */
  export type UnifiedResumeCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeShareWhereInput
  }


  /**
   * Count Type ResumeShareCountOutputType
   */

  export type ResumeShareCountOutputType = {
    views: number
  }

  export type ResumeShareCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    views?: boolean | ResumeShareCountOutputTypeCountViewsArgs
  }

  // Custom InputTypes
  /**
   * ResumeShareCountOutputType without action
   */
  export type ResumeShareCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShareCountOutputType
     */
    select?: ResumeShareCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ResumeShareCountOutputType without action
   */
  export type ResumeShareCountOutputTypeCountViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareViewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model CoverLetter
   */

  export type AggregateCoverLetter = {
    _count: CoverLetterCountAggregateOutputType | null
    _min: CoverLetterMinAggregateOutputType | null
    _max: CoverLetterMaxAggregateOutputType | null
  }

  export type CoverLetterMinAggregateOutputType = {
    id: string | null
    userId: string | null
    optimizationRunId: string | null
    letterText: string | null
    createdAt: Date | null
  }

  export type CoverLetterMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    optimizationRunId: string | null
    letterText: string | null
    createdAt: Date | null
  }

  export type CoverLetterCountAggregateOutputType = {
    id: number
    userId: number
    optimizationRunId: number
    letterText: number
    createdAt: number
    _all: number
  }


  export type CoverLetterMinAggregateInputType = {
    id?: true
    userId?: true
    optimizationRunId?: true
    letterText?: true
    createdAt?: true
  }

  export type CoverLetterMaxAggregateInputType = {
    id?: true
    userId?: true
    optimizationRunId?: true
    letterText?: true
    createdAt?: true
  }

  export type CoverLetterCountAggregateInputType = {
    id?: true
    userId?: true
    optimizationRunId?: true
    letterText?: true
    createdAt?: true
    _all?: true
  }

  export type CoverLetterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoverLetter to aggregate.
     */
    where?: CoverLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoverLetters to fetch.
     */
    orderBy?: CoverLetterOrderByWithRelationInput | CoverLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoverLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoverLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoverLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoverLetters
    **/
    _count?: true | CoverLetterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoverLetterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoverLetterMaxAggregateInputType
  }

  export type GetCoverLetterAggregateType<T extends CoverLetterAggregateArgs> = {
        [P in keyof T & keyof AggregateCoverLetter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoverLetter[P]>
      : GetScalarType<T[P], AggregateCoverLetter[P]>
  }




  export type CoverLetterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoverLetterWhereInput
    orderBy?: CoverLetterOrderByWithAggregationInput | CoverLetterOrderByWithAggregationInput[]
    by: CoverLetterScalarFieldEnum[] | CoverLetterScalarFieldEnum
    having?: CoverLetterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoverLetterCountAggregateInputType | true
    _min?: CoverLetterMinAggregateInputType
    _max?: CoverLetterMaxAggregateInputType
  }

  export type CoverLetterGroupByOutputType = {
    id: string
    userId: string
    optimizationRunId: string
    letterText: string
    createdAt: Date
    _count: CoverLetterCountAggregateOutputType | null
    _min: CoverLetterMinAggregateOutputType | null
    _max: CoverLetterMaxAggregateOutputType | null
  }

  type GetCoverLetterGroupByPayload<T extends CoverLetterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoverLetterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoverLetterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoverLetterGroupByOutputType[P]>
            : GetScalarType<T[P], CoverLetterGroupByOutputType[P]>
        }
      >
    >


  export type CoverLetterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    optimizationRunId?: boolean
    letterText?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coverLetter"]>

  export type CoverLetterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    optimizationRunId?: boolean
    letterText?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coverLetter"]>

  export type CoverLetterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    optimizationRunId?: boolean
    letterText?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coverLetter"]>

  export type CoverLetterSelectScalar = {
    id?: boolean
    userId?: boolean
    optimizationRunId?: boolean
    letterText?: boolean
    createdAt?: boolean
  }

  export type CoverLetterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "optimizationRunId" | "letterText" | "createdAt", ExtArgs["result"]["coverLetter"]>
  export type CoverLetterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CoverLetterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CoverLetterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CoverLetterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoverLetter"
    objects: {
      optimizationRun: Prisma.$OptimizationRunPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      optimizationRunId: string
      letterText: string
      createdAt: Date
    }, ExtArgs["result"]["coverLetter"]>
    composites: {}
  }

  type CoverLetterGetPayload<S extends boolean | null | undefined | CoverLetterDefaultArgs> = $Result.GetResult<Prisma.$CoverLetterPayload, S>

  type CoverLetterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoverLetterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoverLetterCountAggregateInputType | true
    }

  export interface CoverLetterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoverLetter'], meta: { name: 'CoverLetter' } }
    /**
     * Find zero or one CoverLetter that matches the filter.
     * @param {CoverLetterFindUniqueArgs} args - Arguments to find a CoverLetter
     * @example
     * // Get one CoverLetter
     * const coverLetter = await prisma.coverLetter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoverLetterFindUniqueArgs>(args: SelectSubset<T, CoverLetterFindUniqueArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoverLetter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoverLetterFindUniqueOrThrowArgs} args - Arguments to find a CoverLetter
     * @example
     * // Get one CoverLetter
     * const coverLetter = await prisma.coverLetter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoverLetterFindUniqueOrThrowArgs>(args: SelectSubset<T, CoverLetterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoverLetter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverLetterFindFirstArgs} args - Arguments to find a CoverLetter
     * @example
     * // Get one CoverLetter
     * const coverLetter = await prisma.coverLetter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoverLetterFindFirstArgs>(args?: SelectSubset<T, CoverLetterFindFirstArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoverLetter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverLetterFindFirstOrThrowArgs} args - Arguments to find a CoverLetter
     * @example
     * // Get one CoverLetter
     * const coverLetter = await prisma.coverLetter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoverLetterFindFirstOrThrowArgs>(args?: SelectSubset<T, CoverLetterFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoverLetters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverLetterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoverLetters
     * const coverLetters = await prisma.coverLetter.findMany()
     * 
     * // Get first 10 CoverLetters
     * const coverLetters = await prisma.coverLetter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coverLetterWithIdOnly = await prisma.coverLetter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoverLetterFindManyArgs>(args?: SelectSubset<T, CoverLetterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoverLetter.
     * @param {CoverLetterCreateArgs} args - Arguments to create a CoverLetter.
     * @example
     * // Create one CoverLetter
     * const CoverLetter = await prisma.coverLetter.create({
     *   data: {
     *     // ... data to create a CoverLetter
     *   }
     * })
     * 
     */
    create<T extends CoverLetterCreateArgs>(args: SelectSubset<T, CoverLetterCreateArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoverLetters.
     * @param {CoverLetterCreateManyArgs} args - Arguments to create many CoverLetters.
     * @example
     * // Create many CoverLetters
     * const coverLetter = await prisma.coverLetter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoverLetterCreateManyArgs>(args?: SelectSubset<T, CoverLetterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoverLetters and returns the data saved in the database.
     * @param {CoverLetterCreateManyAndReturnArgs} args - Arguments to create many CoverLetters.
     * @example
     * // Create many CoverLetters
     * const coverLetter = await prisma.coverLetter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoverLetters and only return the `id`
     * const coverLetterWithIdOnly = await prisma.coverLetter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoverLetterCreateManyAndReturnArgs>(args?: SelectSubset<T, CoverLetterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoverLetter.
     * @param {CoverLetterDeleteArgs} args - Arguments to delete one CoverLetter.
     * @example
     * // Delete one CoverLetter
     * const CoverLetter = await prisma.coverLetter.delete({
     *   where: {
     *     // ... filter to delete one CoverLetter
     *   }
     * })
     * 
     */
    delete<T extends CoverLetterDeleteArgs>(args: SelectSubset<T, CoverLetterDeleteArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoverLetter.
     * @param {CoverLetterUpdateArgs} args - Arguments to update one CoverLetter.
     * @example
     * // Update one CoverLetter
     * const coverLetter = await prisma.coverLetter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoverLetterUpdateArgs>(args: SelectSubset<T, CoverLetterUpdateArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoverLetters.
     * @param {CoverLetterDeleteManyArgs} args - Arguments to filter CoverLetters to delete.
     * @example
     * // Delete a few CoverLetters
     * const { count } = await prisma.coverLetter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoverLetterDeleteManyArgs>(args?: SelectSubset<T, CoverLetterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoverLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverLetterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoverLetters
     * const coverLetter = await prisma.coverLetter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoverLetterUpdateManyArgs>(args: SelectSubset<T, CoverLetterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoverLetters and returns the data updated in the database.
     * @param {CoverLetterUpdateManyAndReturnArgs} args - Arguments to update many CoverLetters.
     * @example
     * // Update many CoverLetters
     * const coverLetter = await prisma.coverLetter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoverLetters and only return the `id`
     * const coverLetterWithIdOnly = await prisma.coverLetter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoverLetterUpdateManyAndReturnArgs>(args: SelectSubset<T, CoverLetterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoverLetter.
     * @param {CoverLetterUpsertArgs} args - Arguments to update or create a CoverLetter.
     * @example
     * // Update or create a CoverLetter
     * const coverLetter = await prisma.coverLetter.upsert({
     *   create: {
     *     // ... data to create a CoverLetter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoverLetter we want to update
     *   }
     * })
     */
    upsert<T extends CoverLetterUpsertArgs>(args: SelectSubset<T, CoverLetterUpsertArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoverLetters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverLetterCountArgs} args - Arguments to filter CoverLetters to count.
     * @example
     * // Count the number of CoverLetters
     * const count = await prisma.coverLetter.count({
     *   where: {
     *     // ... the filter for the CoverLetters we want to count
     *   }
     * })
    **/
    count<T extends CoverLetterCountArgs>(
      args?: Subset<T, CoverLetterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoverLetterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoverLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverLetterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoverLetterAggregateArgs>(args: Subset<T, CoverLetterAggregateArgs>): Prisma.PrismaPromise<GetCoverLetterAggregateType<T>>

    /**
     * Group by CoverLetter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverLetterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoverLetterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoverLetterGroupByArgs['orderBy'] }
        : { orderBy?: CoverLetterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoverLetterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoverLetterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoverLetter model
   */
  readonly fields: CoverLetterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoverLetter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoverLetterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    optimizationRun<T extends OptimizationRunDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRunDefaultArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoverLetter model
   */
  interface CoverLetterFieldRefs {
    readonly id: FieldRef<"CoverLetter", 'String'>
    readonly userId: FieldRef<"CoverLetter", 'String'>
    readonly optimizationRunId: FieldRef<"CoverLetter", 'String'>
    readonly letterText: FieldRef<"CoverLetter", 'String'>
    readonly createdAt: FieldRef<"CoverLetter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoverLetter findUnique
   */
  export type CoverLetterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * Filter, which CoverLetter to fetch.
     */
    where: CoverLetterWhereUniqueInput
  }

  /**
   * CoverLetter findUniqueOrThrow
   */
  export type CoverLetterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * Filter, which CoverLetter to fetch.
     */
    where: CoverLetterWhereUniqueInput
  }

  /**
   * CoverLetter findFirst
   */
  export type CoverLetterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * Filter, which CoverLetter to fetch.
     */
    where?: CoverLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoverLetters to fetch.
     */
    orderBy?: CoverLetterOrderByWithRelationInput | CoverLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoverLetters.
     */
    cursor?: CoverLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoverLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoverLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoverLetters.
     */
    distinct?: CoverLetterScalarFieldEnum | CoverLetterScalarFieldEnum[]
  }

  /**
   * CoverLetter findFirstOrThrow
   */
  export type CoverLetterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * Filter, which CoverLetter to fetch.
     */
    where?: CoverLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoverLetters to fetch.
     */
    orderBy?: CoverLetterOrderByWithRelationInput | CoverLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoverLetters.
     */
    cursor?: CoverLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoverLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoverLetters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoverLetters.
     */
    distinct?: CoverLetterScalarFieldEnum | CoverLetterScalarFieldEnum[]
  }

  /**
   * CoverLetter findMany
   */
  export type CoverLetterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * Filter, which CoverLetters to fetch.
     */
    where?: CoverLetterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoverLetters to fetch.
     */
    orderBy?: CoverLetterOrderByWithRelationInput | CoverLetterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoverLetters.
     */
    cursor?: CoverLetterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoverLetters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoverLetters.
     */
    skip?: number
    distinct?: CoverLetterScalarFieldEnum | CoverLetterScalarFieldEnum[]
  }

  /**
   * CoverLetter create
   */
  export type CoverLetterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * The data needed to create a CoverLetter.
     */
    data: XOR<CoverLetterCreateInput, CoverLetterUncheckedCreateInput>
  }

  /**
   * CoverLetter createMany
   */
  export type CoverLetterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoverLetters.
     */
    data: CoverLetterCreateManyInput | CoverLetterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoverLetter createManyAndReturn
   */
  export type CoverLetterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * The data used to create many CoverLetters.
     */
    data: CoverLetterCreateManyInput | CoverLetterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoverLetter update
   */
  export type CoverLetterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * The data needed to update a CoverLetter.
     */
    data: XOR<CoverLetterUpdateInput, CoverLetterUncheckedUpdateInput>
    /**
     * Choose, which CoverLetter to update.
     */
    where: CoverLetterWhereUniqueInput
  }

  /**
   * CoverLetter updateMany
   */
  export type CoverLetterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoverLetters.
     */
    data: XOR<CoverLetterUpdateManyMutationInput, CoverLetterUncheckedUpdateManyInput>
    /**
     * Filter which CoverLetters to update
     */
    where?: CoverLetterWhereInput
    /**
     * Limit how many CoverLetters to update.
     */
    limit?: number
  }

  /**
   * CoverLetter updateManyAndReturn
   */
  export type CoverLetterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * The data used to update CoverLetters.
     */
    data: XOR<CoverLetterUpdateManyMutationInput, CoverLetterUncheckedUpdateManyInput>
    /**
     * Filter which CoverLetters to update
     */
    where?: CoverLetterWhereInput
    /**
     * Limit how many CoverLetters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoverLetter upsert
   */
  export type CoverLetterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * The filter to search for the CoverLetter to update in case it exists.
     */
    where: CoverLetterWhereUniqueInput
    /**
     * In case the CoverLetter found by the `where` argument doesn't exist, create a new CoverLetter with this data.
     */
    create: XOR<CoverLetterCreateInput, CoverLetterUncheckedCreateInput>
    /**
     * In case the CoverLetter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoverLetterUpdateInput, CoverLetterUncheckedUpdateInput>
  }

  /**
   * CoverLetter delete
   */
  export type CoverLetterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    /**
     * Filter which CoverLetter to delete.
     */
    where: CoverLetterWhereUniqueInput
  }

  /**
   * CoverLetter deleteMany
   */
  export type CoverLetterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoverLetters to delete
     */
    where?: CoverLetterWhereInput
    /**
     * Limit how many CoverLetters to delete.
     */
    limit?: number
  }

  /**
   * CoverLetter without action
   */
  export type CoverLetterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    freeRunsRemaining: number | null
  }

  export type UserSumAggregateOutputType = {
    freeRunsRemaining: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    deletedAt: Date | null
    freeRunsRemaining: number | null
    plan: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    fullName: string | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    deletedAt: Date | null
    freeRunsRemaining: number | null
    plan: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    fullName: number
    firstName: number
    lastName: number
    createdAt: number
    deletedAt: number
    freeRunsRemaining: number
    plan: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    freeRunsRemaining?: true
  }

  export type UserSumAggregateInputType = {
    freeRunsRemaining?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    deletedAt?: true
    freeRunsRemaining?: true
    plan?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    deletedAt?: true
    freeRunsRemaining?: true
    plan?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    fullName?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    deletedAt?: true
    freeRunsRemaining?: true
    plan?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    fullName: string | null
    firstName: string | null
    lastName: string | null
    createdAt: Date
    deletedAt: Date | null
    freeRunsRemaining: number
    plan: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    freeRunsRemaining?: boolean
    plan?: boolean
    coverLetters?: boolean | User$coverLettersArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    optimizationRuns?: boolean | User$optimizationRunsArgs<ExtArgs>
    resumeFiles?: boolean | User$resumeFilesArgs<ExtArgs>
    savedResumes?: boolean | User$savedResumesArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    usageEvents?: boolean | User$usageEventsArgs<ExtArgs>
    unifiedResumes?: boolean | User$unifiedResumesArgs<ExtArgs>
    templateUsages?: boolean | User$templateUsagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    freeRunsRemaining?: boolean
    plan?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    freeRunsRemaining?: boolean
    plan?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    fullName?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    freeRunsRemaining?: boolean
    plan?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "fullName" | "firstName" | "lastName" | "createdAt" | "deletedAt" | "freeRunsRemaining" | "plan", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coverLetters?: boolean | User$coverLettersArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    optimizationRuns?: boolean | User$optimizationRunsArgs<ExtArgs>
    resumeFiles?: boolean | User$resumeFilesArgs<ExtArgs>
    savedResumes?: boolean | User$savedResumesArgs<ExtArgs>
    subscriptions?: boolean | User$subscriptionsArgs<ExtArgs>
    usageEvents?: boolean | User$usageEventsArgs<ExtArgs>
    unifiedResumes?: boolean | User$unifiedResumesArgs<ExtArgs>
    templateUsages?: boolean | User$templateUsagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      coverLetters: Prisma.$CoverLetterPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      optimizationRuns: Prisma.$OptimizationRunPayload<ExtArgs>[]
      resumeFiles: Prisma.$ResumeFilePayload<ExtArgs>[]
      savedResumes: Prisma.$SavedResumePayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      usageEvents: Prisma.$UsageEventPayload<ExtArgs>[]
      unifiedResumes: Prisma.$UnifiedResumePayload<ExtArgs>[]
      templateUsages: Prisma.$TemplateUsagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      fullName: string | null
      /**
       * *
       * * First name captured from Clerk sign-up
       */
      firstName: string | null
      /**
       * *
       * * Last name captured from Clerk sign-up
       */
      lastName: string | null
      createdAt: Date
      deletedAt: Date | null
      freeRunsRemaining: number
      /**
       * User plan: free, standard, or premium
       */
      plan: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coverLetters<T extends User$coverLettersArgs<ExtArgs> = {}>(args?: Subset<T, User$coverLettersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    optimizationRuns<T extends User$optimizationRunsArgs<ExtArgs> = {}>(args?: Subset<T, User$optimizationRunsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeFiles<T extends User$resumeFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$resumeFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    savedResumes<T extends User$savedResumesArgs<ExtArgs> = {}>(args?: Subset<T, User$savedResumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscriptions<T extends User$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usageEvents<T extends User$usageEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$usageEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    unifiedResumes<T extends User$unifiedResumesArgs<ExtArgs> = {}>(args?: Subset<T, User$unifiedResumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    templateUsages<T extends User$templateUsagesArgs<ExtArgs> = {}>(args?: Subset<T, User$templateUsagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
    readonly freeRunsRemaining: FieldRef<"User", 'Int'>
    readonly plan: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.coverLetters
   */
  export type User$coverLettersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    where?: CoverLetterWhereInput
    orderBy?: CoverLetterOrderByWithRelationInput | CoverLetterOrderByWithRelationInput[]
    cursor?: CoverLetterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoverLetterScalarFieldEnum | CoverLetterScalarFieldEnum[]
  }

  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.optimizationRuns
   */
  export type User$optimizationRunsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    where?: OptimizationRunWhereInput
    orderBy?: OptimizationRunOrderByWithRelationInput | OptimizationRunOrderByWithRelationInput[]
    cursor?: OptimizationRunWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OptimizationRunScalarFieldEnum | OptimizationRunScalarFieldEnum[]
  }

  /**
   * User.resumeFiles
   */
  export type User$resumeFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    where?: ResumeFileWhereInput
    orderBy?: ResumeFileOrderByWithRelationInput | ResumeFileOrderByWithRelationInput[]
    cursor?: ResumeFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeFileScalarFieldEnum | ResumeFileScalarFieldEnum[]
  }

  /**
   * User.savedResumes
   */
  export type User$savedResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    where?: SavedResumeWhereInput
    orderBy?: SavedResumeOrderByWithRelationInput | SavedResumeOrderByWithRelationInput[]
    cursor?: SavedResumeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedResumeScalarFieldEnum | SavedResumeScalarFieldEnum[]
  }

  /**
   * User.subscriptions
   */
  export type User$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * User.usageEvents
   */
  export type User$usageEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    where?: UsageEventWhereInput
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    cursor?: UsageEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * User.unifiedResumes
   */
  export type User$unifiedResumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    where?: UnifiedResumeWhereInput
    orderBy?: UnifiedResumeOrderByWithRelationInput | UnifiedResumeOrderByWithRelationInput[]
    cursor?: UnifiedResumeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnifiedResumeScalarFieldEnum | UnifiedResumeScalarFieldEnum[]
  }

  /**
   * User.templateUsages
   */
  export type User$templateUsagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    where?: TemplateUsageWhereInput
    orderBy?: TemplateUsageOrderByWithRelationInput | TemplateUsageOrderByWithRelationInput[]
    cursor?: TemplateUsageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateUsageScalarFieldEnum | TemplateUsageScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model ResumeFile
   */

  export type AggregateResumeFile = {
    _count: ResumeFileCountAggregateOutputType | null
    _min: ResumeFileMinAggregateOutputType | null
    _max: ResumeFileMaxAggregateOutputType | null
  }

  export type ResumeFileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    fileName: string | null
    filePath: string | null
    uploadedAt: Date | null
    originalTextHash: string | null
  }

  export type ResumeFileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    fileName: string | null
    filePath: string | null
    uploadedAt: Date | null
    originalTextHash: string | null
  }

  export type ResumeFileCountAggregateOutputType = {
    id: number
    userId: number
    fileName: number
    filePath: number
    uploadedAt: number
    originalTextHash: number
    _all: number
  }


  export type ResumeFileMinAggregateInputType = {
    id?: true
    userId?: true
    fileName?: true
    filePath?: true
    uploadedAt?: true
    originalTextHash?: true
  }

  export type ResumeFileMaxAggregateInputType = {
    id?: true
    userId?: true
    fileName?: true
    filePath?: true
    uploadedAt?: true
    originalTextHash?: true
  }

  export type ResumeFileCountAggregateInputType = {
    id?: true
    userId?: true
    fileName?: true
    filePath?: true
    uploadedAt?: true
    originalTextHash?: true
    _all?: true
  }

  export type ResumeFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeFile to aggregate.
     */
    where?: ResumeFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeFiles to fetch.
     */
    orderBy?: ResumeFileOrderByWithRelationInput | ResumeFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeFiles
    **/
    _count?: true | ResumeFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeFileMaxAggregateInputType
  }

  export type GetResumeFileAggregateType<T extends ResumeFileAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeFile[P]>
      : GetScalarType<T[P], AggregateResumeFile[P]>
  }




  export type ResumeFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeFileWhereInput
    orderBy?: ResumeFileOrderByWithAggregationInput | ResumeFileOrderByWithAggregationInput[]
    by: ResumeFileScalarFieldEnum[] | ResumeFileScalarFieldEnum
    having?: ResumeFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeFileCountAggregateInputType | true
    _min?: ResumeFileMinAggregateInputType
    _max?: ResumeFileMaxAggregateInputType
  }

  export type ResumeFileGroupByOutputType = {
    id: string
    userId: string
    fileName: string
    filePath: string
    uploadedAt: Date
    originalTextHash: string | null
    _count: ResumeFileCountAggregateOutputType | null
    _min: ResumeFileMinAggregateOutputType | null
    _max: ResumeFileMaxAggregateOutputType | null
  }

  type GetResumeFileGroupByPayload<T extends ResumeFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeFileGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeFileGroupByOutputType[P]>
        }
      >
    >


  export type ResumeFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileName?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    originalTextHash?: boolean
    optimizationRuns?: boolean | ResumeFile$optimizationRunsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ResumeFileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeFile"]>

  export type ResumeFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileName?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    originalTextHash?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeFile"]>

  export type ResumeFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fileName?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    originalTextHash?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeFile"]>

  export type ResumeFileSelectScalar = {
    id?: boolean
    userId?: boolean
    fileName?: boolean
    filePath?: boolean
    uploadedAt?: boolean
    originalTextHash?: boolean
  }

  export type ResumeFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "fileName" | "filePath" | "uploadedAt" | "originalTextHash", ExtArgs["result"]["resumeFile"]>
  export type ResumeFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRuns?: boolean | ResumeFile$optimizationRunsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ResumeFileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResumeFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResumeFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResumeFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeFile"
    objects: {
      optimizationRuns: Prisma.$OptimizationRunPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      fileName: string
      filePath: string
      uploadedAt: Date
      originalTextHash: string | null
    }, ExtArgs["result"]["resumeFile"]>
    composites: {}
  }

  type ResumeFileGetPayload<S extends boolean | null | undefined | ResumeFileDefaultArgs> = $Result.GetResult<Prisma.$ResumeFilePayload, S>

  type ResumeFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeFileCountAggregateInputType | true
    }

  export interface ResumeFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeFile'], meta: { name: 'ResumeFile' } }
    /**
     * Find zero or one ResumeFile that matches the filter.
     * @param {ResumeFileFindUniqueArgs} args - Arguments to find a ResumeFile
     * @example
     * // Get one ResumeFile
     * const resumeFile = await prisma.resumeFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeFileFindUniqueArgs>(args: SelectSubset<T, ResumeFileFindUniqueArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeFileFindUniqueOrThrowArgs} args - Arguments to find a ResumeFile
     * @example
     * // Get one ResumeFile
     * const resumeFile = await prisma.resumeFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeFileFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFileFindFirstArgs} args - Arguments to find a ResumeFile
     * @example
     * // Get one ResumeFile
     * const resumeFile = await prisma.resumeFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeFileFindFirstArgs>(args?: SelectSubset<T, ResumeFileFindFirstArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFileFindFirstOrThrowArgs} args - Arguments to find a ResumeFile
     * @example
     * // Get one ResumeFile
     * const resumeFile = await prisma.resumeFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeFileFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeFiles
     * const resumeFiles = await prisma.resumeFile.findMany()
     * 
     * // Get first 10 ResumeFiles
     * const resumeFiles = await prisma.resumeFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeFileWithIdOnly = await prisma.resumeFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeFileFindManyArgs>(args?: SelectSubset<T, ResumeFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeFile.
     * @param {ResumeFileCreateArgs} args - Arguments to create a ResumeFile.
     * @example
     * // Create one ResumeFile
     * const ResumeFile = await prisma.resumeFile.create({
     *   data: {
     *     // ... data to create a ResumeFile
     *   }
     * })
     * 
     */
    create<T extends ResumeFileCreateArgs>(args: SelectSubset<T, ResumeFileCreateArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeFiles.
     * @param {ResumeFileCreateManyArgs} args - Arguments to create many ResumeFiles.
     * @example
     * // Create many ResumeFiles
     * const resumeFile = await prisma.resumeFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeFileCreateManyArgs>(args?: SelectSubset<T, ResumeFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeFiles and returns the data saved in the database.
     * @param {ResumeFileCreateManyAndReturnArgs} args - Arguments to create many ResumeFiles.
     * @example
     * // Create many ResumeFiles
     * const resumeFile = await prisma.resumeFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeFiles and only return the `id`
     * const resumeFileWithIdOnly = await prisma.resumeFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeFileCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeFile.
     * @param {ResumeFileDeleteArgs} args - Arguments to delete one ResumeFile.
     * @example
     * // Delete one ResumeFile
     * const ResumeFile = await prisma.resumeFile.delete({
     *   where: {
     *     // ... filter to delete one ResumeFile
     *   }
     * })
     * 
     */
    delete<T extends ResumeFileDeleteArgs>(args: SelectSubset<T, ResumeFileDeleteArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeFile.
     * @param {ResumeFileUpdateArgs} args - Arguments to update one ResumeFile.
     * @example
     * // Update one ResumeFile
     * const resumeFile = await prisma.resumeFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeFileUpdateArgs>(args: SelectSubset<T, ResumeFileUpdateArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeFiles.
     * @param {ResumeFileDeleteManyArgs} args - Arguments to filter ResumeFiles to delete.
     * @example
     * // Delete a few ResumeFiles
     * const { count } = await prisma.resumeFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeFileDeleteManyArgs>(args?: SelectSubset<T, ResumeFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeFiles
     * const resumeFile = await prisma.resumeFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeFileUpdateManyArgs>(args: SelectSubset<T, ResumeFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeFiles and returns the data updated in the database.
     * @param {ResumeFileUpdateManyAndReturnArgs} args - Arguments to update many ResumeFiles.
     * @example
     * // Update many ResumeFiles
     * const resumeFile = await prisma.resumeFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeFiles and only return the `id`
     * const resumeFileWithIdOnly = await prisma.resumeFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeFileUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeFile.
     * @param {ResumeFileUpsertArgs} args - Arguments to update or create a ResumeFile.
     * @example
     * // Update or create a ResumeFile
     * const resumeFile = await prisma.resumeFile.upsert({
     *   create: {
     *     // ... data to create a ResumeFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeFile we want to update
     *   }
     * })
     */
    upsert<T extends ResumeFileUpsertArgs>(args: SelectSubset<T, ResumeFileUpsertArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFileCountArgs} args - Arguments to filter ResumeFiles to count.
     * @example
     * // Count the number of ResumeFiles
     * const count = await prisma.resumeFile.count({
     *   where: {
     *     // ... the filter for the ResumeFiles we want to count
     *   }
     * })
    **/
    count<T extends ResumeFileCountArgs>(
      args?: Subset<T, ResumeFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeFileAggregateArgs>(args: Subset<T, ResumeFileAggregateArgs>): Prisma.PrismaPromise<GetResumeFileAggregateType<T>>

    /**
     * Group by ResumeFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeFileGroupByArgs['orderBy'] }
        : { orderBy?: ResumeFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeFile model
   */
  readonly fields: ResumeFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    optimizationRuns<T extends ResumeFile$optimizationRunsArgs<ExtArgs> = {}>(args?: Subset<T, ResumeFile$optimizationRunsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeFile model
   */
  interface ResumeFileFieldRefs {
    readonly id: FieldRef<"ResumeFile", 'String'>
    readonly userId: FieldRef<"ResumeFile", 'String'>
    readonly fileName: FieldRef<"ResumeFile", 'String'>
    readonly filePath: FieldRef<"ResumeFile", 'String'>
    readonly uploadedAt: FieldRef<"ResumeFile", 'DateTime'>
    readonly originalTextHash: FieldRef<"ResumeFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ResumeFile findUnique
   */
  export type ResumeFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeFile to fetch.
     */
    where: ResumeFileWhereUniqueInput
  }

  /**
   * ResumeFile findUniqueOrThrow
   */
  export type ResumeFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeFile to fetch.
     */
    where: ResumeFileWhereUniqueInput
  }

  /**
   * ResumeFile findFirst
   */
  export type ResumeFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeFile to fetch.
     */
    where?: ResumeFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeFiles to fetch.
     */
    orderBy?: ResumeFileOrderByWithRelationInput | ResumeFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeFiles.
     */
    cursor?: ResumeFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeFiles.
     */
    distinct?: ResumeFileScalarFieldEnum | ResumeFileScalarFieldEnum[]
  }

  /**
   * ResumeFile findFirstOrThrow
   */
  export type ResumeFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeFile to fetch.
     */
    where?: ResumeFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeFiles to fetch.
     */
    orderBy?: ResumeFileOrderByWithRelationInput | ResumeFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeFiles.
     */
    cursor?: ResumeFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeFiles.
     */
    distinct?: ResumeFileScalarFieldEnum | ResumeFileScalarFieldEnum[]
  }

  /**
   * ResumeFile findMany
   */
  export type ResumeFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * Filter, which ResumeFiles to fetch.
     */
    where?: ResumeFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeFiles to fetch.
     */
    orderBy?: ResumeFileOrderByWithRelationInput | ResumeFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeFiles.
     */
    cursor?: ResumeFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeFiles.
     */
    skip?: number
    distinct?: ResumeFileScalarFieldEnum | ResumeFileScalarFieldEnum[]
  }

  /**
   * ResumeFile create
   */
  export type ResumeFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeFile.
     */
    data: XOR<ResumeFileCreateInput, ResumeFileUncheckedCreateInput>
  }

  /**
   * ResumeFile createMany
   */
  export type ResumeFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeFiles.
     */
    data: ResumeFileCreateManyInput | ResumeFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeFile createManyAndReturn
   */
  export type ResumeFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeFiles.
     */
    data: ResumeFileCreateManyInput | ResumeFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeFile update
   */
  export type ResumeFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeFile.
     */
    data: XOR<ResumeFileUpdateInput, ResumeFileUncheckedUpdateInput>
    /**
     * Choose, which ResumeFile to update.
     */
    where: ResumeFileWhereUniqueInput
  }

  /**
   * ResumeFile updateMany
   */
  export type ResumeFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeFiles.
     */
    data: XOR<ResumeFileUpdateManyMutationInput, ResumeFileUncheckedUpdateManyInput>
    /**
     * Filter which ResumeFiles to update
     */
    where?: ResumeFileWhereInput
    /**
     * Limit how many ResumeFiles to update.
     */
    limit?: number
  }

  /**
   * ResumeFile updateManyAndReturn
   */
  export type ResumeFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * The data used to update ResumeFiles.
     */
    data: XOR<ResumeFileUpdateManyMutationInput, ResumeFileUncheckedUpdateManyInput>
    /**
     * Filter which ResumeFiles to update
     */
    where?: ResumeFileWhereInput
    /**
     * Limit how many ResumeFiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeFile upsert
   */
  export type ResumeFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeFile to update in case it exists.
     */
    where: ResumeFileWhereUniqueInput
    /**
     * In case the ResumeFile found by the `where` argument doesn't exist, create a new ResumeFile with this data.
     */
    create: XOR<ResumeFileCreateInput, ResumeFileUncheckedCreateInput>
    /**
     * In case the ResumeFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeFileUpdateInput, ResumeFileUncheckedUpdateInput>
  }

  /**
   * ResumeFile delete
   */
  export type ResumeFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    /**
     * Filter which ResumeFile to delete.
     */
    where: ResumeFileWhereUniqueInput
  }

  /**
   * ResumeFile deleteMany
   */
  export type ResumeFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeFiles to delete
     */
    where?: ResumeFileWhereInput
    /**
     * Limit how many ResumeFiles to delete.
     */
    limit?: number
  }

  /**
   * ResumeFile.optimizationRuns
   */
  export type ResumeFile$optimizationRunsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    where?: OptimizationRunWhereInput
    orderBy?: OptimizationRunOrderByWithRelationInput | OptimizationRunOrderByWithRelationInput[]
    cursor?: OptimizationRunWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OptimizationRunScalarFieldEnum | OptimizationRunScalarFieldEnum[]
  }

  /**
   * ResumeFile without action
   */
  export type ResumeFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
  }


  /**
   * Model OptimizationRun
   */

  export type AggregateOptimizationRun = {
    _count: OptimizationRunCountAggregateOutputType | null
    _avg: OptimizationRunAvgAggregateOutputType | null
    _sum: OptimizationRunSumAggregateOutputType | null
    _min: OptimizationRunMinAggregateOutputType | null
    _max: OptimizationRunMaxAggregateOutputType | null
  }

  export type OptimizationRunAvgAggregateOutputType = {
    tokenCount: number | null
    costUsd: number | null
    optimizedAtsScore: number | null
    originalAtsScore: number | null
  }

  export type OptimizationRunSumAggregateOutputType = {
    tokenCount: number | null
    costUsd: number | null
    optimizedAtsScore: number | null
    originalAtsScore: number | null
  }

  export type OptimizationRunMinAggregateOutputType = {
    id: string | null
    userId: string | null
    resumeFileId: string | null
    jobDescription: string | null
    templateId: string | null
    originalText: string | null
    optimizedText: string | null
    summaryRewrite: string | null
    skillsRewrite: string | null
    targetTitle: string | null
    targetCompany: string | null
    aiModel: string | null
    tokenCount: number | null
    costUsd: number | null
    createdAt: Date | null
    deletedAt: Date | null
    optimizedAtsNotes: string | null
    optimizedAtsScore: number | null
    originalAtsNotes: string | null
    originalAtsScore: number | null
  }

  export type OptimizationRunMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    resumeFileId: string | null
    jobDescription: string | null
    templateId: string | null
    originalText: string | null
    optimizedText: string | null
    summaryRewrite: string | null
    skillsRewrite: string | null
    targetTitle: string | null
    targetCompany: string | null
    aiModel: string | null
    tokenCount: number | null
    costUsd: number | null
    createdAt: Date | null
    deletedAt: Date | null
    optimizedAtsNotes: string | null
    optimizedAtsScore: number | null
    originalAtsNotes: string | null
    originalAtsScore: number | null
  }

  export type OptimizationRunCountAggregateOutputType = {
    id: number
    userId: number
    resumeFileId: number
    jobDescription: number
    templateId: number
    originalText: number
    optimizedText: number
    bulletRewrites: number
    summaryRewrite: number
    skillsRewrite: number
    keywords: number
    requirements: number
    targetTitle: number
    targetCompany: number
    aiModel: number
    tokenCount: number
    costUsd: number
    createdAt: number
    deletedAt: number
    optimizedAtsNotes: number
    optimizedAtsScore: number
    originalAtsNotes: number
    originalAtsScore: number
    _all: number
  }


  export type OptimizationRunAvgAggregateInputType = {
    tokenCount?: true
    costUsd?: true
    optimizedAtsScore?: true
    originalAtsScore?: true
  }

  export type OptimizationRunSumAggregateInputType = {
    tokenCount?: true
    costUsd?: true
    optimizedAtsScore?: true
    originalAtsScore?: true
  }

  export type OptimizationRunMinAggregateInputType = {
    id?: true
    userId?: true
    resumeFileId?: true
    jobDescription?: true
    templateId?: true
    originalText?: true
    optimizedText?: true
    summaryRewrite?: true
    skillsRewrite?: true
    targetTitle?: true
    targetCompany?: true
    aiModel?: true
    tokenCount?: true
    costUsd?: true
    createdAt?: true
    deletedAt?: true
    optimizedAtsNotes?: true
    optimizedAtsScore?: true
    originalAtsNotes?: true
    originalAtsScore?: true
  }

  export type OptimizationRunMaxAggregateInputType = {
    id?: true
    userId?: true
    resumeFileId?: true
    jobDescription?: true
    templateId?: true
    originalText?: true
    optimizedText?: true
    summaryRewrite?: true
    skillsRewrite?: true
    targetTitle?: true
    targetCompany?: true
    aiModel?: true
    tokenCount?: true
    costUsd?: true
    createdAt?: true
    deletedAt?: true
    optimizedAtsNotes?: true
    optimizedAtsScore?: true
    originalAtsNotes?: true
    originalAtsScore?: true
  }

  export type OptimizationRunCountAggregateInputType = {
    id?: true
    userId?: true
    resumeFileId?: true
    jobDescription?: true
    templateId?: true
    originalText?: true
    optimizedText?: true
    bulletRewrites?: true
    summaryRewrite?: true
    skillsRewrite?: true
    keywords?: true
    requirements?: true
    targetTitle?: true
    targetCompany?: true
    aiModel?: true
    tokenCount?: true
    costUsd?: true
    createdAt?: true
    deletedAt?: true
    optimizedAtsNotes?: true
    optimizedAtsScore?: true
    originalAtsNotes?: true
    originalAtsScore?: true
    _all?: true
  }

  export type OptimizationRunAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OptimizationRun to aggregate.
     */
    where?: OptimizationRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptimizationRuns to fetch.
     */
    orderBy?: OptimizationRunOrderByWithRelationInput | OptimizationRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OptimizationRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptimizationRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptimizationRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OptimizationRuns
    **/
    _count?: true | OptimizationRunCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptimizationRunAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptimizationRunSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptimizationRunMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptimizationRunMaxAggregateInputType
  }

  export type GetOptimizationRunAggregateType<T extends OptimizationRunAggregateArgs> = {
        [P in keyof T & keyof AggregateOptimizationRun]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOptimizationRun[P]>
      : GetScalarType<T[P], AggregateOptimizationRun[P]>
  }




  export type OptimizationRunGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OptimizationRunWhereInput
    orderBy?: OptimizationRunOrderByWithAggregationInput | OptimizationRunOrderByWithAggregationInput[]
    by: OptimizationRunScalarFieldEnum[] | OptimizationRunScalarFieldEnum
    having?: OptimizationRunScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptimizationRunCountAggregateInputType | true
    _avg?: OptimizationRunAvgAggregateInputType
    _sum?: OptimizationRunSumAggregateInputType
    _min?: OptimizationRunMinAggregateInputType
    _max?: OptimizationRunMaxAggregateInputType
  }

  export type OptimizationRunGroupByOutputType = {
    id: string
    userId: string
    resumeFileId: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonValue
    requirements: JsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt: Date
    deletedAt: Date | null
    optimizedAtsNotes: string | null
    optimizedAtsScore: number | null
    originalAtsNotes: string | null
    originalAtsScore: number | null
    _count: OptimizationRunCountAggregateOutputType | null
    _avg: OptimizationRunAvgAggregateOutputType | null
    _sum: OptimizationRunSumAggregateOutputType | null
    _min: OptimizationRunMinAggregateOutputType | null
    _max: OptimizationRunMaxAggregateOutputType | null
  }

  type GetOptimizationRunGroupByPayload<T extends OptimizationRunGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OptimizationRunGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OptimizationRunGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OptimizationRunGroupByOutputType[P]>
            : GetScalarType<T[P], OptimizationRunGroupByOutputType[P]>
        }
      >
    >


  export type OptimizationRunSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resumeFileId?: boolean
    jobDescription?: boolean
    templateId?: boolean
    originalText?: boolean
    optimizedText?: boolean
    bulletRewrites?: boolean
    summaryRewrite?: boolean
    skillsRewrite?: boolean
    keywords?: boolean
    requirements?: boolean
    targetTitle?: boolean
    targetCompany?: boolean
    aiModel?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    optimizedAtsNotes?: boolean
    optimizedAtsScore?: boolean
    originalAtsNotes?: boolean
    originalAtsScore?: boolean
    coverLetter?: boolean | OptimizationRun$coverLetterArgs<ExtArgs>
    feedbacks?: boolean | OptimizationRun$feedbacksArgs<ExtArgs>
    resumeFile?: boolean | OptimizationRun$resumeFileArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    usageRecords?: boolean | OptimizationRun$usageRecordsArgs<ExtArgs>
    scorecard?: boolean | OptimizationRun$scorecardArgs<ExtArgs>
    _count?: boolean | OptimizationRunCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["optimizationRun"]>

  export type OptimizationRunSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resumeFileId?: boolean
    jobDescription?: boolean
    templateId?: boolean
    originalText?: boolean
    optimizedText?: boolean
    bulletRewrites?: boolean
    summaryRewrite?: boolean
    skillsRewrite?: boolean
    keywords?: boolean
    requirements?: boolean
    targetTitle?: boolean
    targetCompany?: boolean
    aiModel?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    optimizedAtsNotes?: boolean
    optimizedAtsScore?: boolean
    originalAtsNotes?: boolean
    originalAtsScore?: boolean
    resumeFile?: boolean | OptimizationRun$resumeFileArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["optimizationRun"]>

  export type OptimizationRunSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    resumeFileId?: boolean
    jobDescription?: boolean
    templateId?: boolean
    originalText?: boolean
    optimizedText?: boolean
    bulletRewrites?: boolean
    summaryRewrite?: boolean
    skillsRewrite?: boolean
    keywords?: boolean
    requirements?: boolean
    targetTitle?: boolean
    targetCompany?: boolean
    aiModel?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    optimizedAtsNotes?: boolean
    optimizedAtsScore?: boolean
    originalAtsNotes?: boolean
    originalAtsScore?: boolean
    resumeFile?: boolean | OptimizationRun$resumeFileArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["optimizationRun"]>

  export type OptimizationRunSelectScalar = {
    id?: boolean
    userId?: boolean
    resumeFileId?: boolean
    jobDescription?: boolean
    templateId?: boolean
    originalText?: boolean
    optimizedText?: boolean
    bulletRewrites?: boolean
    summaryRewrite?: boolean
    skillsRewrite?: boolean
    keywords?: boolean
    requirements?: boolean
    targetTitle?: boolean
    targetCompany?: boolean
    aiModel?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    optimizedAtsNotes?: boolean
    optimizedAtsScore?: boolean
    originalAtsNotes?: boolean
    originalAtsScore?: boolean
  }

  export type OptimizationRunOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "resumeFileId" | "jobDescription" | "templateId" | "originalText" | "optimizedText" | "bulletRewrites" | "summaryRewrite" | "skillsRewrite" | "keywords" | "requirements" | "targetTitle" | "targetCompany" | "aiModel" | "tokenCount" | "costUsd" | "createdAt" | "deletedAt" | "optimizedAtsNotes" | "optimizedAtsScore" | "originalAtsNotes" | "originalAtsScore", ExtArgs["result"]["optimizationRun"]>
  export type OptimizationRunInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coverLetter?: boolean | OptimizationRun$coverLetterArgs<ExtArgs>
    feedbacks?: boolean | OptimizationRun$feedbacksArgs<ExtArgs>
    resumeFile?: boolean | OptimizationRun$resumeFileArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    usageRecords?: boolean | OptimizationRun$usageRecordsArgs<ExtArgs>
    scorecard?: boolean | OptimizationRun$scorecardArgs<ExtArgs>
    _count?: boolean | OptimizationRunCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OptimizationRunIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resumeFile?: boolean | OptimizationRun$resumeFileArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OptimizationRunIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resumeFile?: boolean | OptimizationRun$resumeFileArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OptimizationRunPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OptimizationRun"
    objects: {
      coverLetter: Prisma.$CoverLetterPayload<ExtArgs> | null
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      resumeFile: Prisma.$ResumeFilePayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      usageRecords: Prisma.$UsageRecordPayload<ExtArgs>[]
      /**
       * Associated scorecard for this run (one-to-one)
       */
      scorecard: Prisma.$ScorecardPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      resumeFileId: string | null
      jobDescription: string
      templateId: string
      originalText: string
      optimizedText: string
      bulletRewrites: Prisma.JsonValue
      summaryRewrite: string
      skillsRewrite: string
      keywords: Prisma.JsonValue
      requirements: Prisma.JsonValue
      targetTitle: string
      targetCompany: string
      aiModel: string
      tokenCount: number
      costUsd: number
      createdAt: Date
      deletedAt: Date | null
      /**
       * Optional notes or feedback for the optimized resume score
       */
      optimizedAtsNotes: string | null
      /**
       * ATS score for the optimized resume (0–100)
       */
      optimizedAtsScore: number | null
      /**
       * Optional notes or feedback for the original resume score
       */
      originalAtsNotes: string | null
      /**
       * ATS score for the original resume (0–100)
       */
      originalAtsScore: number | null
    }, ExtArgs["result"]["optimizationRun"]>
    composites: {}
  }

  type OptimizationRunGetPayload<S extends boolean | null | undefined | OptimizationRunDefaultArgs> = $Result.GetResult<Prisma.$OptimizationRunPayload, S>

  type OptimizationRunCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OptimizationRunFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OptimizationRunCountAggregateInputType | true
    }

  export interface OptimizationRunDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OptimizationRun'], meta: { name: 'OptimizationRun' } }
    /**
     * Find zero or one OptimizationRun that matches the filter.
     * @param {OptimizationRunFindUniqueArgs} args - Arguments to find a OptimizationRun
     * @example
     * // Get one OptimizationRun
     * const optimizationRun = await prisma.optimizationRun.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OptimizationRunFindUniqueArgs>(args: SelectSubset<T, OptimizationRunFindUniqueArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OptimizationRun that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OptimizationRunFindUniqueOrThrowArgs} args - Arguments to find a OptimizationRun
     * @example
     * // Get one OptimizationRun
     * const optimizationRun = await prisma.optimizationRun.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OptimizationRunFindUniqueOrThrowArgs>(args: SelectSubset<T, OptimizationRunFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OptimizationRun that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptimizationRunFindFirstArgs} args - Arguments to find a OptimizationRun
     * @example
     * // Get one OptimizationRun
     * const optimizationRun = await prisma.optimizationRun.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OptimizationRunFindFirstArgs>(args?: SelectSubset<T, OptimizationRunFindFirstArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OptimizationRun that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptimizationRunFindFirstOrThrowArgs} args - Arguments to find a OptimizationRun
     * @example
     * // Get one OptimizationRun
     * const optimizationRun = await prisma.optimizationRun.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OptimizationRunFindFirstOrThrowArgs>(args?: SelectSubset<T, OptimizationRunFindFirstOrThrowArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OptimizationRuns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptimizationRunFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OptimizationRuns
     * const optimizationRuns = await prisma.optimizationRun.findMany()
     * 
     * // Get first 10 OptimizationRuns
     * const optimizationRuns = await prisma.optimizationRun.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optimizationRunWithIdOnly = await prisma.optimizationRun.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OptimizationRunFindManyArgs>(args?: SelectSubset<T, OptimizationRunFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OptimizationRun.
     * @param {OptimizationRunCreateArgs} args - Arguments to create a OptimizationRun.
     * @example
     * // Create one OptimizationRun
     * const OptimizationRun = await prisma.optimizationRun.create({
     *   data: {
     *     // ... data to create a OptimizationRun
     *   }
     * })
     * 
     */
    create<T extends OptimizationRunCreateArgs>(args: SelectSubset<T, OptimizationRunCreateArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OptimizationRuns.
     * @param {OptimizationRunCreateManyArgs} args - Arguments to create many OptimizationRuns.
     * @example
     * // Create many OptimizationRuns
     * const optimizationRun = await prisma.optimizationRun.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OptimizationRunCreateManyArgs>(args?: SelectSubset<T, OptimizationRunCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OptimizationRuns and returns the data saved in the database.
     * @param {OptimizationRunCreateManyAndReturnArgs} args - Arguments to create many OptimizationRuns.
     * @example
     * // Create many OptimizationRuns
     * const optimizationRun = await prisma.optimizationRun.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OptimizationRuns and only return the `id`
     * const optimizationRunWithIdOnly = await prisma.optimizationRun.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OptimizationRunCreateManyAndReturnArgs>(args?: SelectSubset<T, OptimizationRunCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OptimizationRun.
     * @param {OptimizationRunDeleteArgs} args - Arguments to delete one OptimizationRun.
     * @example
     * // Delete one OptimizationRun
     * const OptimizationRun = await prisma.optimizationRun.delete({
     *   where: {
     *     // ... filter to delete one OptimizationRun
     *   }
     * })
     * 
     */
    delete<T extends OptimizationRunDeleteArgs>(args: SelectSubset<T, OptimizationRunDeleteArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OptimizationRun.
     * @param {OptimizationRunUpdateArgs} args - Arguments to update one OptimizationRun.
     * @example
     * // Update one OptimizationRun
     * const optimizationRun = await prisma.optimizationRun.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OptimizationRunUpdateArgs>(args: SelectSubset<T, OptimizationRunUpdateArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OptimizationRuns.
     * @param {OptimizationRunDeleteManyArgs} args - Arguments to filter OptimizationRuns to delete.
     * @example
     * // Delete a few OptimizationRuns
     * const { count } = await prisma.optimizationRun.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OptimizationRunDeleteManyArgs>(args?: SelectSubset<T, OptimizationRunDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OptimizationRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptimizationRunUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OptimizationRuns
     * const optimizationRun = await prisma.optimizationRun.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OptimizationRunUpdateManyArgs>(args: SelectSubset<T, OptimizationRunUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OptimizationRuns and returns the data updated in the database.
     * @param {OptimizationRunUpdateManyAndReturnArgs} args - Arguments to update many OptimizationRuns.
     * @example
     * // Update many OptimizationRuns
     * const optimizationRun = await prisma.optimizationRun.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OptimizationRuns and only return the `id`
     * const optimizationRunWithIdOnly = await prisma.optimizationRun.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OptimizationRunUpdateManyAndReturnArgs>(args: SelectSubset<T, OptimizationRunUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OptimizationRun.
     * @param {OptimizationRunUpsertArgs} args - Arguments to update or create a OptimizationRun.
     * @example
     * // Update or create a OptimizationRun
     * const optimizationRun = await prisma.optimizationRun.upsert({
     *   create: {
     *     // ... data to create a OptimizationRun
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OptimizationRun we want to update
     *   }
     * })
     */
    upsert<T extends OptimizationRunUpsertArgs>(args: SelectSubset<T, OptimizationRunUpsertArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OptimizationRuns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptimizationRunCountArgs} args - Arguments to filter OptimizationRuns to count.
     * @example
     * // Count the number of OptimizationRuns
     * const count = await prisma.optimizationRun.count({
     *   where: {
     *     // ... the filter for the OptimizationRuns we want to count
     *   }
     * })
    **/
    count<T extends OptimizationRunCountArgs>(
      args?: Subset<T, OptimizationRunCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptimizationRunCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OptimizationRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptimizationRunAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptimizationRunAggregateArgs>(args: Subset<T, OptimizationRunAggregateArgs>): Prisma.PrismaPromise<GetOptimizationRunAggregateType<T>>

    /**
     * Group by OptimizationRun.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptimizationRunGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptimizationRunGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptimizationRunGroupByArgs['orderBy'] }
        : { orderBy?: OptimizationRunGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptimizationRunGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptimizationRunGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OptimizationRun model
   */
  readonly fields: OptimizationRunFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OptimizationRun.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OptimizationRunClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    coverLetter<T extends OptimizationRun$coverLetterArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRun$coverLetterArgs<ExtArgs>>): Prisma__CoverLetterClient<$Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    feedbacks<T extends OptimizationRun$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRun$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    resumeFile<T extends OptimizationRun$resumeFileArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRun$resumeFileArgs<ExtArgs>>): Prisma__ResumeFileClient<$Result.GetResult<Prisma.$ResumeFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usageRecords<T extends OptimizationRun$usageRecordsArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRun$usageRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scorecard<T extends OptimizationRun$scorecardArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRun$scorecardArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OptimizationRun model
   */
  interface OptimizationRunFieldRefs {
    readonly id: FieldRef<"OptimizationRun", 'String'>
    readonly userId: FieldRef<"OptimizationRun", 'String'>
    readonly resumeFileId: FieldRef<"OptimizationRun", 'String'>
    readonly jobDescription: FieldRef<"OptimizationRun", 'String'>
    readonly templateId: FieldRef<"OptimizationRun", 'String'>
    readonly originalText: FieldRef<"OptimizationRun", 'String'>
    readonly optimizedText: FieldRef<"OptimizationRun", 'String'>
    readonly bulletRewrites: FieldRef<"OptimizationRun", 'Json'>
    readonly summaryRewrite: FieldRef<"OptimizationRun", 'String'>
    readonly skillsRewrite: FieldRef<"OptimizationRun", 'String'>
    readonly keywords: FieldRef<"OptimizationRun", 'Json'>
    readonly requirements: FieldRef<"OptimizationRun", 'Json'>
    readonly targetTitle: FieldRef<"OptimizationRun", 'String'>
    readonly targetCompany: FieldRef<"OptimizationRun", 'String'>
    readonly aiModel: FieldRef<"OptimizationRun", 'String'>
    readonly tokenCount: FieldRef<"OptimizationRun", 'Int'>
    readonly costUsd: FieldRef<"OptimizationRun", 'Float'>
    readonly createdAt: FieldRef<"OptimizationRun", 'DateTime'>
    readonly deletedAt: FieldRef<"OptimizationRun", 'DateTime'>
    readonly optimizedAtsNotes: FieldRef<"OptimizationRun", 'String'>
    readonly optimizedAtsScore: FieldRef<"OptimizationRun", 'Float'>
    readonly originalAtsNotes: FieldRef<"OptimizationRun", 'String'>
    readonly originalAtsScore: FieldRef<"OptimizationRun", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * OptimizationRun findUnique
   */
  export type OptimizationRunFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * Filter, which OptimizationRun to fetch.
     */
    where: OptimizationRunWhereUniqueInput
  }

  /**
   * OptimizationRun findUniqueOrThrow
   */
  export type OptimizationRunFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * Filter, which OptimizationRun to fetch.
     */
    where: OptimizationRunWhereUniqueInput
  }

  /**
   * OptimizationRun findFirst
   */
  export type OptimizationRunFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * Filter, which OptimizationRun to fetch.
     */
    where?: OptimizationRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptimizationRuns to fetch.
     */
    orderBy?: OptimizationRunOrderByWithRelationInput | OptimizationRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptimizationRuns.
     */
    cursor?: OptimizationRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptimizationRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptimizationRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptimizationRuns.
     */
    distinct?: OptimizationRunScalarFieldEnum | OptimizationRunScalarFieldEnum[]
  }

  /**
   * OptimizationRun findFirstOrThrow
   */
  export type OptimizationRunFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * Filter, which OptimizationRun to fetch.
     */
    where?: OptimizationRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptimizationRuns to fetch.
     */
    orderBy?: OptimizationRunOrderByWithRelationInput | OptimizationRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OptimizationRuns.
     */
    cursor?: OptimizationRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptimizationRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptimizationRuns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OptimizationRuns.
     */
    distinct?: OptimizationRunScalarFieldEnum | OptimizationRunScalarFieldEnum[]
  }

  /**
   * OptimizationRun findMany
   */
  export type OptimizationRunFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * Filter, which OptimizationRuns to fetch.
     */
    where?: OptimizationRunWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OptimizationRuns to fetch.
     */
    orderBy?: OptimizationRunOrderByWithRelationInput | OptimizationRunOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OptimizationRuns.
     */
    cursor?: OptimizationRunWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OptimizationRuns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OptimizationRuns.
     */
    skip?: number
    distinct?: OptimizationRunScalarFieldEnum | OptimizationRunScalarFieldEnum[]
  }

  /**
   * OptimizationRun create
   */
  export type OptimizationRunCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * The data needed to create a OptimizationRun.
     */
    data: XOR<OptimizationRunCreateInput, OptimizationRunUncheckedCreateInput>
  }

  /**
   * OptimizationRun createMany
   */
  export type OptimizationRunCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OptimizationRuns.
     */
    data: OptimizationRunCreateManyInput | OptimizationRunCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OptimizationRun createManyAndReturn
   */
  export type OptimizationRunCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * The data used to create many OptimizationRuns.
     */
    data: OptimizationRunCreateManyInput | OptimizationRunCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OptimizationRun update
   */
  export type OptimizationRunUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * The data needed to update a OptimizationRun.
     */
    data: XOR<OptimizationRunUpdateInput, OptimizationRunUncheckedUpdateInput>
    /**
     * Choose, which OptimizationRun to update.
     */
    where: OptimizationRunWhereUniqueInput
  }

  /**
   * OptimizationRun updateMany
   */
  export type OptimizationRunUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OptimizationRuns.
     */
    data: XOR<OptimizationRunUpdateManyMutationInput, OptimizationRunUncheckedUpdateManyInput>
    /**
     * Filter which OptimizationRuns to update
     */
    where?: OptimizationRunWhereInput
    /**
     * Limit how many OptimizationRuns to update.
     */
    limit?: number
  }

  /**
   * OptimizationRun updateManyAndReturn
   */
  export type OptimizationRunUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * The data used to update OptimizationRuns.
     */
    data: XOR<OptimizationRunUpdateManyMutationInput, OptimizationRunUncheckedUpdateManyInput>
    /**
     * Filter which OptimizationRuns to update
     */
    where?: OptimizationRunWhereInput
    /**
     * Limit how many OptimizationRuns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * OptimizationRun upsert
   */
  export type OptimizationRunUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * The filter to search for the OptimizationRun to update in case it exists.
     */
    where: OptimizationRunWhereUniqueInput
    /**
     * In case the OptimizationRun found by the `where` argument doesn't exist, create a new OptimizationRun with this data.
     */
    create: XOR<OptimizationRunCreateInput, OptimizationRunUncheckedCreateInput>
    /**
     * In case the OptimizationRun was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OptimizationRunUpdateInput, OptimizationRunUncheckedUpdateInput>
  }

  /**
   * OptimizationRun delete
   */
  export type OptimizationRunDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
    /**
     * Filter which OptimizationRun to delete.
     */
    where: OptimizationRunWhereUniqueInput
  }

  /**
   * OptimizationRun deleteMany
   */
  export type OptimizationRunDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OptimizationRuns to delete
     */
    where?: OptimizationRunWhereInput
    /**
     * Limit how many OptimizationRuns to delete.
     */
    limit?: number
  }

  /**
   * OptimizationRun.coverLetter
   */
  export type OptimizationRun$coverLetterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverLetter
     */
    select?: CoverLetterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoverLetter
     */
    omit?: CoverLetterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoverLetterInclude<ExtArgs> | null
    where?: CoverLetterWhereInput
  }

  /**
   * OptimizationRun.feedbacks
   */
  export type OptimizationRun$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * OptimizationRun.resumeFile
   */
  export type OptimizationRun$resumeFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeFile
     */
    select?: ResumeFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeFile
     */
    omit?: ResumeFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeFileInclude<ExtArgs> | null
    where?: ResumeFileWhereInput
  }

  /**
   * OptimizationRun.usageRecords
   */
  export type OptimizationRun$usageRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    where?: UsageRecordWhereInput
    orderBy?: UsageRecordOrderByWithRelationInput | UsageRecordOrderByWithRelationInput[]
    cursor?: UsageRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageRecordScalarFieldEnum | UsageRecordScalarFieldEnum[]
  }

  /**
   * OptimizationRun.scorecard
   */
  export type OptimizationRun$scorecardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    where?: ScorecardWhereInput
  }

  /**
   * OptimizationRun without action
   */
  export type OptimizationRunDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OptimizationRun
     */
    select?: OptimizationRunSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OptimizationRun
     */
    omit?: OptimizationRunOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OptimizationRunInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    optimizationRunId: string | null
    userId: string | null
    rating: number | null
    comments: string | null
    createdAt: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    optimizationRunId: string | null
    userId: string | null
    rating: number | null
    comments: string | null
    createdAt: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    optimizationRunId: number
    userId: number
    rating: number
    comments: number
    createdAt: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    optimizationRunId?: true
    userId?: true
    rating?: true
    comments?: true
    createdAt?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    optimizationRunId?: true
    userId?: true
    rating?: true
    comments?: true
    createdAt?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    optimizationRunId?: true
    userId?: true
    rating?: true
    comments?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    optimizationRunId: string
    userId: string
    rating: number
    comments: string | null
    createdAt: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optimizationRunId?: boolean
    userId?: boolean
    rating?: boolean
    comments?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optimizationRunId?: boolean
    userId?: boolean
    rating?: boolean
    comments?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optimizationRunId?: boolean
    userId?: boolean
    rating?: boolean
    comments?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    optimizationRunId?: boolean
    userId?: boolean
    rating?: boolean
    comments?: boolean
    createdAt?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "optimizationRunId" | "userId" | "rating" | "comments" | "createdAt", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      optimizationRun: Prisma.$OptimizationRunPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      optimizationRunId: string
      userId: string
      rating: number
      comments: string | null
      createdAt: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    optimizationRun<T extends OptimizationRunDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRunDefaultArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly optimizationRunId: FieldRef<"Feedback", 'String'>
    readonly userId: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly comments: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    planName: string | null
    status: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    planName: string | null
    status: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    userId: number
    planName: number
    status: number
    currentPeriodStart: number
    currentPeriodEnd: number
    createdAt: number
    updatedAt: number
    stripeCustomerId: number
    stripeSubscriptionId: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    userId?: true
    planName?: true
    status?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    userId?: true
    planName?: true
    status?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    userId?: true
    planName?: true
    status?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    userId: string
    planName: string
    status: string
    currentPeriodStart: Date
    currentPeriodEnd: Date
    createdAt: Date
    updatedAt: Date
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planName?: boolean
    status?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    usageRecords?: boolean | Subscription$usageRecordsArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planName?: boolean
    status?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planName?: boolean
    status?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    userId?: boolean
    planName?: boolean
    status?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "planName" | "status" | "currentPeriodStart" | "currentPeriodEnd" | "createdAt" | "updatedAt" | "stripeCustomerId" | "stripeSubscriptionId", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    usageRecords?: boolean | Subscription$usageRecordsArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      usageRecords: Prisma.$UsageRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      planName: string
      status: string
      currentPeriodStart: Date
      currentPeriodEnd: Date
      createdAt: Date
      updatedAt: Date
      stripeCustomerId: string | null
      /**
       * The Stripe subscription ID (unique per subscription)
       */
      stripeSubscriptionId: string | null
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usageRecords<T extends Subscription$usageRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$usageRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly userId: FieldRef<"Subscription", 'String'>
    readonly planName: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'String'>
    readonly currentPeriodStart: FieldRef<"Subscription", 'DateTime'>
    readonly currentPeriodEnd: FieldRef<"Subscription", 'DateTime'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
    readonly stripeCustomerId: FieldRef<"Subscription", 'String'>
    readonly stripeSubscriptionId: FieldRef<"Subscription", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription.usageRecords
   */
  export type Subscription$usageRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    where?: UsageRecordWhereInput
    orderBy?: UsageRecordOrderByWithRelationInput | UsageRecordOrderByWithRelationInput[]
    cursor?: UsageRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageRecordScalarFieldEnum | UsageRecordScalarFieldEnum[]
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model UsageRecord
   */

  export type AggregateUsageRecord = {
    _count: UsageRecordCountAggregateOutputType | null
    _avg: UsageRecordAvgAggregateOutputType | null
    _sum: UsageRecordSumAggregateOutputType | null
    _min: UsageRecordMinAggregateOutputType | null
    _max: UsageRecordMaxAggregateOutputType | null
  }

  export type UsageRecordAvgAggregateOutputType = {
    tokenCount: number | null
    costUsd: number | null
  }

  export type UsageRecordSumAggregateOutputType = {
    tokenCount: number | null
    costUsd: number | null
  }

  export type UsageRecordMinAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    optimizationRunId: string | null
    tokenCount: number | null
    costUsd: number | null
    createdAt: Date | null
  }

  export type UsageRecordMaxAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    optimizationRunId: string | null
    tokenCount: number | null
    costUsd: number | null
    createdAt: Date | null
  }

  export type UsageRecordCountAggregateOutputType = {
    id: number
    subscriptionId: number
    optimizationRunId: number
    tokenCount: number
    costUsd: number
    createdAt: number
    _all: number
  }


  export type UsageRecordAvgAggregateInputType = {
    tokenCount?: true
    costUsd?: true
  }

  export type UsageRecordSumAggregateInputType = {
    tokenCount?: true
    costUsd?: true
  }

  export type UsageRecordMinAggregateInputType = {
    id?: true
    subscriptionId?: true
    optimizationRunId?: true
    tokenCount?: true
    costUsd?: true
    createdAt?: true
  }

  export type UsageRecordMaxAggregateInputType = {
    id?: true
    subscriptionId?: true
    optimizationRunId?: true
    tokenCount?: true
    costUsd?: true
    createdAt?: true
  }

  export type UsageRecordCountAggregateInputType = {
    id?: true
    subscriptionId?: true
    optimizationRunId?: true
    tokenCount?: true
    costUsd?: true
    createdAt?: true
    _all?: true
  }

  export type UsageRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageRecord to aggregate.
     */
    where?: UsageRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageRecords to fetch.
     */
    orderBy?: UsageRecordOrderByWithRelationInput | UsageRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsageRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsageRecords
    **/
    _count?: true | UsageRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsageRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsageRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsageRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsageRecordMaxAggregateInputType
  }

  export type GetUsageRecordAggregateType<T extends UsageRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateUsageRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsageRecord[P]>
      : GetScalarType<T[P], AggregateUsageRecord[P]>
  }




  export type UsageRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageRecordWhereInput
    orderBy?: UsageRecordOrderByWithAggregationInput | UsageRecordOrderByWithAggregationInput[]
    by: UsageRecordScalarFieldEnum[] | UsageRecordScalarFieldEnum
    having?: UsageRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsageRecordCountAggregateInputType | true
    _avg?: UsageRecordAvgAggregateInputType
    _sum?: UsageRecordSumAggregateInputType
    _min?: UsageRecordMinAggregateInputType
    _max?: UsageRecordMaxAggregateInputType
  }

  export type UsageRecordGroupByOutputType = {
    id: string
    subscriptionId: string
    optimizationRunId: string
    tokenCount: number
    costUsd: number
    createdAt: Date
    _count: UsageRecordCountAggregateOutputType | null
    _avg: UsageRecordAvgAggregateOutputType | null
    _sum: UsageRecordSumAggregateOutputType | null
    _min: UsageRecordMinAggregateOutputType | null
    _max: UsageRecordMaxAggregateOutputType | null
  }

  type GetUsageRecordGroupByPayload<T extends UsageRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsageRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsageRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsageRecordGroupByOutputType[P]>
            : GetScalarType<T[P], UsageRecordGroupByOutputType[P]>
        }
      >
    >


  export type UsageRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    optimizationRunId?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageRecord"]>

  export type UsageRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    optimizationRunId?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageRecord"]>

  export type UsageRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    optimizationRunId?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageRecord"]>

  export type UsageRecordSelectScalar = {
    id?: boolean
    subscriptionId?: boolean
    optimizationRunId?: boolean
    tokenCount?: boolean
    costUsd?: boolean
    createdAt?: boolean
  }

  export type UsageRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subscriptionId" | "optimizationRunId" | "tokenCount" | "costUsd" | "createdAt", ExtArgs["result"]["usageRecord"]>
  export type UsageRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }
  export type UsageRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }
  export type UsageRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }

  export type $UsageRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsageRecord"
    objects: {
      optimizationRun: Prisma.$OptimizationRunPayload<ExtArgs>
      subscription: Prisma.$SubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriptionId: string
      optimizationRunId: string
      tokenCount: number
      costUsd: number
      createdAt: Date
    }, ExtArgs["result"]["usageRecord"]>
    composites: {}
  }

  type UsageRecordGetPayload<S extends boolean | null | undefined | UsageRecordDefaultArgs> = $Result.GetResult<Prisma.$UsageRecordPayload, S>

  type UsageRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsageRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsageRecordCountAggregateInputType | true
    }

  export interface UsageRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsageRecord'], meta: { name: 'UsageRecord' } }
    /**
     * Find zero or one UsageRecord that matches the filter.
     * @param {UsageRecordFindUniqueArgs} args - Arguments to find a UsageRecord
     * @example
     * // Get one UsageRecord
     * const usageRecord = await prisma.usageRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsageRecordFindUniqueArgs>(args: SelectSubset<T, UsageRecordFindUniqueArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UsageRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsageRecordFindUniqueOrThrowArgs} args - Arguments to find a UsageRecord
     * @example
     * // Get one UsageRecord
     * const usageRecord = await prisma.usageRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsageRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, UsageRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageRecordFindFirstArgs} args - Arguments to find a UsageRecord
     * @example
     * // Get one UsageRecord
     * const usageRecord = await prisma.usageRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsageRecordFindFirstArgs>(args?: SelectSubset<T, UsageRecordFindFirstArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageRecordFindFirstOrThrowArgs} args - Arguments to find a UsageRecord
     * @example
     * // Get one UsageRecord
     * const usageRecord = await prisma.usageRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsageRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, UsageRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UsageRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsageRecords
     * const usageRecords = await prisma.usageRecord.findMany()
     * 
     * // Get first 10 UsageRecords
     * const usageRecords = await prisma.usageRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usageRecordWithIdOnly = await prisma.usageRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsageRecordFindManyArgs>(args?: SelectSubset<T, UsageRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UsageRecord.
     * @param {UsageRecordCreateArgs} args - Arguments to create a UsageRecord.
     * @example
     * // Create one UsageRecord
     * const UsageRecord = await prisma.usageRecord.create({
     *   data: {
     *     // ... data to create a UsageRecord
     *   }
     * })
     * 
     */
    create<T extends UsageRecordCreateArgs>(args: SelectSubset<T, UsageRecordCreateArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UsageRecords.
     * @param {UsageRecordCreateManyArgs} args - Arguments to create many UsageRecords.
     * @example
     * // Create many UsageRecords
     * const usageRecord = await prisma.usageRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsageRecordCreateManyArgs>(args?: SelectSubset<T, UsageRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsageRecords and returns the data saved in the database.
     * @param {UsageRecordCreateManyAndReturnArgs} args - Arguments to create many UsageRecords.
     * @example
     * // Create many UsageRecords
     * const usageRecord = await prisma.usageRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsageRecords and only return the `id`
     * const usageRecordWithIdOnly = await prisma.usageRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsageRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, UsageRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UsageRecord.
     * @param {UsageRecordDeleteArgs} args - Arguments to delete one UsageRecord.
     * @example
     * // Delete one UsageRecord
     * const UsageRecord = await prisma.usageRecord.delete({
     *   where: {
     *     // ... filter to delete one UsageRecord
     *   }
     * })
     * 
     */
    delete<T extends UsageRecordDeleteArgs>(args: SelectSubset<T, UsageRecordDeleteArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UsageRecord.
     * @param {UsageRecordUpdateArgs} args - Arguments to update one UsageRecord.
     * @example
     * // Update one UsageRecord
     * const usageRecord = await prisma.usageRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsageRecordUpdateArgs>(args: SelectSubset<T, UsageRecordUpdateArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UsageRecords.
     * @param {UsageRecordDeleteManyArgs} args - Arguments to filter UsageRecords to delete.
     * @example
     * // Delete a few UsageRecords
     * const { count } = await prisma.usageRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsageRecordDeleteManyArgs>(args?: SelectSubset<T, UsageRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsageRecords
     * const usageRecord = await prisma.usageRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsageRecordUpdateManyArgs>(args: SelectSubset<T, UsageRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageRecords and returns the data updated in the database.
     * @param {UsageRecordUpdateManyAndReturnArgs} args - Arguments to update many UsageRecords.
     * @example
     * // Update many UsageRecords
     * const usageRecord = await prisma.usageRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UsageRecords and only return the `id`
     * const usageRecordWithIdOnly = await prisma.usageRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsageRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, UsageRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UsageRecord.
     * @param {UsageRecordUpsertArgs} args - Arguments to update or create a UsageRecord.
     * @example
     * // Update or create a UsageRecord
     * const usageRecord = await prisma.usageRecord.upsert({
     *   create: {
     *     // ... data to create a UsageRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsageRecord we want to update
     *   }
     * })
     */
    upsert<T extends UsageRecordUpsertArgs>(args: SelectSubset<T, UsageRecordUpsertArgs<ExtArgs>>): Prisma__UsageRecordClient<$Result.GetResult<Prisma.$UsageRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UsageRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageRecordCountArgs} args - Arguments to filter UsageRecords to count.
     * @example
     * // Count the number of UsageRecords
     * const count = await prisma.usageRecord.count({
     *   where: {
     *     // ... the filter for the UsageRecords we want to count
     *   }
     * })
    **/
    count<T extends UsageRecordCountArgs>(
      args?: Subset<T, UsageRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsageRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsageRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsageRecordAggregateArgs>(args: Subset<T, UsageRecordAggregateArgs>): Prisma.PrismaPromise<GetUsageRecordAggregateType<T>>

    /**
     * Group by UsageRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsageRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsageRecordGroupByArgs['orderBy'] }
        : { orderBy?: UsageRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsageRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsageRecord model
   */
  readonly fields: UsageRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsageRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsageRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    optimizationRun<T extends OptimizationRunDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRunDefaultArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subscription<T extends SubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionDefaultArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsageRecord model
   */
  interface UsageRecordFieldRefs {
    readonly id: FieldRef<"UsageRecord", 'String'>
    readonly subscriptionId: FieldRef<"UsageRecord", 'String'>
    readonly optimizationRunId: FieldRef<"UsageRecord", 'String'>
    readonly tokenCount: FieldRef<"UsageRecord", 'Int'>
    readonly costUsd: FieldRef<"UsageRecord", 'Float'>
    readonly createdAt: FieldRef<"UsageRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsageRecord findUnique
   */
  export type UsageRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * Filter, which UsageRecord to fetch.
     */
    where: UsageRecordWhereUniqueInput
  }

  /**
   * UsageRecord findUniqueOrThrow
   */
  export type UsageRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * Filter, which UsageRecord to fetch.
     */
    where: UsageRecordWhereUniqueInput
  }

  /**
   * UsageRecord findFirst
   */
  export type UsageRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * Filter, which UsageRecord to fetch.
     */
    where?: UsageRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageRecords to fetch.
     */
    orderBy?: UsageRecordOrderByWithRelationInput | UsageRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageRecords.
     */
    cursor?: UsageRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageRecords.
     */
    distinct?: UsageRecordScalarFieldEnum | UsageRecordScalarFieldEnum[]
  }

  /**
   * UsageRecord findFirstOrThrow
   */
  export type UsageRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * Filter, which UsageRecord to fetch.
     */
    where?: UsageRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageRecords to fetch.
     */
    orderBy?: UsageRecordOrderByWithRelationInput | UsageRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageRecords.
     */
    cursor?: UsageRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageRecords.
     */
    distinct?: UsageRecordScalarFieldEnum | UsageRecordScalarFieldEnum[]
  }

  /**
   * UsageRecord findMany
   */
  export type UsageRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * Filter, which UsageRecords to fetch.
     */
    where?: UsageRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageRecords to fetch.
     */
    orderBy?: UsageRecordOrderByWithRelationInput | UsageRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsageRecords.
     */
    cursor?: UsageRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageRecords.
     */
    skip?: number
    distinct?: UsageRecordScalarFieldEnum | UsageRecordScalarFieldEnum[]
  }

  /**
   * UsageRecord create
   */
  export type UsageRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a UsageRecord.
     */
    data: XOR<UsageRecordCreateInput, UsageRecordUncheckedCreateInput>
  }

  /**
   * UsageRecord createMany
   */
  export type UsageRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsageRecords.
     */
    data: UsageRecordCreateManyInput | UsageRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsageRecord createManyAndReturn
   */
  export type UsageRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * The data used to create many UsageRecords.
     */
    data: UsageRecordCreateManyInput | UsageRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageRecord update
   */
  export type UsageRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a UsageRecord.
     */
    data: XOR<UsageRecordUpdateInput, UsageRecordUncheckedUpdateInput>
    /**
     * Choose, which UsageRecord to update.
     */
    where: UsageRecordWhereUniqueInput
  }

  /**
   * UsageRecord updateMany
   */
  export type UsageRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsageRecords.
     */
    data: XOR<UsageRecordUpdateManyMutationInput, UsageRecordUncheckedUpdateManyInput>
    /**
     * Filter which UsageRecords to update
     */
    where?: UsageRecordWhereInput
    /**
     * Limit how many UsageRecords to update.
     */
    limit?: number
  }

  /**
   * UsageRecord updateManyAndReturn
   */
  export type UsageRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * The data used to update UsageRecords.
     */
    data: XOR<UsageRecordUpdateManyMutationInput, UsageRecordUncheckedUpdateManyInput>
    /**
     * Filter which UsageRecords to update
     */
    where?: UsageRecordWhereInput
    /**
     * Limit how many UsageRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageRecord upsert
   */
  export type UsageRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the UsageRecord to update in case it exists.
     */
    where: UsageRecordWhereUniqueInput
    /**
     * In case the UsageRecord found by the `where` argument doesn't exist, create a new UsageRecord with this data.
     */
    create: XOR<UsageRecordCreateInput, UsageRecordUncheckedCreateInput>
    /**
     * In case the UsageRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsageRecordUpdateInput, UsageRecordUncheckedUpdateInput>
  }

  /**
   * UsageRecord delete
   */
  export type UsageRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
    /**
     * Filter which UsageRecord to delete.
     */
    where: UsageRecordWhereUniqueInput
  }

  /**
   * UsageRecord deleteMany
   */
  export type UsageRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageRecords to delete
     */
    where?: UsageRecordWhereInput
    /**
     * Limit how many UsageRecords to delete.
     */
    limit?: number
  }

  /**
   * UsageRecord without action
   */
  export type UsageRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageRecord
     */
    select?: UsageRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageRecord
     */
    omit?: UsageRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageRecordInclude<ExtArgs> | null
  }


  /**
   * Model UsageEvent
   */

  export type AggregateUsageEvent = {
    _count: UsageEventCountAggregateOutputType | null
    _min: UsageEventMinAggregateOutputType | null
    _max: UsageEventMaxAggregateOutputType | null
  }

  export type UsageEventMinAggregateOutputType = {
    id: string | null
    userId: string | null
    eventType: string | null
    createdAt: Date | null
  }

  export type UsageEventMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    eventType: string | null
    createdAt: Date | null
  }

  export type UsageEventCountAggregateOutputType = {
    id: number
    userId: number
    eventType: number
    meta: number
    createdAt: number
    _all: number
  }


  export type UsageEventMinAggregateInputType = {
    id?: true
    userId?: true
    eventType?: true
    createdAt?: true
  }

  export type UsageEventMaxAggregateInputType = {
    id?: true
    userId?: true
    eventType?: true
    createdAt?: true
  }

  export type UsageEventCountAggregateInputType = {
    id?: true
    userId?: true
    eventType?: true
    meta?: true
    createdAt?: true
    _all?: true
  }

  export type UsageEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageEvent to aggregate.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsageEvents
    **/
    _count?: true | UsageEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsageEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsageEventMaxAggregateInputType
  }

  export type GetUsageEventAggregateType<T extends UsageEventAggregateArgs> = {
        [P in keyof T & keyof AggregateUsageEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsageEvent[P]>
      : GetScalarType<T[P], AggregateUsageEvent[P]>
  }




  export type UsageEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageEventWhereInput
    orderBy?: UsageEventOrderByWithAggregationInput | UsageEventOrderByWithAggregationInput[]
    by: UsageEventScalarFieldEnum[] | UsageEventScalarFieldEnum
    having?: UsageEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsageEventCountAggregateInputType | true
    _min?: UsageEventMinAggregateInputType
    _max?: UsageEventMaxAggregateInputType
  }

  export type UsageEventGroupByOutputType = {
    id: string
    userId: string
    eventType: string
    meta: JsonValue
    createdAt: Date
    _count: UsageEventCountAggregateOutputType | null
    _min: UsageEventMinAggregateOutputType | null
    _max: UsageEventMaxAggregateOutputType | null
  }

  type GetUsageEventGroupByPayload<T extends UsageEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsageEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsageEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsageEventGroupByOutputType[P]>
            : GetScalarType<T[P], UsageEventGroupByOutputType[P]>
        }
      >
    >


  export type UsageEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventType?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageEvent"]>

  export type UsageEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventType?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageEvent"]>

  export type UsageEventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    eventType?: boolean
    meta?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageEvent"]>

  export type UsageEventSelectScalar = {
    id?: boolean
    userId?: boolean
    eventType?: boolean
    meta?: boolean
    createdAt?: boolean
  }

  export type UsageEventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "eventType" | "meta" | "createdAt", ExtArgs["result"]["usageEvent"]>
  export type UsageEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UsageEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UsageEventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UsageEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsageEvent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      eventType: string
      meta: Prisma.JsonValue
      createdAt: Date
    }, ExtArgs["result"]["usageEvent"]>
    composites: {}
  }

  type UsageEventGetPayload<S extends boolean | null | undefined | UsageEventDefaultArgs> = $Result.GetResult<Prisma.$UsageEventPayload, S>

  type UsageEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsageEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsageEventCountAggregateInputType | true
    }

  export interface UsageEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsageEvent'], meta: { name: 'UsageEvent' } }
    /**
     * Find zero or one UsageEvent that matches the filter.
     * @param {UsageEventFindUniqueArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsageEventFindUniqueArgs>(args: SelectSubset<T, UsageEventFindUniqueArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UsageEvent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsageEventFindUniqueOrThrowArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsageEventFindUniqueOrThrowArgs>(args: SelectSubset<T, UsageEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventFindFirstArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsageEventFindFirstArgs>(args?: SelectSubset<T, UsageEventFindFirstArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventFindFirstOrThrowArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsageEventFindFirstOrThrowArgs>(args?: SelectSubset<T, UsageEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UsageEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsageEvents
     * const usageEvents = await prisma.usageEvent.findMany()
     * 
     * // Get first 10 UsageEvents
     * const usageEvents = await prisma.usageEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usageEventWithIdOnly = await prisma.usageEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsageEventFindManyArgs>(args?: SelectSubset<T, UsageEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UsageEvent.
     * @param {UsageEventCreateArgs} args - Arguments to create a UsageEvent.
     * @example
     * // Create one UsageEvent
     * const UsageEvent = await prisma.usageEvent.create({
     *   data: {
     *     // ... data to create a UsageEvent
     *   }
     * })
     * 
     */
    create<T extends UsageEventCreateArgs>(args: SelectSubset<T, UsageEventCreateArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UsageEvents.
     * @param {UsageEventCreateManyArgs} args - Arguments to create many UsageEvents.
     * @example
     * // Create many UsageEvents
     * const usageEvent = await prisma.usageEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsageEventCreateManyArgs>(args?: SelectSubset<T, UsageEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsageEvents and returns the data saved in the database.
     * @param {UsageEventCreateManyAndReturnArgs} args - Arguments to create many UsageEvents.
     * @example
     * // Create many UsageEvents
     * const usageEvent = await prisma.usageEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsageEvents and only return the `id`
     * const usageEventWithIdOnly = await prisma.usageEvent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsageEventCreateManyAndReturnArgs>(args?: SelectSubset<T, UsageEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UsageEvent.
     * @param {UsageEventDeleteArgs} args - Arguments to delete one UsageEvent.
     * @example
     * // Delete one UsageEvent
     * const UsageEvent = await prisma.usageEvent.delete({
     *   where: {
     *     // ... filter to delete one UsageEvent
     *   }
     * })
     * 
     */
    delete<T extends UsageEventDeleteArgs>(args: SelectSubset<T, UsageEventDeleteArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UsageEvent.
     * @param {UsageEventUpdateArgs} args - Arguments to update one UsageEvent.
     * @example
     * // Update one UsageEvent
     * const usageEvent = await prisma.usageEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsageEventUpdateArgs>(args: SelectSubset<T, UsageEventUpdateArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UsageEvents.
     * @param {UsageEventDeleteManyArgs} args - Arguments to filter UsageEvents to delete.
     * @example
     * // Delete a few UsageEvents
     * const { count } = await prisma.usageEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsageEventDeleteManyArgs>(args?: SelectSubset<T, UsageEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsageEvents
     * const usageEvent = await prisma.usageEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsageEventUpdateManyArgs>(args: SelectSubset<T, UsageEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageEvents and returns the data updated in the database.
     * @param {UsageEventUpdateManyAndReturnArgs} args - Arguments to update many UsageEvents.
     * @example
     * // Update many UsageEvents
     * const usageEvent = await prisma.usageEvent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UsageEvents and only return the `id`
     * const usageEventWithIdOnly = await prisma.usageEvent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsageEventUpdateManyAndReturnArgs>(args: SelectSubset<T, UsageEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UsageEvent.
     * @param {UsageEventUpsertArgs} args - Arguments to update or create a UsageEvent.
     * @example
     * // Update or create a UsageEvent
     * const usageEvent = await prisma.usageEvent.upsert({
     *   create: {
     *     // ... data to create a UsageEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsageEvent we want to update
     *   }
     * })
     */
    upsert<T extends UsageEventUpsertArgs>(args: SelectSubset<T, UsageEventUpsertArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UsageEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventCountArgs} args - Arguments to filter UsageEvents to count.
     * @example
     * // Count the number of UsageEvents
     * const count = await prisma.usageEvent.count({
     *   where: {
     *     // ... the filter for the UsageEvents we want to count
     *   }
     * })
    **/
    count<T extends UsageEventCountArgs>(
      args?: Subset<T, UsageEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsageEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsageEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsageEventAggregateArgs>(args: Subset<T, UsageEventAggregateArgs>): Prisma.PrismaPromise<GetUsageEventAggregateType<T>>

    /**
     * Group by UsageEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsageEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsageEventGroupByArgs['orderBy'] }
        : { orderBy?: UsageEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsageEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsageEvent model
   */
  readonly fields: UsageEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsageEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsageEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsageEvent model
   */
  interface UsageEventFieldRefs {
    readonly id: FieldRef<"UsageEvent", 'String'>
    readonly userId: FieldRef<"UsageEvent", 'String'>
    readonly eventType: FieldRef<"UsageEvent", 'String'>
    readonly meta: FieldRef<"UsageEvent", 'Json'>
    readonly createdAt: FieldRef<"UsageEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsageEvent findUnique
   */
  export type UsageEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent findUniqueOrThrow
   */
  export type UsageEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent findFirst
   */
  export type UsageEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageEvents.
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageEvents.
     */
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * UsageEvent findFirstOrThrow
   */
  export type UsageEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageEvents.
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageEvents.
     */
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * UsageEvent findMany
   */
  export type UsageEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvents to fetch.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsageEvents.
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * UsageEvent create
   */
  export type UsageEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * The data needed to create a UsageEvent.
     */
    data: XOR<UsageEventCreateInput, UsageEventUncheckedCreateInput>
  }

  /**
   * UsageEvent createMany
   */
  export type UsageEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsageEvents.
     */
    data: UsageEventCreateManyInput | UsageEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsageEvent createManyAndReturn
   */
  export type UsageEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * The data used to create many UsageEvents.
     */
    data: UsageEventCreateManyInput | UsageEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageEvent update
   */
  export type UsageEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * The data needed to update a UsageEvent.
     */
    data: XOR<UsageEventUpdateInput, UsageEventUncheckedUpdateInput>
    /**
     * Choose, which UsageEvent to update.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent updateMany
   */
  export type UsageEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsageEvents.
     */
    data: XOR<UsageEventUpdateManyMutationInput, UsageEventUncheckedUpdateManyInput>
    /**
     * Filter which UsageEvents to update
     */
    where?: UsageEventWhereInput
    /**
     * Limit how many UsageEvents to update.
     */
    limit?: number
  }

  /**
   * UsageEvent updateManyAndReturn
   */
  export type UsageEventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * The data used to update UsageEvents.
     */
    data: XOR<UsageEventUpdateManyMutationInput, UsageEventUncheckedUpdateManyInput>
    /**
     * Filter which UsageEvents to update
     */
    where?: UsageEventWhereInput
    /**
     * Limit how many UsageEvents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageEvent upsert
   */
  export type UsageEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * The filter to search for the UsageEvent to update in case it exists.
     */
    where: UsageEventWhereUniqueInput
    /**
     * In case the UsageEvent found by the `where` argument doesn't exist, create a new UsageEvent with this data.
     */
    create: XOR<UsageEventCreateInput, UsageEventUncheckedCreateInput>
    /**
     * In case the UsageEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsageEventUpdateInput, UsageEventUncheckedUpdateInput>
  }

  /**
   * UsageEvent delete
   */
  export type UsageEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter which UsageEvent to delete.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent deleteMany
   */
  export type UsageEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageEvents to delete
     */
    where?: UsageEventWhereInput
    /**
     * Limit how many UsageEvents to delete.
     */
    limit?: number
  }

  /**
   * UsageEvent without action
   */
  export type UsageEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageEvent
     */
    omit?: UsageEventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
  }


  /**
   * Model Scorecard
   */

  export type AggregateScorecard = {
    _count: ScorecardCountAggregateOutputType | null
    _avg: ScorecardAvgAggregateOutputType | null
    _sum: ScorecardSumAggregateOutputType | null
    _min: ScorecardMinAggregateOutputType | null
    _max: ScorecardMaxAggregateOutputType | null
  }

  export type ScorecardAvgAggregateOutputType = {
    overallScore: number | null
  }

  export type ScorecardSumAggregateOutputType = {
    overallScore: number | null
  }

  export type ScorecardMinAggregateOutputType = {
    id: string | null
    optimizationRunId: string | null
    overallScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScorecardMaxAggregateOutputType = {
    id: string | null
    optimizationRunId: string | null
    overallScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScorecardCountAggregateOutputType = {
    id: number
    optimizationRunId: number
    overallScore: number
    metrics: number
    takeaways: number
    redFlags: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScorecardAvgAggregateInputType = {
    overallScore?: true
  }

  export type ScorecardSumAggregateInputType = {
    overallScore?: true
  }

  export type ScorecardMinAggregateInputType = {
    id?: true
    optimizationRunId?: true
    overallScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScorecardMaxAggregateInputType = {
    id?: true
    optimizationRunId?: true
    overallScore?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScorecardCountAggregateInputType = {
    id?: true
    optimizationRunId?: true
    overallScore?: true
    metrics?: true
    takeaways?: true
    redFlags?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScorecardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scorecard to aggregate.
     */
    where?: ScorecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scorecards to fetch.
     */
    orderBy?: ScorecardOrderByWithRelationInput | ScorecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScorecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scorecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scorecards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Scorecards
    **/
    _count?: true | ScorecardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScorecardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScorecardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScorecardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScorecardMaxAggregateInputType
  }

  export type GetScorecardAggregateType<T extends ScorecardAggregateArgs> = {
        [P in keyof T & keyof AggregateScorecard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScorecard[P]>
      : GetScalarType<T[P], AggregateScorecard[P]>
  }




  export type ScorecardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScorecardWhereInput
    orderBy?: ScorecardOrderByWithAggregationInput | ScorecardOrderByWithAggregationInput[]
    by: ScorecardScalarFieldEnum[] | ScorecardScalarFieldEnum
    having?: ScorecardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScorecardCountAggregateInputType | true
    _avg?: ScorecardAvgAggregateInputType
    _sum?: ScorecardSumAggregateInputType
    _min?: ScorecardMinAggregateInputType
    _max?: ScorecardMaxAggregateInputType
  }

  export type ScorecardGroupByOutputType = {
    id: string
    optimizationRunId: string
    overallScore: number
    metrics: JsonValue
    takeaways: JsonValue | null
    redFlags: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ScorecardCountAggregateOutputType | null
    _avg: ScorecardAvgAggregateOutputType | null
    _sum: ScorecardSumAggregateOutputType | null
    _min: ScorecardMinAggregateOutputType | null
    _max: ScorecardMaxAggregateOutputType | null
  }

  type GetScorecardGroupByPayload<T extends ScorecardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScorecardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScorecardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScorecardGroupByOutputType[P]>
            : GetScalarType<T[P], ScorecardGroupByOutputType[P]>
        }
      >
    >


  export type ScorecardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optimizationRunId?: boolean
    overallScore?: boolean
    metrics?: boolean
    takeaways?: boolean
    redFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scorecard"]>

  export type ScorecardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optimizationRunId?: boolean
    overallScore?: boolean
    metrics?: boolean
    takeaways?: boolean
    redFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scorecard"]>

  export type ScorecardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    optimizationRunId?: boolean
    overallScore?: boolean
    metrics?: boolean
    takeaways?: boolean
    redFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scorecard"]>

  export type ScorecardSelectScalar = {
    id?: boolean
    optimizationRunId?: boolean
    overallScore?: boolean
    metrics?: boolean
    takeaways?: boolean
    redFlags?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScorecardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "optimizationRunId" | "overallScore" | "metrics" | "takeaways" | "redFlags" | "createdAt" | "updatedAt", ExtArgs["result"]["scorecard"]>
  export type ScorecardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
  }
  export type ScorecardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
  }
  export type ScorecardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    optimizationRun?: boolean | OptimizationRunDefaultArgs<ExtArgs>
  }

  export type $ScorecardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Scorecard"
    objects: {
      /**
       * Relation to the associated optimization run
       */
      optimizationRun: Prisma.$OptimizationRunPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      /**
       * Unique identifier for this scorecard
       */
      id: string
      /**
       * Reference to the optimization run
       */
      optimizationRunId: string
      /**
       * Overall score (0–100)
       */
      overallScore: number
      /**
       * Detailed metrics per dimension (JSON array)
       */
      metrics: Prisma.JsonValue
      /**
       * LLM-generated key takeaways for this scorecard
       */
      takeaways: Prisma.JsonValue | null
      /**
       * Discrete red-flag warning messages
       */
      redFlags: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scorecard"]>
    composites: {}
  }

  type ScorecardGetPayload<S extends boolean | null | undefined | ScorecardDefaultArgs> = $Result.GetResult<Prisma.$ScorecardPayload, S>

  type ScorecardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScorecardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScorecardCountAggregateInputType | true
    }

  export interface ScorecardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Scorecard'], meta: { name: 'Scorecard' } }
    /**
     * Find zero or one Scorecard that matches the filter.
     * @param {ScorecardFindUniqueArgs} args - Arguments to find a Scorecard
     * @example
     * // Get one Scorecard
     * const scorecard = await prisma.scorecard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScorecardFindUniqueArgs>(args: SelectSubset<T, ScorecardFindUniqueArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Scorecard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScorecardFindUniqueOrThrowArgs} args - Arguments to find a Scorecard
     * @example
     * // Get one Scorecard
     * const scorecard = await prisma.scorecard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScorecardFindUniqueOrThrowArgs>(args: SelectSubset<T, ScorecardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Scorecard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorecardFindFirstArgs} args - Arguments to find a Scorecard
     * @example
     * // Get one Scorecard
     * const scorecard = await prisma.scorecard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScorecardFindFirstArgs>(args?: SelectSubset<T, ScorecardFindFirstArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Scorecard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorecardFindFirstOrThrowArgs} args - Arguments to find a Scorecard
     * @example
     * // Get one Scorecard
     * const scorecard = await prisma.scorecard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScorecardFindFirstOrThrowArgs>(args?: SelectSubset<T, ScorecardFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Scorecards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorecardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Scorecards
     * const scorecards = await prisma.scorecard.findMany()
     * 
     * // Get first 10 Scorecards
     * const scorecards = await prisma.scorecard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scorecardWithIdOnly = await prisma.scorecard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScorecardFindManyArgs>(args?: SelectSubset<T, ScorecardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Scorecard.
     * @param {ScorecardCreateArgs} args - Arguments to create a Scorecard.
     * @example
     * // Create one Scorecard
     * const Scorecard = await prisma.scorecard.create({
     *   data: {
     *     // ... data to create a Scorecard
     *   }
     * })
     * 
     */
    create<T extends ScorecardCreateArgs>(args: SelectSubset<T, ScorecardCreateArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Scorecards.
     * @param {ScorecardCreateManyArgs} args - Arguments to create many Scorecards.
     * @example
     * // Create many Scorecards
     * const scorecard = await prisma.scorecard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScorecardCreateManyArgs>(args?: SelectSubset<T, ScorecardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Scorecards and returns the data saved in the database.
     * @param {ScorecardCreateManyAndReturnArgs} args - Arguments to create many Scorecards.
     * @example
     * // Create many Scorecards
     * const scorecard = await prisma.scorecard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Scorecards and only return the `id`
     * const scorecardWithIdOnly = await prisma.scorecard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScorecardCreateManyAndReturnArgs>(args?: SelectSubset<T, ScorecardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Scorecard.
     * @param {ScorecardDeleteArgs} args - Arguments to delete one Scorecard.
     * @example
     * // Delete one Scorecard
     * const Scorecard = await prisma.scorecard.delete({
     *   where: {
     *     // ... filter to delete one Scorecard
     *   }
     * })
     * 
     */
    delete<T extends ScorecardDeleteArgs>(args: SelectSubset<T, ScorecardDeleteArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Scorecard.
     * @param {ScorecardUpdateArgs} args - Arguments to update one Scorecard.
     * @example
     * // Update one Scorecard
     * const scorecard = await prisma.scorecard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScorecardUpdateArgs>(args: SelectSubset<T, ScorecardUpdateArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Scorecards.
     * @param {ScorecardDeleteManyArgs} args - Arguments to filter Scorecards to delete.
     * @example
     * // Delete a few Scorecards
     * const { count } = await prisma.scorecard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScorecardDeleteManyArgs>(args?: SelectSubset<T, ScorecardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scorecards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorecardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Scorecards
     * const scorecard = await prisma.scorecard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScorecardUpdateManyArgs>(args: SelectSubset<T, ScorecardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Scorecards and returns the data updated in the database.
     * @param {ScorecardUpdateManyAndReturnArgs} args - Arguments to update many Scorecards.
     * @example
     * // Update many Scorecards
     * const scorecard = await prisma.scorecard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Scorecards and only return the `id`
     * const scorecardWithIdOnly = await prisma.scorecard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScorecardUpdateManyAndReturnArgs>(args: SelectSubset<T, ScorecardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Scorecard.
     * @param {ScorecardUpsertArgs} args - Arguments to update or create a Scorecard.
     * @example
     * // Update or create a Scorecard
     * const scorecard = await prisma.scorecard.upsert({
     *   create: {
     *     // ... data to create a Scorecard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Scorecard we want to update
     *   }
     * })
     */
    upsert<T extends ScorecardUpsertArgs>(args: SelectSubset<T, ScorecardUpsertArgs<ExtArgs>>): Prisma__ScorecardClient<$Result.GetResult<Prisma.$ScorecardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Scorecards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorecardCountArgs} args - Arguments to filter Scorecards to count.
     * @example
     * // Count the number of Scorecards
     * const count = await prisma.scorecard.count({
     *   where: {
     *     // ... the filter for the Scorecards we want to count
     *   }
     * })
    **/
    count<T extends ScorecardCountArgs>(
      args?: Subset<T, ScorecardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScorecardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Scorecard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorecardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScorecardAggregateArgs>(args: Subset<T, ScorecardAggregateArgs>): Prisma.PrismaPromise<GetScorecardAggregateType<T>>

    /**
     * Group by Scorecard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorecardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScorecardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScorecardGroupByArgs['orderBy'] }
        : { orderBy?: ScorecardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScorecardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScorecardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Scorecard model
   */
  readonly fields: ScorecardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Scorecard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScorecardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    optimizationRun<T extends OptimizationRunDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OptimizationRunDefaultArgs<ExtArgs>>): Prisma__OptimizationRunClient<$Result.GetResult<Prisma.$OptimizationRunPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Scorecard model
   */
  interface ScorecardFieldRefs {
    readonly id: FieldRef<"Scorecard", 'String'>
    readonly optimizationRunId: FieldRef<"Scorecard", 'String'>
    readonly overallScore: FieldRef<"Scorecard", 'Int'>
    readonly metrics: FieldRef<"Scorecard", 'Json'>
    readonly takeaways: FieldRef<"Scorecard", 'Json'>
    readonly redFlags: FieldRef<"Scorecard", 'Json'>
    readonly createdAt: FieldRef<"Scorecard", 'DateTime'>
    readonly updatedAt: FieldRef<"Scorecard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Scorecard findUnique
   */
  export type ScorecardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * Filter, which Scorecard to fetch.
     */
    where: ScorecardWhereUniqueInput
  }

  /**
   * Scorecard findUniqueOrThrow
   */
  export type ScorecardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * Filter, which Scorecard to fetch.
     */
    where: ScorecardWhereUniqueInput
  }

  /**
   * Scorecard findFirst
   */
  export type ScorecardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * Filter, which Scorecard to fetch.
     */
    where?: ScorecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scorecards to fetch.
     */
    orderBy?: ScorecardOrderByWithRelationInput | ScorecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scorecards.
     */
    cursor?: ScorecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scorecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scorecards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scorecards.
     */
    distinct?: ScorecardScalarFieldEnum | ScorecardScalarFieldEnum[]
  }

  /**
   * Scorecard findFirstOrThrow
   */
  export type ScorecardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * Filter, which Scorecard to fetch.
     */
    where?: ScorecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scorecards to fetch.
     */
    orderBy?: ScorecardOrderByWithRelationInput | ScorecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Scorecards.
     */
    cursor?: ScorecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scorecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scorecards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Scorecards.
     */
    distinct?: ScorecardScalarFieldEnum | ScorecardScalarFieldEnum[]
  }

  /**
   * Scorecard findMany
   */
  export type ScorecardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * Filter, which Scorecards to fetch.
     */
    where?: ScorecardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Scorecards to fetch.
     */
    orderBy?: ScorecardOrderByWithRelationInput | ScorecardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Scorecards.
     */
    cursor?: ScorecardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Scorecards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Scorecards.
     */
    skip?: number
    distinct?: ScorecardScalarFieldEnum | ScorecardScalarFieldEnum[]
  }

  /**
   * Scorecard create
   */
  export type ScorecardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * The data needed to create a Scorecard.
     */
    data: XOR<ScorecardCreateInput, ScorecardUncheckedCreateInput>
  }

  /**
   * Scorecard createMany
   */
  export type ScorecardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Scorecards.
     */
    data: ScorecardCreateManyInput | ScorecardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Scorecard createManyAndReturn
   */
  export type ScorecardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * The data used to create many Scorecards.
     */
    data: ScorecardCreateManyInput | ScorecardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Scorecard update
   */
  export type ScorecardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * The data needed to update a Scorecard.
     */
    data: XOR<ScorecardUpdateInput, ScorecardUncheckedUpdateInput>
    /**
     * Choose, which Scorecard to update.
     */
    where: ScorecardWhereUniqueInput
  }

  /**
   * Scorecard updateMany
   */
  export type ScorecardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Scorecards.
     */
    data: XOR<ScorecardUpdateManyMutationInput, ScorecardUncheckedUpdateManyInput>
    /**
     * Filter which Scorecards to update
     */
    where?: ScorecardWhereInput
    /**
     * Limit how many Scorecards to update.
     */
    limit?: number
  }

  /**
   * Scorecard updateManyAndReturn
   */
  export type ScorecardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * The data used to update Scorecards.
     */
    data: XOR<ScorecardUpdateManyMutationInput, ScorecardUncheckedUpdateManyInput>
    /**
     * Filter which Scorecards to update
     */
    where?: ScorecardWhereInput
    /**
     * Limit how many Scorecards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Scorecard upsert
   */
  export type ScorecardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * The filter to search for the Scorecard to update in case it exists.
     */
    where: ScorecardWhereUniqueInput
    /**
     * In case the Scorecard found by the `where` argument doesn't exist, create a new Scorecard with this data.
     */
    create: XOR<ScorecardCreateInput, ScorecardUncheckedCreateInput>
    /**
     * In case the Scorecard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScorecardUpdateInput, ScorecardUncheckedUpdateInput>
  }

  /**
   * Scorecard delete
   */
  export type ScorecardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
    /**
     * Filter which Scorecard to delete.
     */
    where: ScorecardWhereUniqueInput
  }

  /**
   * Scorecard deleteMany
   */
  export type ScorecardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scorecards to delete
     */
    where?: ScorecardWhereInput
    /**
     * Limit how many Scorecards to delete.
     */
    limit?: number
  }

  /**
   * Scorecard without action
   */
  export type ScorecardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scorecard
     */
    select?: ScorecardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Scorecard
     */
    omit?: ScorecardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorecardInclude<ExtArgs> | null
  }


  /**
   * Model SavedResume
   */

  export type AggregateSavedResume = {
    _count: SavedResumeCountAggregateOutputType | null
    _min: SavedResumeMinAggregateOutputType | null
    _max: SavedResumeMaxAggregateOutputType | null
  }

  export type SavedResumeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    content: string | null
    createdAt: Date | null
    textHash: string | null
  }

  export type SavedResumeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
    content: string | null
    createdAt: Date | null
    textHash: string | null
  }

  export type SavedResumeCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    content: number
    createdAt: number
    parsedData: number
    textHash: number
    _all: number
  }


  export type SavedResumeMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    content?: true
    createdAt?: true
    textHash?: true
  }

  export type SavedResumeMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    content?: true
    createdAt?: true
    textHash?: true
  }

  export type SavedResumeCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    content?: true
    createdAt?: true
    parsedData?: true
    textHash?: true
    _all?: true
  }

  export type SavedResumeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedResume to aggregate.
     */
    where?: SavedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedResumes to fetch.
     */
    orderBy?: SavedResumeOrderByWithRelationInput | SavedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedResumes
    **/
    _count?: true | SavedResumeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedResumeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedResumeMaxAggregateInputType
  }

  export type GetSavedResumeAggregateType<T extends SavedResumeAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedResume]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedResume[P]>
      : GetScalarType<T[P], AggregateSavedResume[P]>
  }




  export type SavedResumeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedResumeWhereInput
    orderBy?: SavedResumeOrderByWithAggregationInput | SavedResumeOrderByWithAggregationInput[]
    by: SavedResumeScalarFieldEnum[] | SavedResumeScalarFieldEnum
    having?: SavedResumeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedResumeCountAggregateInputType | true
    _min?: SavedResumeMinAggregateInputType
    _max?: SavedResumeMaxAggregateInputType
  }

  export type SavedResumeGroupByOutputType = {
    id: string
    userId: string
    name: string
    content: string
    createdAt: Date
    parsedData: JsonValue | null
    textHash: string | null
    _count: SavedResumeCountAggregateOutputType | null
    _min: SavedResumeMinAggregateOutputType | null
    _max: SavedResumeMaxAggregateOutputType | null
  }

  type GetSavedResumeGroupByPayload<T extends SavedResumeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedResumeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedResumeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedResumeGroupByOutputType[P]>
            : GetScalarType<T[P], SavedResumeGroupByOutputType[P]>
        }
      >
    >


  export type SavedResumeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    content?: boolean
    createdAt?: boolean
    parsedData?: boolean
    textHash?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedResume"]>

  export type SavedResumeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    content?: boolean
    createdAt?: boolean
    parsedData?: boolean
    textHash?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedResume"]>

  export type SavedResumeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    content?: boolean
    createdAt?: boolean
    parsedData?: boolean
    textHash?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedResume"]>

  export type SavedResumeSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    content?: boolean
    createdAt?: boolean
    parsedData?: boolean
    textHash?: boolean
  }

  export type SavedResumeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name" | "content" | "createdAt" | "parsedData" | "textHash", ExtArgs["result"]["savedResume"]>
  export type SavedResumeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SavedResumeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SavedResumeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SavedResumePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SavedResume"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string
      content: string
      createdAt: Date
      /**
       * *
       * * Cached parsed resume JSON; use to skip re-parsing
       */
      parsedData: Prisma.JsonValue | null
      /**
       * *
       * * Hash of the raw resume text for caching parse results
       * Hash of the raw resume text for caching parse results
       */
      textHash: string | null
    }, ExtArgs["result"]["savedResume"]>
    composites: {}
  }

  type SavedResumeGetPayload<S extends boolean | null | undefined | SavedResumeDefaultArgs> = $Result.GetResult<Prisma.$SavedResumePayload, S>

  type SavedResumeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SavedResumeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SavedResumeCountAggregateInputType | true
    }

  export interface SavedResumeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedResume'], meta: { name: 'SavedResume' } }
    /**
     * Find zero or one SavedResume that matches the filter.
     * @param {SavedResumeFindUniqueArgs} args - Arguments to find a SavedResume
     * @example
     * // Get one SavedResume
     * const savedResume = await prisma.savedResume.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SavedResumeFindUniqueArgs>(args: SelectSubset<T, SavedResumeFindUniqueArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SavedResume that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SavedResumeFindUniqueOrThrowArgs} args - Arguments to find a SavedResume
     * @example
     * // Get one SavedResume
     * const savedResume = await prisma.savedResume.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SavedResumeFindUniqueOrThrowArgs>(args: SelectSubset<T, SavedResumeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedResume that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResumeFindFirstArgs} args - Arguments to find a SavedResume
     * @example
     * // Get one SavedResume
     * const savedResume = await prisma.savedResume.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SavedResumeFindFirstArgs>(args?: SelectSubset<T, SavedResumeFindFirstArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SavedResume that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResumeFindFirstOrThrowArgs} args - Arguments to find a SavedResume
     * @example
     * // Get one SavedResume
     * const savedResume = await prisma.savedResume.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SavedResumeFindFirstOrThrowArgs>(args?: SelectSubset<T, SavedResumeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SavedResumes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResumeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedResumes
     * const savedResumes = await prisma.savedResume.findMany()
     * 
     * // Get first 10 SavedResumes
     * const savedResumes = await prisma.savedResume.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedResumeWithIdOnly = await prisma.savedResume.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SavedResumeFindManyArgs>(args?: SelectSubset<T, SavedResumeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SavedResume.
     * @param {SavedResumeCreateArgs} args - Arguments to create a SavedResume.
     * @example
     * // Create one SavedResume
     * const SavedResume = await prisma.savedResume.create({
     *   data: {
     *     // ... data to create a SavedResume
     *   }
     * })
     * 
     */
    create<T extends SavedResumeCreateArgs>(args: SelectSubset<T, SavedResumeCreateArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SavedResumes.
     * @param {SavedResumeCreateManyArgs} args - Arguments to create many SavedResumes.
     * @example
     * // Create many SavedResumes
     * const savedResume = await prisma.savedResume.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SavedResumeCreateManyArgs>(args?: SelectSubset<T, SavedResumeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SavedResumes and returns the data saved in the database.
     * @param {SavedResumeCreateManyAndReturnArgs} args - Arguments to create many SavedResumes.
     * @example
     * // Create many SavedResumes
     * const savedResume = await prisma.savedResume.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SavedResumes and only return the `id`
     * const savedResumeWithIdOnly = await prisma.savedResume.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SavedResumeCreateManyAndReturnArgs>(args?: SelectSubset<T, SavedResumeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SavedResume.
     * @param {SavedResumeDeleteArgs} args - Arguments to delete one SavedResume.
     * @example
     * // Delete one SavedResume
     * const SavedResume = await prisma.savedResume.delete({
     *   where: {
     *     // ... filter to delete one SavedResume
     *   }
     * })
     * 
     */
    delete<T extends SavedResumeDeleteArgs>(args: SelectSubset<T, SavedResumeDeleteArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SavedResume.
     * @param {SavedResumeUpdateArgs} args - Arguments to update one SavedResume.
     * @example
     * // Update one SavedResume
     * const savedResume = await prisma.savedResume.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SavedResumeUpdateArgs>(args: SelectSubset<T, SavedResumeUpdateArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SavedResumes.
     * @param {SavedResumeDeleteManyArgs} args - Arguments to filter SavedResumes to delete.
     * @example
     * // Delete a few SavedResumes
     * const { count } = await prisma.savedResume.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SavedResumeDeleteManyArgs>(args?: SelectSubset<T, SavedResumeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedResumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResumeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedResumes
     * const savedResume = await prisma.savedResume.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SavedResumeUpdateManyArgs>(args: SelectSubset<T, SavedResumeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedResumes and returns the data updated in the database.
     * @param {SavedResumeUpdateManyAndReturnArgs} args - Arguments to update many SavedResumes.
     * @example
     * // Update many SavedResumes
     * const savedResume = await prisma.savedResume.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SavedResumes and only return the `id`
     * const savedResumeWithIdOnly = await prisma.savedResume.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SavedResumeUpdateManyAndReturnArgs>(args: SelectSubset<T, SavedResumeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SavedResume.
     * @param {SavedResumeUpsertArgs} args - Arguments to update or create a SavedResume.
     * @example
     * // Update or create a SavedResume
     * const savedResume = await prisma.savedResume.upsert({
     *   create: {
     *     // ... data to create a SavedResume
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedResume we want to update
     *   }
     * })
     */
    upsert<T extends SavedResumeUpsertArgs>(args: SelectSubset<T, SavedResumeUpsertArgs<ExtArgs>>): Prisma__SavedResumeClient<$Result.GetResult<Prisma.$SavedResumePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SavedResumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResumeCountArgs} args - Arguments to filter SavedResumes to count.
     * @example
     * // Count the number of SavedResumes
     * const count = await prisma.savedResume.count({
     *   where: {
     *     // ... the filter for the SavedResumes we want to count
     *   }
     * })
    **/
    count<T extends SavedResumeCountArgs>(
      args?: Subset<T, SavedResumeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedResumeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedResume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedResumeAggregateArgs>(args: Subset<T, SavedResumeAggregateArgs>): Prisma.PrismaPromise<GetSavedResumeAggregateType<T>>

    /**
     * Group by SavedResume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedResumeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedResumeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedResumeGroupByArgs['orderBy'] }
        : { orderBy?: SavedResumeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedResumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedResumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SavedResume model
   */
  readonly fields: SavedResumeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedResume.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SavedResumeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SavedResume model
   */
  interface SavedResumeFieldRefs {
    readonly id: FieldRef<"SavedResume", 'String'>
    readonly userId: FieldRef<"SavedResume", 'String'>
    readonly name: FieldRef<"SavedResume", 'String'>
    readonly content: FieldRef<"SavedResume", 'String'>
    readonly createdAt: FieldRef<"SavedResume", 'DateTime'>
    readonly parsedData: FieldRef<"SavedResume", 'Json'>
    readonly textHash: FieldRef<"SavedResume", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SavedResume findUnique
   */
  export type SavedResumeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * Filter, which SavedResume to fetch.
     */
    where: SavedResumeWhereUniqueInput
  }

  /**
   * SavedResume findUniqueOrThrow
   */
  export type SavedResumeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * Filter, which SavedResume to fetch.
     */
    where: SavedResumeWhereUniqueInput
  }

  /**
   * SavedResume findFirst
   */
  export type SavedResumeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * Filter, which SavedResume to fetch.
     */
    where?: SavedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedResumes to fetch.
     */
    orderBy?: SavedResumeOrderByWithRelationInput | SavedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedResumes.
     */
    cursor?: SavedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedResumes.
     */
    distinct?: SavedResumeScalarFieldEnum | SavedResumeScalarFieldEnum[]
  }

  /**
   * SavedResume findFirstOrThrow
   */
  export type SavedResumeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * Filter, which SavedResume to fetch.
     */
    where?: SavedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedResumes to fetch.
     */
    orderBy?: SavedResumeOrderByWithRelationInput | SavedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedResumes.
     */
    cursor?: SavedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedResumes.
     */
    distinct?: SavedResumeScalarFieldEnum | SavedResumeScalarFieldEnum[]
  }

  /**
   * SavedResume findMany
   */
  export type SavedResumeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * Filter, which SavedResumes to fetch.
     */
    where?: SavedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedResumes to fetch.
     */
    orderBy?: SavedResumeOrderByWithRelationInput | SavedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedResumes.
     */
    cursor?: SavedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedResumes.
     */
    skip?: number
    distinct?: SavedResumeScalarFieldEnum | SavedResumeScalarFieldEnum[]
  }

  /**
   * SavedResume create
   */
  export type SavedResumeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedResume.
     */
    data: XOR<SavedResumeCreateInput, SavedResumeUncheckedCreateInput>
  }

  /**
   * SavedResume createMany
   */
  export type SavedResumeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedResumes.
     */
    data: SavedResumeCreateManyInput | SavedResumeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SavedResume createManyAndReturn
   */
  export type SavedResumeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * The data used to create many SavedResumes.
     */
    data: SavedResumeCreateManyInput | SavedResumeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedResume update
   */
  export type SavedResumeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedResume.
     */
    data: XOR<SavedResumeUpdateInput, SavedResumeUncheckedUpdateInput>
    /**
     * Choose, which SavedResume to update.
     */
    where: SavedResumeWhereUniqueInput
  }

  /**
   * SavedResume updateMany
   */
  export type SavedResumeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedResumes.
     */
    data: XOR<SavedResumeUpdateManyMutationInput, SavedResumeUncheckedUpdateManyInput>
    /**
     * Filter which SavedResumes to update
     */
    where?: SavedResumeWhereInput
    /**
     * Limit how many SavedResumes to update.
     */
    limit?: number
  }

  /**
   * SavedResume updateManyAndReturn
   */
  export type SavedResumeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * The data used to update SavedResumes.
     */
    data: XOR<SavedResumeUpdateManyMutationInput, SavedResumeUncheckedUpdateManyInput>
    /**
     * Filter which SavedResumes to update
     */
    where?: SavedResumeWhereInput
    /**
     * Limit how many SavedResumes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SavedResume upsert
   */
  export type SavedResumeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedResume to update in case it exists.
     */
    where: SavedResumeWhereUniqueInput
    /**
     * In case the SavedResume found by the `where` argument doesn't exist, create a new SavedResume with this data.
     */
    create: XOR<SavedResumeCreateInput, SavedResumeUncheckedCreateInput>
    /**
     * In case the SavedResume was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedResumeUpdateInput, SavedResumeUncheckedUpdateInput>
  }

  /**
   * SavedResume delete
   */
  export type SavedResumeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
    /**
     * Filter which SavedResume to delete.
     */
    where: SavedResumeWhereUniqueInput
  }

  /**
   * SavedResume deleteMany
   */
  export type SavedResumeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedResumes to delete
     */
    where?: SavedResumeWhereInput
    /**
     * Limit how many SavedResumes to delete.
     */
    limit?: number
  }

  /**
   * SavedResume without action
   */
  export type SavedResumeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedResume
     */
    select?: SavedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SavedResume
     */
    omit?: SavedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SavedResumeInclude<ExtArgs> | null
  }


  /**
   * Model UnifiedResume
   */

  export type AggregateUnifiedResume = {
    _count: UnifiedResumeCountAggregateOutputType | null
    _avg: UnifiedResumeAvgAggregateOutputType | null
    _sum: UnifiedResumeSumAggregateOutputType | null
    _min: UnifiedResumeMinAggregateOutputType | null
    _max: UnifiedResumeMaxAggregateOutputType | null
  }

  export type UnifiedResumeAvgAggregateOutputType = {
    version: number | null
  }

  export type UnifiedResumeSumAggregateOutputType = {
    version: number | null
  }

  export type UnifiedResumeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    version: number | null
    title: string | null
    template: string | null
    createdAt: Date | null
    updatedAt: Date | null
    analyzedAt: Date | null
    publishedAt: Date | null
  }

  export type UnifiedResumeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    version: number | null
    title: string | null
    template: string | null
    createdAt: Date | null
    updatedAt: Date | null
    analyzedAt: Date | null
    publishedAt: Date | null
  }

  export type UnifiedResumeCountAggregateOutputType = {
    id: number
    userId: number
    version: number
    builderData: number
    optimizationData: number
    sharingData: number
    title: number
    template: number
    createdAt: number
    updatedAt: number
    analyzedAt: number
    publishedAt: number
    _all: number
  }


  export type UnifiedResumeAvgAggregateInputType = {
    version?: true
  }

  export type UnifiedResumeSumAggregateInputType = {
    version?: true
  }

  export type UnifiedResumeMinAggregateInputType = {
    id?: true
    userId?: true
    version?: true
    title?: true
    template?: true
    createdAt?: true
    updatedAt?: true
    analyzedAt?: true
    publishedAt?: true
  }

  export type UnifiedResumeMaxAggregateInputType = {
    id?: true
    userId?: true
    version?: true
    title?: true
    template?: true
    createdAt?: true
    updatedAt?: true
    analyzedAt?: true
    publishedAt?: true
  }

  export type UnifiedResumeCountAggregateInputType = {
    id?: true
    userId?: true
    version?: true
    builderData?: true
    optimizationData?: true
    sharingData?: true
    title?: true
    template?: true
    createdAt?: true
    updatedAt?: true
    analyzedAt?: true
    publishedAt?: true
    _all?: true
  }

  export type UnifiedResumeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnifiedResume to aggregate.
     */
    where?: UnifiedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnifiedResumes to fetch.
     */
    orderBy?: UnifiedResumeOrderByWithRelationInput | UnifiedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnifiedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnifiedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnifiedResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UnifiedResumes
    **/
    _count?: true | UnifiedResumeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnifiedResumeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnifiedResumeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnifiedResumeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnifiedResumeMaxAggregateInputType
  }

  export type GetUnifiedResumeAggregateType<T extends UnifiedResumeAggregateArgs> = {
        [P in keyof T & keyof AggregateUnifiedResume]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnifiedResume[P]>
      : GetScalarType<T[P], AggregateUnifiedResume[P]>
  }




  export type UnifiedResumeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnifiedResumeWhereInput
    orderBy?: UnifiedResumeOrderByWithAggregationInput | UnifiedResumeOrderByWithAggregationInput[]
    by: UnifiedResumeScalarFieldEnum[] | UnifiedResumeScalarFieldEnum
    having?: UnifiedResumeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnifiedResumeCountAggregateInputType | true
    _avg?: UnifiedResumeAvgAggregateInputType
    _sum?: UnifiedResumeSumAggregateInputType
    _min?: UnifiedResumeMinAggregateInputType
    _max?: UnifiedResumeMaxAggregateInputType
  }

  export type UnifiedResumeGroupByOutputType = {
    id: string
    userId: string
    version: number
    builderData: JsonValue
    optimizationData: JsonValue | null
    sharingData: JsonValue | null
    title: string
    template: string
    createdAt: Date
    updatedAt: Date
    analyzedAt: Date | null
    publishedAt: Date | null
    _count: UnifiedResumeCountAggregateOutputType | null
    _avg: UnifiedResumeAvgAggregateOutputType | null
    _sum: UnifiedResumeSumAggregateOutputType | null
    _min: UnifiedResumeMinAggregateOutputType | null
    _max: UnifiedResumeMaxAggregateOutputType | null
  }

  type GetUnifiedResumeGroupByPayload<T extends UnifiedResumeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnifiedResumeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnifiedResumeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnifiedResumeGroupByOutputType[P]>
            : GetScalarType<T[P], UnifiedResumeGroupByOutputType[P]>
        }
      >
    >


  export type UnifiedResumeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    version?: boolean
    builderData?: boolean
    optimizationData?: boolean
    sharingData?: boolean
    title?: boolean
    template?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    analyzedAt?: boolean
    publishedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    analyses?: boolean | UnifiedResume$analysesArgs<ExtArgs>
    shares?: boolean | UnifiedResume$sharesArgs<ExtArgs>
    _count?: boolean | UnifiedResumeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unifiedResume"]>

  export type UnifiedResumeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    version?: boolean
    builderData?: boolean
    optimizationData?: boolean
    sharingData?: boolean
    title?: boolean
    template?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    analyzedAt?: boolean
    publishedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unifiedResume"]>

  export type UnifiedResumeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    version?: boolean
    builderData?: boolean
    optimizationData?: boolean
    sharingData?: boolean
    title?: boolean
    template?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    analyzedAt?: boolean
    publishedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unifiedResume"]>

  export type UnifiedResumeSelectScalar = {
    id?: boolean
    userId?: boolean
    version?: boolean
    builderData?: boolean
    optimizationData?: boolean
    sharingData?: boolean
    title?: boolean
    template?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    analyzedAt?: boolean
    publishedAt?: boolean
  }

  export type UnifiedResumeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "version" | "builderData" | "optimizationData" | "sharingData" | "title" | "template" | "createdAt" | "updatedAt" | "analyzedAt" | "publishedAt", ExtArgs["result"]["unifiedResume"]>
  export type UnifiedResumeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    analyses?: boolean | UnifiedResume$analysesArgs<ExtArgs>
    shares?: boolean | UnifiedResume$sharesArgs<ExtArgs>
    _count?: boolean | UnifiedResumeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UnifiedResumeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UnifiedResumeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UnifiedResumePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UnifiedResume"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      analyses: Prisma.$ResumeAnalysisPayload<ExtArgs>[]
      shares: Prisma.$ResumeSharePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      version: number
      builderData: Prisma.JsonValue
      optimizationData: Prisma.JsonValue | null
      sharingData: Prisma.JsonValue | null
      title: string
      template: string
      createdAt: Date
      updatedAt: Date
      analyzedAt: Date | null
      publishedAt: Date | null
    }, ExtArgs["result"]["unifiedResume"]>
    composites: {}
  }

  type UnifiedResumeGetPayload<S extends boolean | null | undefined | UnifiedResumeDefaultArgs> = $Result.GetResult<Prisma.$UnifiedResumePayload, S>

  type UnifiedResumeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UnifiedResumeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UnifiedResumeCountAggregateInputType | true
    }

  export interface UnifiedResumeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UnifiedResume'], meta: { name: 'UnifiedResume' } }
    /**
     * Find zero or one UnifiedResume that matches the filter.
     * @param {UnifiedResumeFindUniqueArgs} args - Arguments to find a UnifiedResume
     * @example
     * // Get one UnifiedResume
     * const unifiedResume = await prisma.unifiedResume.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnifiedResumeFindUniqueArgs>(args: SelectSubset<T, UnifiedResumeFindUniqueArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UnifiedResume that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UnifiedResumeFindUniqueOrThrowArgs} args - Arguments to find a UnifiedResume
     * @example
     * // Get one UnifiedResume
     * const unifiedResume = await prisma.unifiedResume.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnifiedResumeFindUniqueOrThrowArgs>(args: SelectSubset<T, UnifiedResumeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UnifiedResume that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnifiedResumeFindFirstArgs} args - Arguments to find a UnifiedResume
     * @example
     * // Get one UnifiedResume
     * const unifiedResume = await prisma.unifiedResume.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnifiedResumeFindFirstArgs>(args?: SelectSubset<T, UnifiedResumeFindFirstArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UnifiedResume that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnifiedResumeFindFirstOrThrowArgs} args - Arguments to find a UnifiedResume
     * @example
     * // Get one UnifiedResume
     * const unifiedResume = await prisma.unifiedResume.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnifiedResumeFindFirstOrThrowArgs>(args?: SelectSubset<T, UnifiedResumeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UnifiedResumes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnifiedResumeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UnifiedResumes
     * const unifiedResumes = await prisma.unifiedResume.findMany()
     * 
     * // Get first 10 UnifiedResumes
     * const unifiedResumes = await prisma.unifiedResume.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unifiedResumeWithIdOnly = await prisma.unifiedResume.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnifiedResumeFindManyArgs>(args?: SelectSubset<T, UnifiedResumeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UnifiedResume.
     * @param {UnifiedResumeCreateArgs} args - Arguments to create a UnifiedResume.
     * @example
     * // Create one UnifiedResume
     * const UnifiedResume = await prisma.unifiedResume.create({
     *   data: {
     *     // ... data to create a UnifiedResume
     *   }
     * })
     * 
     */
    create<T extends UnifiedResumeCreateArgs>(args: SelectSubset<T, UnifiedResumeCreateArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UnifiedResumes.
     * @param {UnifiedResumeCreateManyArgs} args - Arguments to create many UnifiedResumes.
     * @example
     * // Create many UnifiedResumes
     * const unifiedResume = await prisma.unifiedResume.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnifiedResumeCreateManyArgs>(args?: SelectSubset<T, UnifiedResumeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UnifiedResumes and returns the data saved in the database.
     * @param {UnifiedResumeCreateManyAndReturnArgs} args - Arguments to create many UnifiedResumes.
     * @example
     * // Create many UnifiedResumes
     * const unifiedResume = await prisma.unifiedResume.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UnifiedResumes and only return the `id`
     * const unifiedResumeWithIdOnly = await prisma.unifiedResume.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UnifiedResumeCreateManyAndReturnArgs>(args?: SelectSubset<T, UnifiedResumeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UnifiedResume.
     * @param {UnifiedResumeDeleteArgs} args - Arguments to delete one UnifiedResume.
     * @example
     * // Delete one UnifiedResume
     * const UnifiedResume = await prisma.unifiedResume.delete({
     *   where: {
     *     // ... filter to delete one UnifiedResume
     *   }
     * })
     * 
     */
    delete<T extends UnifiedResumeDeleteArgs>(args: SelectSubset<T, UnifiedResumeDeleteArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UnifiedResume.
     * @param {UnifiedResumeUpdateArgs} args - Arguments to update one UnifiedResume.
     * @example
     * // Update one UnifiedResume
     * const unifiedResume = await prisma.unifiedResume.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnifiedResumeUpdateArgs>(args: SelectSubset<T, UnifiedResumeUpdateArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UnifiedResumes.
     * @param {UnifiedResumeDeleteManyArgs} args - Arguments to filter UnifiedResumes to delete.
     * @example
     * // Delete a few UnifiedResumes
     * const { count } = await prisma.unifiedResume.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnifiedResumeDeleteManyArgs>(args?: SelectSubset<T, UnifiedResumeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UnifiedResumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnifiedResumeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UnifiedResumes
     * const unifiedResume = await prisma.unifiedResume.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnifiedResumeUpdateManyArgs>(args: SelectSubset<T, UnifiedResumeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UnifiedResumes and returns the data updated in the database.
     * @param {UnifiedResumeUpdateManyAndReturnArgs} args - Arguments to update many UnifiedResumes.
     * @example
     * // Update many UnifiedResumes
     * const unifiedResume = await prisma.unifiedResume.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UnifiedResumes and only return the `id`
     * const unifiedResumeWithIdOnly = await prisma.unifiedResume.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UnifiedResumeUpdateManyAndReturnArgs>(args: SelectSubset<T, UnifiedResumeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UnifiedResume.
     * @param {UnifiedResumeUpsertArgs} args - Arguments to update or create a UnifiedResume.
     * @example
     * // Update or create a UnifiedResume
     * const unifiedResume = await prisma.unifiedResume.upsert({
     *   create: {
     *     // ... data to create a UnifiedResume
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UnifiedResume we want to update
     *   }
     * })
     */
    upsert<T extends UnifiedResumeUpsertArgs>(args: SelectSubset<T, UnifiedResumeUpsertArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UnifiedResumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnifiedResumeCountArgs} args - Arguments to filter UnifiedResumes to count.
     * @example
     * // Count the number of UnifiedResumes
     * const count = await prisma.unifiedResume.count({
     *   where: {
     *     // ... the filter for the UnifiedResumes we want to count
     *   }
     * })
    **/
    count<T extends UnifiedResumeCountArgs>(
      args?: Subset<T, UnifiedResumeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnifiedResumeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UnifiedResume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnifiedResumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnifiedResumeAggregateArgs>(args: Subset<T, UnifiedResumeAggregateArgs>): Prisma.PrismaPromise<GetUnifiedResumeAggregateType<T>>

    /**
     * Group by UnifiedResume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnifiedResumeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnifiedResumeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnifiedResumeGroupByArgs['orderBy'] }
        : { orderBy?: UnifiedResumeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnifiedResumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnifiedResumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UnifiedResume model
   */
  readonly fields: UnifiedResumeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UnifiedResume.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnifiedResumeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    analyses<T extends UnifiedResume$analysesArgs<ExtArgs> = {}>(args?: Subset<T, UnifiedResume$analysesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shares<T extends UnifiedResume$sharesArgs<ExtArgs> = {}>(args?: Subset<T, UnifiedResume$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UnifiedResume model
   */
  interface UnifiedResumeFieldRefs {
    readonly id: FieldRef<"UnifiedResume", 'String'>
    readonly userId: FieldRef<"UnifiedResume", 'String'>
    readonly version: FieldRef<"UnifiedResume", 'Int'>
    readonly builderData: FieldRef<"UnifiedResume", 'Json'>
    readonly optimizationData: FieldRef<"UnifiedResume", 'Json'>
    readonly sharingData: FieldRef<"UnifiedResume", 'Json'>
    readonly title: FieldRef<"UnifiedResume", 'String'>
    readonly template: FieldRef<"UnifiedResume", 'String'>
    readonly createdAt: FieldRef<"UnifiedResume", 'DateTime'>
    readonly updatedAt: FieldRef<"UnifiedResume", 'DateTime'>
    readonly analyzedAt: FieldRef<"UnifiedResume", 'DateTime'>
    readonly publishedAt: FieldRef<"UnifiedResume", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UnifiedResume findUnique
   */
  export type UnifiedResumeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * Filter, which UnifiedResume to fetch.
     */
    where: UnifiedResumeWhereUniqueInput
  }

  /**
   * UnifiedResume findUniqueOrThrow
   */
  export type UnifiedResumeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * Filter, which UnifiedResume to fetch.
     */
    where: UnifiedResumeWhereUniqueInput
  }

  /**
   * UnifiedResume findFirst
   */
  export type UnifiedResumeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * Filter, which UnifiedResume to fetch.
     */
    where?: UnifiedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnifiedResumes to fetch.
     */
    orderBy?: UnifiedResumeOrderByWithRelationInput | UnifiedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnifiedResumes.
     */
    cursor?: UnifiedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnifiedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnifiedResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnifiedResumes.
     */
    distinct?: UnifiedResumeScalarFieldEnum | UnifiedResumeScalarFieldEnum[]
  }

  /**
   * UnifiedResume findFirstOrThrow
   */
  export type UnifiedResumeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * Filter, which UnifiedResume to fetch.
     */
    where?: UnifiedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnifiedResumes to fetch.
     */
    orderBy?: UnifiedResumeOrderByWithRelationInput | UnifiedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnifiedResumes.
     */
    cursor?: UnifiedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnifiedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnifiedResumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnifiedResumes.
     */
    distinct?: UnifiedResumeScalarFieldEnum | UnifiedResumeScalarFieldEnum[]
  }

  /**
   * UnifiedResume findMany
   */
  export type UnifiedResumeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * Filter, which UnifiedResumes to fetch.
     */
    where?: UnifiedResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnifiedResumes to fetch.
     */
    orderBy?: UnifiedResumeOrderByWithRelationInput | UnifiedResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UnifiedResumes.
     */
    cursor?: UnifiedResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnifiedResumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnifiedResumes.
     */
    skip?: number
    distinct?: UnifiedResumeScalarFieldEnum | UnifiedResumeScalarFieldEnum[]
  }

  /**
   * UnifiedResume create
   */
  export type UnifiedResumeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * The data needed to create a UnifiedResume.
     */
    data: XOR<UnifiedResumeCreateInput, UnifiedResumeUncheckedCreateInput>
  }

  /**
   * UnifiedResume createMany
   */
  export type UnifiedResumeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UnifiedResumes.
     */
    data: UnifiedResumeCreateManyInput | UnifiedResumeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UnifiedResume createManyAndReturn
   */
  export type UnifiedResumeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * The data used to create many UnifiedResumes.
     */
    data: UnifiedResumeCreateManyInput | UnifiedResumeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UnifiedResume update
   */
  export type UnifiedResumeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * The data needed to update a UnifiedResume.
     */
    data: XOR<UnifiedResumeUpdateInput, UnifiedResumeUncheckedUpdateInput>
    /**
     * Choose, which UnifiedResume to update.
     */
    where: UnifiedResumeWhereUniqueInput
  }

  /**
   * UnifiedResume updateMany
   */
  export type UnifiedResumeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UnifiedResumes.
     */
    data: XOR<UnifiedResumeUpdateManyMutationInput, UnifiedResumeUncheckedUpdateManyInput>
    /**
     * Filter which UnifiedResumes to update
     */
    where?: UnifiedResumeWhereInput
    /**
     * Limit how many UnifiedResumes to update.
     */
    limit?: number
  }

  /**
   * UnifiedResume updateManyAndReturn
   */
  export type UnifiedResumeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * The data used to update UnifiedResumes.
     */
    data: XOR<UnifiedResumeUpdateManyMutationInput, UnifiedResumeUncheckedUpdateManyInput>
    /**
     * Filter which UnifiedResumes to update
     */
    where?: UnifiedResumeWhereInput
    /**
     * Limit how many UnifiedResumes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UnifiedResume upsert
   */
  export type UnifiedResumeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * The filter to search for the UnifiedResume to update in case it exists.
     */
    where: UnifiedResumeWhereUniqueInput
    /**
     * In case the UnifiedResume found by the `where` argument doesn't exist, create a new UnifiedResume with this data.
     */
    create: XOR<UnifiedResumeCreateInput, UnifiedResumeUncheckedCreateInput>
    /**
     * In case the UnifiedResume was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnifiedResumeUpdateInput, UnifiedResumeUncheckedUpdateInput>
  }

  /**
   * UnifiedResume delete
   */
  export type UnifiedResumeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
    /**
     * Filter which UnifiedResume to delete.
     */
    where: UnifiedResumeWhereUniqueInput
  }

  /**
   * UnifiedResume deleteMany
   */
  export type UnifiedResumeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnifiedResumes to delete
     */
    where?: UnifiedResumeWhereInput
    /**
     * Limit how many UnifiedResumes to delete.
     */
    limit?: number
  }

  /**
   * UnifiedResume.analyses
   */
  export type UnifiedResume$analysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    where?: ResumeAnalysisWhereInput
    orderBy?: ResumeAnalysisOrderByWithRelationInput | ResumeAnalysisOrderByWithRelationInput[]
    cursor?: ResumeAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeAnalysisScalarFieldEnum | ResumeAnalysisScalarFieldEnum[]
  }

  /**
   * UnifiedResume.shares
   */
  export type UnifiedResume$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    where?: ResumeShareWhereInput
    orderBy?: ResumeShareOrderByWithRelationInput | ResumeShareOrderByWithRelationInput[]
    cursor?: ResumeShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResumeShareScalarFieldEnum | ResumeShareScalarFieldEnum[]
  }

  /**
   * UnifiedResume without action
   */
  export type UnifiedResumeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnifiedResume
     */
    select?: UnifiedResumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UnifiedResume
     */
    omit?: UnifiedResumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnifiedResumeInclude<ExtArgs> | null
  }


  /**
   * Model ResumeAnalysis
   */

  export type AggregateResumeAnalysis = {
    _count: ResumeAnalysisCountAggregateOutputType | null
    _avg: ResumeAnalysisAvgAggregateOutputType | null
    _sum: ResumeAnalysisSumAggregateOutputType | null
    _min: ResumeAnalysisMinAggregateOutputType | null
    _max: ResumeAnalysisMaxAggregateOutputType | null
  }

  export type ResumeAnalysisAvgAggregateOutputType = {
    overallScore: number | null
    similarityScore: number | null
    processingTime: number | null
  }

  export type ResumeAnalysisSumAggregateOutputType = {
    overallScore: number | null
    similarityScore: number | null
    processingTime: number | null
  }

  export type ResumeAnalysisMinAggregateOutputType = {
    id: string | null
    resumeId: string | null
    jobDescription: string | null
    overallScore: number | null
    similarityScore: number | null
    analysisVersion: string | null
    modelUsed: string | null
    processingTime: number | null
    createdAt: Date | null
  }

  export type ResumeAnalysisMaxAggregateOutputType = {
    id: string | null
    resumeId: string | null
    jobDescription: string | null
    overallScore: number | null
    similarityScore: number | null
    analysisVersion: string | null
    modelUsed: string | null
    processingTime: number | null
    createdAt: Date | null
  }

  export type ResumeAnalysisCountAggregateOutputType = {
    id: number
    resumeId: number
    jobDescription: number
    overallScore: number
    keywordMatches: number
    similarityScore: number
    atsCompatibility: number
    sectionScores: number
    recommendations: number
    insights: number
    analysisVersion: number
    modelUsed: number
    processingTime: number
    createdAt: number
    _all: number
  }


  export type ResumeAnalysisAvgAggregateInputType = {
    overallScore?: true
    similarityScore?: true
    processingTime?: true
  }

  export type ResumeAnalysisSumAggregateInputType = {
    overallScore?: true
    similarityScore?: true
    processingTime?: true
  }

  export type ResumeAnalysisMinAggregateInputType = {
    id?: true
    resumeId?: true
    jobDescription?: true
    overallScore?: true
    similarityScore?: true
    analysisVersion?: true
    modelUsed?: true
    processingTime?: true
    createdAt?: true
  }

  export type ResumeAnalysisMaxAggregateInputType = {
    id?: true
    resumeId?: true
    jobDescription?: true
    overallScore?: true
    similarityScore?: true
    analysisVersion?: true
    modelUsed?: true
    processingTime?: true
    createdAt?: true
  }

  export type ResumeAnalysisCountAggregateInputType = {
    id?: true
    resumeId?: true
    jobDescription?: true
    overallScore?: true
    keywordMatches?: true
    similarityScore?: true
    atsCompatibility?: true
    sectionScores?: true
    recommendations?: true
    insights?: true
    analysisVersion?: true
    modelUsed?: true
    processingTime?: true
    createdAt?: true
    _all?: true
  }

  export type ResumeAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeAnalysis to aggregate.
     */
    where?: ResumeAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAnalyses to fetch.
     */
    orderBy?: ResumeAnalysisOrderByWithRelationInput | ResumeAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeAnalyses
    **/
    _count?: true | ResumeAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeAnalysisMaxAggregateInputType
  }

  export type GetResumeAnalysisAggregateType<T extends ResumeAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeAnalysis[P]>
      : GetScalarType<T[P], AggregateResumeAnalysis[P]>
  }




  export type ResumeAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeAnalysisWhereInput
    orderBy?: ResumeAnalysisOrderByWithAggregationInput | ResumeAnalysisOrderByWithAggregationInput[]
    by: ResumeAnalysisScalarFieldEnum[] | ResumeAnalysisScalarFieldEnum
    having?: ResumeAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeAnalysisCountAggregateInputType | true
    _avg?: ResumeAnalysisAvgAggregateInputType
    _sum?: ResumeAnalysisSumAggregateInputType
    _min?: ResumeAnalysisMinAggregateInputType
    _max?: ResumeAnalysisMaxAggregateInputType
  }

  export type ResumeAnalysisGroupByOutputType = {
    id: string
    resumeId: string
    jobDescription: string
    overallScore: number
    keywordMatches: JsonValue
    similarityScore: number
    atsCompatibility: JsonValue
    sectionScores: JsonValue
    recommendations: JsonValue
    insights: JsonValue
    analysisVersion: string
    modelUsed: string
    processingTime: number | null
    createdAt: Date
    _count: ResumeAnalysisCountAggregateOutputType | null
    _avg: ResumeAnalysisAvgAggregateOutputType | null
    _sum: ResumeAnalysisSumAggregateOutputType | null
    _min: ResumeAnalysisMinAggregateOutputType | null
    _max: ResumeAnalysisMaxAggregateOutputType | null
  }

  type GetResumeAnalysisGroupByPayload<T extends ResumeAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type ResumeAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    jobDescription?: boolean
    overallScore?: boolean
    keywordMatches?: boolean
    similarityScore?: boolean
    atsCompatibility?: boolean
    sectionScores?: boolean
    recommendations?: boolean
    insights?: boolean
    analysisVersion?: boolean
    modelUsed?: boolean
    processingTime?: boolean
    createdAt?: boolean
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeAnalysis"]>

  export type ResumeAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    jobDescription?: boolean
    overallScore?: boolean
    keywordMatches?: boolean
    similarityScore?: boolean
    atsCompatibility?: boolean
    sectionScores?: boolean
    recommendations?: boolean
    insights?: boolean
    analysisVersion?: boolean
    modelUsed?: boolean
    processingTime?: boolean
    createdAt?: boolean
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeAnalysis"]>

  export type ResumeAnalysisSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    jobDescription?: boolean
    overallScore?: boolean
    keywordMatches?: boolean
    similarityScore?: boolean
    atsCompatibility?: boolean
    sectionScores?: boolean
    recommendations?: boolean
    insights?: boolean
    analysisVersion?: boolean
    modelUsed?: boolean
    processingTime?: boolean
    createdAt?: boolean
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeAnalysis"]>

  export type ResumeAnalysisSelectScalar = {
    id?: boolean
    resumeId?: boolean
    jobDescription?: boolean
    overallScore?: boolean
    keywordMatches?: boolean
    similarityScore?: boolean
    atsCompatibility?: boolean
    sectionScores?: boolean
    recommendations?: boolean
    insights?: boolean
    analysisVersion?: boolean
    modelUsed?: boolean
    processingTime?: boolean
    createdAt?: boolean
  }

  export type ResumeAnalysisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "jobDescription" | "overallScore" | "keywordMatches" | "similarityScore" | "atsCompatibility" | "sectionScores" | "recommendations" | "insights" | "analysisVersion" | "modelUsed" | "processingTime" | "createdAt", ExtArgs["result"]["resumeAnalysis"]>
  export type ResumeAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }
  export type ResumeAnalysisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }
  export type ResumeAnalysisIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }

  export type $ResumeAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeAnalysis"
    objects: {
      resume: Prisma.$UnifiedResumePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      resumeId: string
      jobDescription: string
      overallScore: number
      keywordMatches: Prisma.JsonValue
      similarityScore: number
      atsCompatibility: Prisma.JsonValue
      sectionScores: Prisma.JsonValue
      recommendations: Prisma.JsonValue
      insights: Prisma.JsonValue
      analysisVersion: string
      modelUsed: string
      processingTime: number | null
      createdAt: Date
    }, ExtArgs["result"]["resumeAnalysis"]>
    composites: {}
  }

  type ResumeAnalysisGetPayload<S extends boolean | null | undefined | ResumeAnalysisDefaultArgs> = $Result.GetResult<Prisma.$ResumeAnalysisPayload, S>

  type ResumeAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeAnalysisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeAnalysisCountAggregateInputType | true
    }

  export interface ResumeAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeAnalysis'], meta: { name: 'ResumeAnalysis' } }
    /**
     * Find zero or one ResumeAnalysis that matches the filter.
     * @param {ResumeAnalysisFindUniqueArgs} args - Arguments to find a ResumeAnalysis
     * @example
     * // Get one ResumeAnalysis
     * const resumeAnalysis = await prisma.resumeAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeAnalysisFindUniqueArgs>(args: SelectSubset<T, ResumeAnalysisFindUniqueArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeAnalysis that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeAnalysisFindUniqueOrThrowArgs} args - Arguments to find a ResumeAnalysis
     * @example
     * // Get one ResumeAnalysis
     * const resumeAnalysis = await prisma.resumeAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAnalysisFindFirstArgs} args - Arguments to find a ResumeAnalysis
     * @example
     * // Get one ResumeAnalysis
     * const resumeAnalysis = await prisma.resumeAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeAnalysisFindFirstArgs>(args?: SelectSubset<T, ResumeAnalysisFindFirstArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAnalysisFindFirstOrThrowArgs} args - Arguments to find a ResumeAnalysis
     * @example
     * // Get one ResumeAnalysis
     * const resumeAnalysis = await prisma.resumeAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeAnalyses
     * const resumeAnalyses = await prisma.resumeAnalysis.findMany()
     * 
     * // Get first 10 ResumeAnalyses
     * const resumeAnalyses = await prisma.resumeAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeAnalysisWithIdOnly = await prisma.resumeAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeAnalysisFindManyArgs>(args?: SelectSubset<T, ResumeAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeAnalysis.
     * @param {ResumeAnalysisCreateArgs} args - Arguments to create a ResumeAnalysis.
     * @example
     * // Create one ResumeAnalysis
     * const ResumeAnalysis = await prisma.resumeAnalysis.create({
     *   data: {
     *     // ... data to create a ResumeAnalysis
     *   }
     * })
     * 
     */
    create<T extends ResumeAnalysisCreateArgs>(args: SelectSubset<T, ResumeAnalysisCreateArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeAnalyses.
     * @param {ResumeAnalysisCreateManyArgs} args - Arguments to create many ResumeAnalyses.
     * @example
     * // Create many ResumeAnalyses
     * const resumeAnalysis = await prisma.resumeAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeAnalysisCreateManyArgs>(args?: SelectSubset<T, ResumeAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeAnalyses and returns the data saved in the database.
     * @param {ResumeAnalysisCreateManyAndReturnArgs} args - Arguments to create many ResumeAnalyses.
     * @example
     * // Create many ResumeAnalyses
     * const resumeAnalysis = await prisma.resumeAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeAnalyses and only return the `id`
     * const resumeAnalysisWithIdOnly = await prisma.resumeAnalysis.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeAnalysis.
     * @param {ResumeAnalysisDeleteArgs} args - Arguments to delete one ResumeAnalysis.
     * @example
     * // Delete one ResumeAnalysis
     * const ResumeAnalysis = await prisma.resumeAnalysis.delete({
     *   where: {
     *     // ... filter to delete one ResumeAnalysis
     *   }
     * })
     * 
     */
    delete<T extends ResumeAnalysisDeleteArgs>(args: SelectSubset<T, ResumeAnalysisDeleteArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeAnalysis.
     * @param {ResumeAnalysisUpdateArgs} args - Arguments to update one ResumeAnalysis.
     * @example
     * // Update one ResumeAnalysis
     * const resumeAnalysis = await prisma.resumeAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeAnalysisUpdateArgs>(args: SelectSubset<T, ResumeAnalysisUpdateArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeAnalyses.
     * @param {ResumeAnalysisDeleteManyArgs} args - Arguments to filter ResumeAnalyses to delete.
     * @example
     * // Delete a few ResumeAnalyses
     * const { count } = await prisma.resumeAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeAnalysisDeleteManyArgs>(args?: SelectSubset<T, ResumeAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeAnalyses
     * const resumeAnalysis = await prisma.resumeAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeAnalysisUpdateManyArgs>(args: SelectSubset<T, ResumeAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeAnalyses and returns the data updated in the database.
     * @param {ResumeAnalysisUpdateManyAndReturnArgs} args - Arguments to update many ResumeAnalyses.
     * @example
     * // Update many ResumeAnalyses
     * const resumeAnalysis = await prisma.resumeAnalysis.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeAnalyses and only return the `id`
     * const resumeAnalysisWithIdOnly = await prisma.resumeAnalysis.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeAnalysisUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeAnalysisUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeAnalysis.
     * @param {ResumeAnalysisUpsertArgs} args - Arguments to update or create a ResumeAnalysis.
     * @example
     * // Update or create a ResumeAnalysis
     * const resumeAnalysis = await prisma.resumeAnalysis.upsert({
     *   create: {
     *     // ... data to create a ResumeAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends ResumeAnalysisUpsertArgs>(args: SelectSubset<T, ResumeAnalysisUpsertArgs<ExtArgs>>): Prisma__ResumeAnalysisClient<$Result.GetResult<Prisma.$ResumeAnalysisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAnalysisCountArgs} args - Arguments to filter ResumeAnalyses to count.
     * @example
     * // Count the number of ResumeAnalyses
     * const count = await prisma.resumeAnalysis.count({
     *   where: {
     *     // ... the filter for the ResumeAnalyses we want to count
     *   }
     * })
    **/
    count<T extends ResumeAnalysisCountArgs>(
      args?: Subset<T, ResumeAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeAnalysisAggregateArgs>(args: Subset<T, ResumeAnalysisAggregateArgs>): Prisma.PrismaPromise<GetResumeAnalysisAggregateType<T>>

    /**
     * Group by ResumeAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: ResumeAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeAnalysis model
   */
  readonly fields: ResumeAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UnifiedResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnifiedResumeDefaultArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeAnalysis model
   */
  interface ResumeAnalysisFieldRefs {
    readonly id: FieldRef<"ResumeAnalysis", 'String'>
    readonly resumeId: FieldRef<"ResumeAnalysis", 'String'>
    readonly jobDescription: FieldRef<"ResumeAnalysis", 'String'>
    readonly overallScore: FieldRef<"ResumeAnalysis", 'Int'>
    readonly keywordMatches: FieldRef<"ResumeAnalysis", 'Json'>
    readonly similarityScore: FieldRef<"ResumeAnalysis", 'Float'>
    readonly atsCompatibility: FieldRef<"ResumeAnalysis", 'Json'>
    readonly sectionScores: FieldRef<"ResumeAnalysis", 'Json'>
    readonly recommendations: FieldRef<"ResumeAnalysis", 'Json'>
    readonly insights: FieldRef<"ResumeAnalysis", 'Json'>
    readonly analysisVersion: FieldRef<"ResumeAnalysis", 'String'>
    readonly modelUsed: FieldRef<"ResumeAnalysis", 'String'>
    readonly processingTime: FieldRef<"ResumeAnalysis", 'Int'>
    readonly createdAt: FieldRef<"ResumeAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeAnalysis findUnique
   */
  export type ResumeAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAnalysis to fetch.
     */
    where: ResumeAnalysisWhereUniqueInput
  }

  /**
   * ResumeAnalysis findUniqueOrThrow
   */
  export type ResumeAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAnalysis to fetch.
     */
    where: ResumeAnalysisWhereUniqueInput
  }

  /**
   * ResumeAnalysis findFirst
   */
  export type ResumeAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAnalysis to fetch.
     */
    where?: ResumeAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAnalyses to fetch.
     */
    orderBy?: ResumeAnalysisOrderByWithRelationInput | ResumeAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeAnalyses.
     */
    cursor?: ResumeAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeAnalyses.
     */
    distinct?: ResumeAnalysisScalarFieldEnum | ResumeAnalysisScalarFieldEnum[]
  }

  /**
   * ResumeAnalysis findFirstOrThrow
   */
  export type ResumeAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAnalysis to fetch.
     */
    where?: ResumeAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAnalyses to fetch.
     */
    orderBy?: ResumeAnalysisOrderByWithRelationInput | ResumeAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeAnalyses.
     */
    cursor?: ResumeAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeAnalyses.
     */
    distinct?: ResumeAnalysisScalarFieldEnum | ResumeAnalysisScalarFieldEnum[]
  }

  /**
   * ResumeAnalysis findMany
   */
  export type ResumeAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which ResumeAnalyses to fetch.
     */
    where?: ResumeAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeAnalyses to fetch.
     */
    orderBy?: ResumeAnalysisOrderByWithRelationInput | ResumeAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeAnalyses.
     */
    cursor?: ResumeAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeAnalyses.
     */
    skip?: number
    distinct?: ResumeAnalysisScalarFieldEnum | ResumeAnalysisScalarFieldEnum[]
  }

  /**
   * ResumeAnalysis create
   */
  export type ResumeAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeAnalysis.
     */
    data: XOR<ResumeAnalysisCreateInput, ResumeAnalysisUncheckedCreateInput>
  }

  /**
   * ResumeAnalysis createMany
   */
  export type ResumeAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeAnalyses.
     */
    data: ResumeAnalysisCreateManyInput | ResumeAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeAnalysis createManyAndReturn
   */
  export type ResumeAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeAnalyses.
     */
    data: ResumeAnalysisCreateManyInput | ResumeAnalysisCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeAnalysis update
   */
  export type ResumeAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeAnalysis.
     */
    data: XOR<ResumeAnalysisUpdateInput, ResumeAnalysisUncheckedUpdateInput>
    /**
     * Choose, which ResumeAnalysis to update.
     */
    where: ResumeAnalysisWhereUniqueInput
  }

  /**
   * ResumeAnalysis updateMany
   */
  export type ResumeAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeAnalyses.
     */
    data: XOR<ResumeAnalysisUpdateManyMutationInput, ResumeAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which ResumeAnalyses to update
     */
    where?: ResumeAnalysisWhereInput
    /**
     * Limit how many ResumeAnalyses to update.
     */
    limit?: number
  }

  /**
   * ResumeAnalysis updateManyAndReturn
   */
  export type ResumeAnalysisUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * The data used to update ResumeAnalyses.
     */
    data: XOR<ResumeAnalysisUpdateManyMutationInput, ResumeAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which ResumeAnalyses to update
     */
    where?: ResumeAnalysisWhereInput
    /**
     * Limit how many ResumeAnalyses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeAnalysis upsert
   */
  export type ResumeAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeAnalysis to update in case it exists.
     */
    where: ResumeAnalysisWhereUniqueInput
    /**
     * In case the ResumeAnalysis found by the `where` argument doesn't exist, create a new ResumeAnalysis with this data.
     */
    create: XOR<ResumeAnalysisCreateInput, ResumeAnalysisUncheckedCreateInput>
    /**
     * In case the ResumeAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeAnalysisUpdateInput, ResumeAnalysisUncheckedUpdateInput>
  }

  /**
   * ResumeAnalysis delete
   */
  export type ResumeAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
    /**
     * Filter which ResumeAnalysis to delete.
     */
    where: ResumeAnalysisWhereUniqueInput
  }

  /**
   * ResumeAnalysis deleteMany
   */
  export type ResumeAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeAnalyses to delete
     */
    where?: ResumeAnalysisWhereInput
    /**
     * Limit how many ResumeAnalyses to delete.
     */
    limit?: number
  }

  /**
   * ResumeAnalysis without action
   */
  export type ResumeAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeAnalysis
     */
    select?: ResumeAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeAnalysis
     */
    omit?: ResumeAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeAnalysisInclude<ExtArgs> | null
  }


  /**
   * Model ResumeShare
   */

  export type AggregateResumeShare = {
    _count: ResumeShareCountAggregateOutputType | null
    _avg: ResumeShareAvgAggregateOutputType | null
    _sum: ResumeShareSumAggregateOutputType | null
    _min: ResumeShareMinAggregateOutputType | null
    _max: ResumeShareMaxAggregateOutputType | null
  }

  export type ResumeShareAvgAggregateOutputType = {
    viewCount: number | null
  }

  export type ResumeShareSumAggregateOutputType = {
    viewCount: number | null
  }

  export type ResumeShareMinAggregateOutputType = {
    id: string | null
    resumeId: string | null
    shareToken: string | null
    isPublic: boolean | null
    password: string | null
    expiresAt: Date | null
    viewCount: number | null
    lastViewed: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResumeShareMaxAggregateOutputType = {
    id: string | null
    resumeId: string | null
    shareToken: string | null
    isPublic: boolean | null
    password: string | null
    expiresAt: Date | null
    viewCount: number | null
    lastViewed: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResumeShareCountAggregateOutputType = {
    id: number
    resumeId: number
    shareToken: number
    isPublic: number
    password: number
    expiresAt: number
    viewCount: number
    lastViewed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResumeShareAvgAggregateInputType = {
    viewCount?: true
  }

  export type ResumeShareSumAggregateInputType = {
    viewCount?: true
  }

  export type ResumeShareMinAggregateInputType = {
    id?: true
    resumeId?: true
    shareToken?: true
    isPublic?: true
    password?: true
    expiresAt?: true
    viewCount?: true
    lastViewed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResumeShareMaxAggregateInputType = {
    id?: true
    resumeId?: true
    shareToken?: true
    isPublic?: true
    password?: true
    expiresAt?: true
    viewCount?: true
    lastViewed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResumeShareCountAggregateInputType = {
    id?: true
    resumeId?: true
    shareToken?: true
    isPublic?: true
    password?: true
    expiresAt?: true
    viewCount?: true
    lastViewed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResumeShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeShare to aggregate.
     */
    where?: ResumeShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeShares to fetch.
     */
    orderBy?: ResumeShareOrderByWithRelationInput | ResumeShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeShares
    **/
    _count?: true | ResumeShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeShareMaxAggregateInputType
  }

  export type GetResumeShareAggregateType<T extends ResumeShareAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeShare[P]>
      : GetScalarType<T[P], AggregateResumeShare[P]>
  }




  export type ResumeShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeShareWhereInput
    orderBy?: ResumeShareOrderByWithAggregationInput | ResumeShareOrderByWithAggregationInput[]
    by: ResumeShareScalarFieldEnum[] | ResumeShareScalarFieldEnum
    having?: ResumeShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeShareCountAggregateInputType | true
    _avg?: ResumeShareAvgAggregateInputType
    _sum?: ResumeShareSumAggregateInputType
    _min?: ResumeShareMinAggregateInputType
    _max?: ResumeShareMaxAggregateInputType
  }

  export type ResumeShareGroupByOutputType = {
    id: string
    resumeId: string
    shareToken: string
    isPublic: boolean
    password: string | null
    expiresAt: Date | null
    viewCount: number
    lastViewed: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ResumeShareCountAggregateOutputType | null
    _avg: ResumeShareAvgAggregateOutputType | null
    _sum: ResumeShareSumAggregateOutputType | null
    _min: ResumeShareMinAggregateOutputType | null
    _max: ResumeShareMaxAggregateOutputType | null
  }

  type GetResumeShareGroupByPayload<T extends ResumeShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeShareGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeShareGroupByOutputType[P]>
        }
      >
    >


  export type ResumeShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    shareToken?: boolean
    isPublic?: boolean
    password?: boolean
    expiresAt?: boolean
    viewCount?: boolean
    lastViewed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
    views?: boolean | ResumeShare$viewsArgs<ExtArgs>
    _count?: boolean | ResumeShareCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeShare"]>

  export type ResumeShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    shareToken?: boolean
    isPublic?: boolean
    password?: boolean
    expiresAt?: boolean
    viewCount?: boolean
    lastViewed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeShare"]>

  export type ResumeShareSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    resumeId?: boolean
    shareToken?: boolean
    isPublic?: boolean
    password?: boolean
    expiresAt?: boolean
    viewCount?: boolean
    lastViewed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["resumeShare"]>

  export type ResumeShareSelectScalar = {
    id?: boolean
    resumeId?: boolean
    shareToken?: boolean
    isPublic?: boolean
    password?: boolean
    expiresAt?: boolean
    viewCount?: boolean
    lastViewed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ResumeShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "resumeId" | "shareToken" | "isPublic" | "password" | "expiresAt" | "viewCount" | "lastViewed" | "createdAt" | "updatedAt", ExtArgs["result"]["resumeShare"]>
  export type ResumeShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
    views?: boolean | ResumeShare$viewsArgs<ExtArgs>
    _count?: boolean | ResumeShareCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ResumeShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }
  export type ResumeShareIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    resume?: boolean | UnifiedResumeDefaultArgs<ExtArgs>
  }

  export type $ResumeSharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeShare"
    objects: {
      resume: Prisma.$UnifiedResumePayload<ExtArgs>
      views: Prisma.$ShareViewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      resumeId: string
      shareToken: string
      isPublic: boolean
      password: string | null
      expiresAt: Date | null
      viewCount: number
      lastViewed: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["resumeShare"]>
    composites: {}
  }

  type ResumeShareGetPayload<S extends boolean | null | undefined | ResumeShareDefaultArgs> = $Result.GetResult<Prisma.$ResumeSharePayload, S>

  type ResumeShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeShareCountAggregateInputType | true
    }

  export interface ResumeShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeShare'], meta: { name: 'ResumeShare' } }
    /**
     * Find zero or one ResumeShare that matches the filter.
     * @param {ResumeShareFindUniqueArgs} args - Arguments to find a ResumeShare
     * @example
     * // Get one ResumeShare
     * const resumeShare = await prisma.resumeShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeShareFindUniqueArgs>(args: SelectSubset<T, ResumeShareFindUniqueArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeShare that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeShareFindUniqueOrThrowArgs} args - Arguments to find a ResumeShare
     * @example
     * // Get one ResumeShare
     * const resumeShare = await prisma.resumeShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeShareFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeShareFindFirstArgs} args - Arguments to find a ResumeShare
     * @example
     * // Get one ResumeShare
     * const resumeShare = await prisma.resumeShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeShareFindFirstArgs>(args?: SelectSubset<T, ResumeShareFindFirstArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeShareFindFirstOrThrowArgs} args - Arguments to find a ResumeShare
     * @example
     * // Get one ResumeShare
     * const resumeShare = await prisma.resumeShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeShareFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeShares
     * const resumeShares = await prisma.resumeShare.findMany()
     * 
     * // Get first 10 ResumeShares
     * const resumeShares = await prisma.resumeShare.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeShareWithIdOnly = await prisma.resumeShare.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeShareFindManyArgs>(args?: SelectSubset<T, ResumeShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeShare.
     * @param {ResumeShareCreateArgs} args - Arguments to create a ResumeShare.
     * @example
     * // Create one ResumeShare
     * const ResumeShare = await prisma.resumeShare.create({
     *   data: {
     *     // ... data to create a ResumeShare
     *   }
     * })
     * 
     */
    create<T extends ResumeShareCreateArgs>(args: SelectSubset<T, ResumeShareCreateArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeShares.
     * @param {ResumeShareCreateManyArgs} args - Arguments to create many ResumeShares.
     * @example
     * // Create many ResumeShares
     * const resumeShare = await prisma.resumeShare.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeShareCreateManyArgs>(args?: SelectSubset<T, ResumeShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeShares and returns the data saved in the database.
     * @param {ResumeShareCreateManyAndReturnArgs} args - Arguments to create many ResumeShares.
     * @example
     * // Create many ResumeShares
     * const resumeShare = await prisma.resumeShare.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeShares and only return the `id`
     * const resumeShareWithIdOnly = await prisma.resumeShare.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeShareCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeShare.
     * @param {ResumeShareDeleteArgs} args - Arguments to delete one ResumeShare.
     * @example
     * // Delete one ResumeShare
     * const ResumeShare = await prisma.resumeShare.delete({
     *   where: {
     *     // ... filter to delete one ResumeShare
     *   }
     * })
     * 
     */
    delete<T extends ResumeShareDeleteArgs>(args: SelectSubset<T, ResumeShareDeleteArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeShare.
     * @param {ResumeShareUpdateArgs} args - Arguments to update one ResumeShare.
     * @example
     * // Update one ResumeShare
     * const resumeShare = await prisma.resumeShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeShareUpdateArgs>(args: SelectSubset<T, ResumeShareUpdateArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeShares.
     * @param {ResumeShareDeleteManyArgs} args - Arguments to filter ResumeShares to delete.
     * @example
     * // Delete a few ResumeShares
     * const { count } = await prisma.resumeShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeShareDeleteManyArgs>(args?: SelectSubset<T, ResumeShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeShares
     * const resumeShare = await prisma.resumeShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeShareUpdateManyArgs>(args: SelectSubset<T, ResumeShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeShares and returns the data updated in the database.
     * @param {ResumeShareUpdateManyAndReturnArgs} args - Arguments to update many ResumeShares.
     * @example
     * // Update many ResumeShares
     * const resumeShare = await prisma.resumeShare.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeShares and only return the `id`
     * const resumeShareWithIdOnly = await prisma.resumeShare.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeShareUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeShare.
     * @param {ResumeShareUpsertArgs} args - Arguments to update or create a ResumeShare.
     * @example
     * // Update or create a ResumeShare
     * const resumeShare = await prisma.resumeShare.upsert({
     *   create: {
     *     // ... data to create a ResumeShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeShare we want to update
     *   }
     * })
     */
    upsert<T extends ResumeShareUpsertArgs>(args: SelectSubset<T, ResumeShareUpsertArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeShareCountArgs} args - Arguments to filter ResumeShares to count.
     * @example
     * // Count the number of ResumeShares
     * const count = await prisma.resumeShare.count({
     *   where: {
     *     // ... the filter for the ResumeShares we want to count
     *   }
     * })
    **/
    count<T extends ResumeShareCountArgs>(
      args?: Subset<T, ResumeShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeShareAggregateArgs>(args: Subset<T, ResumeShareAggregateArgs>): Prisma.PrismaPromise<GetResumeShareAggregateType<T>>

    /**
     * Group by ResumeShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeShareGroupByArgs['orderBy'] }
        : { orderBy?: ResumeShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeShare model
   */
  readonly fields: ResumeShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    resume<T extends UnifiedResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UnifiedResumeDefaultArgs<ExtArgs>>): Prisma__UnifiedResumeClient<$Result.GetResult<Prisma.$UnifiedResumePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    views<T extends ResumeShare$viewsArgs<ExtArgs> = {}>(args?: Subset<T, ResumeShare$viewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeShare model
   */
  interface ResumeShareFieldRefs {
    readonly id: FieldRef<"ResumeShare", 'String'>
    readonly resumeId: FieldRef<"ResumeShare", 'String'>
    readonly shareToken: FieldRef<"ResumeShare", 'String'>
    readonly isPublic: FieldRef<"ResumeShare", 'Boolean'>
    readonly password: FieldRef<"ResumeShare", 'String'>
    readonly expiresAt: FieldRef<"ResumeShare", 'DateTime'>
    readonly viewCount: FieldRef<"ResumeShare", 'Int'>
    readonly lastViewed: FieldRef<"ResumeShare", 'DateTime'>
    readonly createdAt: FieldRef<"ResumeShare", 'DateTime'>
    readonly updatedAt: FieldRef<"ResumeShare", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeShare findUnique
   */
  export type ResumeShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * Filter, which ResumeShare to fetch.
     */
    where: ResumeShareWhereUniqueInput
  }

  /**
   * ResumeShare findUniqueOrThrow
   */
  export type ResumeShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * Filter, which ResumeShare to fetch.
     */
    where: ResumeShareWhereUniqueInput
  }

  /**
   * ResumeShare findFirst
   */
  export type ResumeShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * Filter, which ResumeShare to fetch.
     */
    where?: ResumeShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeShares to fetch.
     */
    orderBy?: ResumeShareOrderByWithRelationInput | ResumeShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeShares.
     */
    cursor?: ResumeShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeShares.
     */
    distinct?: ResumeShareScalarFieldEnum | ResumeShareScalarFieldEnum[]
  }

  /**
   * ResumeShare findFirstOrThrow
   */
  export type ResumeShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * Filter, which ResumeShare to fetch.
     */
    where?: ResumeShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeShares to fetch.
     */
    orderBy?: ResumeShareOrderByWithRelationInput | ResumeShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeShares.
     */
    cursor?: ResumeShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeShares.
     */
    distinct?: ResumeShareScalarFieldEnum | ResumeShareScalarFieldEnum[]
  }

  /**
   * ResumeShare findMany
   */
  export type ResumeShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * Filter, which ResumeShares to fetch.
     */
    where?: ResumeShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeShares to fetch.
     */
    orderBy?: ResumeShareOrderByWithRelationInput | ResumeShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeShares.
     */
    cursor?: ResumeShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeShares.
     */
    skip?: number
    distinct?: ResumeShareScalarFieldEnum | ResumeShareScalarFieldEnum[]
  }

  /**
   * ResumeShare create
   */
  export type ResumeShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * The data needed to create a ResumeShare.
     */
    data: XOR<ResumeShareCreateInput, ResumeShareUncheckedCreateInput>
  }

  /**
   * ResumeShare createMany
   */
  export type ResumeShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeShares.
     */
    data: ResumeShareCreateManyInput | ResumeShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeShare createManyAndReturn
   */
  export type ResumeShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeShares.
     */
    data: ResumeShareCreateManyInput | ResumeShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeShare update
   */
  export type ResumeShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * The data needed to update a ResumeShare.
     */
    data: XOR<ResumeShareUpdateInput, ResumeShareUncheckedUpdateInput>
    /**
     * Choose, which ResumeShare to update.
     */
    where: ResumeShareWhereUniqueInput
  }

  /**
   * ResumeShare updateMany
   */
  export type ResumeShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeShares.
     */
    data: XOR<ResumeShareUpdateManyMutationInput, ResumeShareUncheckedUpdateManyInput>
    /**
     * Filter which ResumeShares to update
     */
    where?: ResumeShareWhereInput
    /**
     * Limit how many ResumeShares to update.
     */
    limit?: number
  }

  /**
   * ResumeShare updateManyAndReturn
   */
  export type ResumeShareUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * The data used to update ResumeShares.
     */
    data: XOR<ResumeShareUpdateManyMutationInput, ResumeShareUncheckedUpdateManyInput>
    /**
     * Filter which ResumeShares to update
     */
    where?: ResumeShareWhereInput
    /**
     * Limit how many ResumeShares to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResumeShare upsert
   */
  export type ResumeShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * The filter to search for the ResumeShare to update in case it exists.
     */
    where: ResumeShareWhereUniqueInput
    /**
     * In case the ResumeShare found by the `where` argument doesn't exist, create a new ResumeShare with this data.
     */
    create: XOR<ResumeShareCreateInput, ResumeShareUncheckedCreateInput>
    /**
     * In case the ResumeShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeShareUpdateInput, ResumeShareUncheckedUpdateInput>
  }

  /**
   * ResumeShare delete
   */
  export type ResumeShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
    /**
     * Filter which ResumeShare to delete.
     */
    where: ResumeShareWhereUniqueInput
  }

  /**
   * ResumeShare deleteMany
   */
  export type ResumeShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeShares to delete
     */
    where?: ResumeShareWhereInput
    /**
     * Limit how many ResumeShares to delete.
     */
    limit?: number
  }

  /**
   * ResumeShare.views
   */
  export type ResumeShare$viewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    where?: ShareViewWhereInput
    orderBy?: ShareViewOrderByWithRelationInput | ShareViewOrderByWithRelationInput[]
    cursor?: ShareViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareViewScalarFieldEnum | ShareViewScalarFieldEnum[]
  }

  /**
   * ResumeShare without action
   */
  export type ResumeShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeShare
     */
    select?: ResumeShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeShare
     */
    omit?: ResumeShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResumeShareInclude<ExtArgs> | null
  }


  /**
   * Model ShareView
   */

  export type AggregateShareView = {
    _count: ShareViewCountAggregateOutputType | null
    _min: ShareViewMinAggregateOutputType | null
    _max: ShareViewMaxAggregateOutputType | null
  }

  export type ShareViewMinAggregateOutputType = {
    id: string | null
    shareId: string | null
    ipAddress: string | null
    userAgent: string | null
    referer: string | null
    country: string | null
    viewedAt: Date | null
  }

  export type ShareViewMaxAggregateOutputType = {
    id: string | null
    shareId: string | null
    ipAddress: string | null
    userAgent: string | null
    referer: string | null
    country: string | null
    viewedAt: Date | null
  }

  export type ShareViewCountAggregateOutputType = {
    id: number
    shareId: number
    ipAddress: number
    userAgent: number
    referer: number
    country: number
    viewedAt: number
    _all: number
  }


  export type ShareViewMinAggregateInputType = {
    id?: true
    shareId?: true
    ipAddress?: true
    userAgent?: true
    referer?: true
    country?: true
    viewedAt?: true
  }

  export type ShareViewMaxAggregateInputType = {
    id?: true
    shareId?: true
    ipAddress?: true
    userAgent?: true
    referer?: true
    country?: true
    viewedAt?: true
  }

  export type ShareViewCountAggregateInputType = {
    id?: true
    shareId?: true
    ipAddress?: true
    userAgent?: true
    referer?: true
    country?: true
    viewedAt?: true
    _all?: true
  }

  export type ShareViewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareView to aggregate.
     */
    where?: ShareViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareViews to fetch.
     */
    orderBy?: ShareViewOrderByWithRelationInput | ShareViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareViews
    **/
    _count?: true | ShareViewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareViewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareViewMaxAggregateInputType
  }

  export type GetShareViewAggregateType<T extends ShareViewAggregateArgs> = {
        [P in keyof T & keyof AggregateShareView]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareView[P]>
      : GetScalarType<T[P], AggregateShareView[P]>
  }




  export type ShareViewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareViewWhereInput
    orderBy?: ShareViewOrderByWithAggregationInput | ShareViewOrderByWithAggregationInput[]
    by: ShareViewScalarFieldEnum[] | ShareViewScalarFieldEnum
    having?: ShareViewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareViewCountAggregateInputType | true
    _min?: ShareViewMinAggregateInputType
    _max?: ShareViewMaxAggregateInputType
  }

  export type ShareViewGroupByOutputType = {
    id: string
    shareId: string
    ipAddress: string | null
    userAgent: string | null
    referer: string | null
    country: string | null
    viewedAt: Date
    _count: ShareViewCountAggregateOutputType | null
    _min: ShareViewMinAggregateOutputType | null
    _max: ShareViewMaxAggregateOutputType | null
  }

  type GetShareViewGroupByPayload<T extends ShareViewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareViewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareViewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareViewGroupByOutputType[P]>
            : GetScalarType<T[P], ShareViewGroupByOutputType[P]>
        }
      >
    >


  export type ShareViewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    referer?: boolean
    country?: boolean
    viewedAt?: boolean
    share?: boolean | ResumeShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareView"]>

  export type ShareViewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    referer?: boolean
    country?: boolean
    viewedAt?: boolean
    share?: boolean | ResumeShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareView"]>

  export type ShareViewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    referer?: boolean
    country?: boolean
    viewedAt?: boolean
    share?: boolean | ResumeShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareView"]>

  export type ShareViewSelectScalar = {
    id?: boolean
    shareId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    referer?: boolean
    country?: boolean
    viewedAt?: boolean
  }

  export type ShareViewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shareId" | "ipAddress" | "userAgent" | "referer" | "country" | "viewedAt", ExtArgs["result"]["shareView"]>
  export type ShareViewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ResumeShareDefaultArgs<ExtArgs>
  }
  export type ShareViewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ResumeShareDefaultArgs<ExtArgs>
  }
  export type ShareViewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ResumeShareDefaultArgs<ExtArgs>
  }

  export type $ShareViewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareView"
    objects: {
      share: Prisma.$ResumeSharePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shareId: string
      ipAddress: string | null
      userAgent: string | null
      referer: string | null
      country: string | null
      viewedAt: Date
    }, ExtArgs["result"]["shareView"]>
    composites: {}
  }

  type ShareViewGetPayload<S extends boolean | null | undefined | ShareViewDefaultArgs> = $Result.GetResult<Prisma.$ShareViewPayload, S>

  type ShareViewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShareViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShareViewCountAggregateInputType | true
    }

  export interface ShareViewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareView'], meta: { name: 'ShareView' } }
    /**
     * Find zero or one ShareView that matches the filter.
     * @param {ShareViewFindUniqueArgs} args - Arguments to find a ShareView
     * @example
     * // Get one ShareView
     * const shareView = await prisma.shareView.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareViewFindUniqueArgs>(args: SelectSubset<T, ShareViewFindUniqueArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShareView that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareViewFindUniqueOrThrowArgs} args - Arguments to find a ShareView
     * @example
     * // Get one ShareView
     * const shareView = await prisma.shareView.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareViewFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareView that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareViewFindFirstArgs} args - Arguments to find a ShareView
     * @example
     * // Get one ShareView
     * const shareView = await prisma.shareView.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareViewFindFirstArgs>(args?: SelectSubset<T, ShareViewFindFirstArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareView that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareViewFindFirstOrThrowArgs} args - Arguments to find a ShareView
     * @example
     * // Get one ShareView
     * const shareView = await prisma.shareView.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareViewFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareViewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShareViews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareViewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareViews
     * const shareViews = await prisma.shareView.findMany()
     * 
     * // Get first 10 ShareViews
     * const shareViews = await prisma.shareView.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareViewWithIdOnly = await prisma.shareView.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareViewFindManyArgs>(args?: SelectSubset<T, ShareViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShareView.
     * @param {ShareViewCreateArgs} args - Arguments to create a ShareView.
     * @example
     * // Create one ShareView
     * const ShareView = await prisma.shareView.create({
     *   data: {
     *     // ... data to create a ShareView
     *   }
     * })
     * 
     */
    create<T extends ShareViewCreateArgs>(args: SelectSubset<T, ShareViewCreateArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShareViews.
     * @param {ShareViewCreateManyArgs} args - Arguments to create many ShareViews.
     * @example
     * // Create many ShareViews
     * const shareView = await prisma.shareView.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareViewCreateManyArgs>(args?: SelectSubset<T, ShareViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShareViews and returns the data saved in the database.
     * @param {ShareViewCreateManyAndReturnArgs} args - Arguments to create many ShareViews.
     * @example
     * // Create many ShareViews
     * const shareView = await prisma.shareView.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShareViews and only return the `id`
     * const shareViewWithIdOnly = await prisma.shareView.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShareViewCreateManyAndReturnArgs>(args?: SelectSubset<T, ShareViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShareView.
     * @param {ShareViewDeleteArgs} args - Arguments to delete one ShareView.
     * @example
     * // Delete one ShareView
     * const ShareView = await prisma.shareView.delete({
     *   where: {
     *     // ... filter to delete one ShareView
     *   }
     * })
     * 
     */
    delete<T extends ShareViewDeleteArgs>(args: SelectSubset<T, ShareViewDeleteArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShareView.
     * @param {ShareViewUpdateArgs} args - Arguments to update one ShareView.
     * @example
     * // Update one ShareView
     * const shareView = await prisma.shareView.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareViewUpdateArgs>(args: SelectSubset<T, ShareViewUpdateArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShareViews.
     * @param {ShareViewDeleteManyArgs} args - Arguments to filter ShareViews to delete.
     * @example
     * // Delete a few ShareViews
     * const { count } = await prisma.shareView.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareViewDeleteManyArgs>(args?: SelectSubset<T, ShareViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareViewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareViews
     * const shareView = await prisma.shareView.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareViewUpdateManyArgs>(args: SelectSubset<T, ShareViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareViews and returns the data updated in the database.
     * @param {ShareViewUpdateManyAndReturnArgs} args - Arguments to update many ShareViews.
     * @example
     * // Update many ShareViews
     * const shareView = await prisma.shareView.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShareViews and only return the `id`
     * const shareViewWithIdOnly = await prisma.shareView.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShareViewUpdateManyAndReturnArgs>(args: SelectSubset<T, ShareViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShareView.
     * @param {ShareViewUpsertArgs} args - Arguments to update or create a ShareView.
     * @example
     * // Update or create a ShareView
     * const shareView = await prisma.shareView.upsert({
     *   create: {
     *     // ... data to create a ShareView
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareView we want to update
     *   }
     * })
     */
    upsert<T extends ShareViewUpsertArgs>(args: SelectSubset<T, ShareViewUpsertArgs<ExtArgs>>): Prisma__ShareViewClient<$Result.GetResult<Prisma.$ShareViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShareViews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareViewCountArgs} args - Arguments to filter ShareViews to count.
     * @example
     * // Count the number of ShareViews
     * const count = await prisma.shareView.count({
     *   where: {
     *     // ... the filter for the ShareViews we want to count
     *   }
     * })
    **/
    count<T extends ShareViewCountArgs>(
      args?: Subset<T, ShareViewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareViewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareViewAggregateArgs>(args: Subset<T, ShareViewAggregateArgs>): Prisma.PrismaPromise<GetShareViewAggregateType<T>>

    /**
     * Group by ShareView.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareViewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareViewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareViewGroupByArgs['orderBy'] }
        : { orderBy?: ShareViewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareView model
   */
  readonly fields: ShareViewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareView.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareViewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    share<T extends ResumeShareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResumeShareDefaultArgs<ExtArgs>>): Prisma__ResumeShareClient<$Result.GetResult<Prisma.$ResumeSharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareView model
   */
  interface ShareViewFieldRefs {
    readonly id: FieldRef<"ShareView", 'String'>
    readonly shareId: FieldRef<"ShareView", 'String'>
    readonly ipAddress: FieldRef<"ShareView", 'String'>
    readonly userAgent: FieldRef<"ShareView", 'String'>
    readonly referer: FieldRef<"ShareView", 'String'>
    readonly country: FieldRef<"ShareView", 'String'>
    readonly viewedAt: FieldRef<"ShareView", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShareView findUnique
   */
  export type ShareViewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * Filter, which ShareView to fetch.
     */
    where: ShareViewWhereUniqueInput
  }

  /**
   * ShareView findUniqueOrThrow
   */
  export type ShareViewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * Filter, which ShareView to fetch.
     */
    where: ShareViewWhereUniqueInput
  }

  /**
   * ShareView findFirst
   */
  export type ShareViewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * Filter, which ShareView to fetch.
     */
    where?: ShareViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareViews to fetch.
     */
    orderBy?: ShareViewOrderByWithRelationInput | ShareViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareViews.
     */
    cursor?: ShareViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareViews.
     */
    distinct?: ShareViewScalarFieldEnum | ShareViewScalarFieldEnum[]
  }

  /**
   * ShareView findFirstOrThrow
   */
  export type ShareViewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * Filter, which ShareView to fetch.
     */
    where?: ShareViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareViews to fetch.
     */
    orderBy?: ShareViewOrderByWithRelationInput | ShareViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareViews.
     */
    cursor?: ShareViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareViews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareViews.
     */
    distinct?: ShareViewScalarFieldEnum | ShareViewScalarFieldEnum[]
  }

  /**
   * ShareView findMany
   */
  export type ShareViewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * Filter, which ShareViews to fetch.
     */
    where?: ShareViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareViews to fetch.
     */
    orderBy?: ShareViewOrderByWithRelationInput | ShareViewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareViews.
     */
    cursor?: ShareViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareViews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareViews.
     */
    skip?: number
    distinct?: ShareViewScalarFieldEnum | ShareViewScalarFieldEnum[]
  }

  /**
   * ShareView create
   */
  export type ShareViewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareView.
     */
    data: XOR<ShareViewCreateInput, ShareViewUncheckedCreateInput>
  }

  /**
   * ShareView createMany
   */
  export type ShareViewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareViews.
     */
    data: ShareViewCreateManyInput | ShareViewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareView createManyAndReturn
   */
  export type ShareViewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * The data used to create many ShareViews.
     */
    data: ShareViewCreateManyInput | ShareViewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareView update
   */
  export type ShareViewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareView.
     */
    data: XOR<ShareViewUpdateInput, ShareViewUncheckedUpdateInput>
    /**
     * Choose, which ShareView to update.
     */
    where: ShareViewWhereUniqueInput
  }

  /**
   * ShareView updateMany
   */
  export type ShareViewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareViews.
     */
    data: XOR<ShareViewUpdateManyMutationInput, ShareViewUncheckedUpdateManyInput>
    /**
     * Filter which ShareViews to update
     */
    where?: ShareViewWhereInput
    /**
     * Limit how many ShareViews to update.
     */
    limit?: number
  }

  /**
   * ShareView updateManyAndReturn
   */
  export type ShareViewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * The data used to update ShareViews.
     */
    data: XOR<ShareViewUpdateManyMutationInput, ShareViewUncheckedUpdateManyInput>
    /**
     * Filter which ShareViews to update
     */
    where?: ShareViewWhereInput
    /**
     * Limit how many ShareViews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareView upsert
   */
  export type ShareViewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareView to update in case it exists.
     */
    where: ShareViewWhereUniqueInput
    /**
     * In case the ShareView found by the `where` argument doesn't exist, create a new ShareView with this data.
     */
    create: XOR<ShareViewCreateInput, ShareViewUncheckedCreateInput>
    /**
     * In case the ShareView was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareViewUpdateInput, ShareViewUncheckedUpdateInput>
  }

  /**
   * ShareView delete
   */
  export type ShareViewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
    /**
     * Filter which ShareView to delete.
     */
    where: ShareViewWhereUniqueInput
  }

  /**
   * ShareView deleteMany
   */
  export type ShareViewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareViews to delete
     */
    where?: ShareViewWhereInput
    /**
     * Limit how many ShareViews to delete.
     */
    limit?: number
  }

  /**
   * ShareView without action
   */
  export type ShareViewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareView
     */
    select?: ShareViewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareView
     */
    omit?: ShareViewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareViewInclude<ExtArgs> | null
  }


  /**
   * Model ResumeTemplate
   */

  export type AggregateResumeTemplate = {
    _count: ResumeTemplateCountAggregateOutputType | null
    _avg: ResumeTemplateAvgAggregateOutputType | null
    _sum: ResumeTemplateSumAggregateOutputType | null
    _min: ResumeTemplateMinAggregateOutputType | null
    _max: ResumeTemplateMaxAggregateOutputType | null
  }

  export type ResumeTemplateAvgAggregateOutputType = {
    sortOrder: number | null
  }

  export type ResumeTemplateSumAggregateOutputType = {
    sortOrder: number | null
  }

  export type ResumeTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    isActive: boolean | null
    isPremium: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResumeTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    isActive: boolean | null
    isPremium: boolean | null
    sortOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResumeTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    structure: number
    sections: number
    isActive: number
    isPremium: number
    sortOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResumeTemplateAvgAggregateInputType = {
    sortOrder?: true
  }

  export type ResumeTemplateSumAggregateInputType = {
    sortOrder?: true
  }

  export type ResumeTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    isActive?: true
    isPremium?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResumeTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    isActive?: true
    isPremium?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResumeTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    structure?: true
    sections?: true
    isActive?: true
    isPremium?: true
    sortOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResumeTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeTemplate to aggregate.
     */
    where?: ResumeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeTemplates to fetch.
     */
    orderBy?: ResumeTemplateOrderByWithRelationInput | ResumeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeTemplates
    **/
    _count?: true | ResumeTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeTemplateMaxAggregateInputType
  }

  export type GetResumeTemplateAggregateType<T extends ResumeTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeTemplate[P]>
      : GetScalarType<T[P], AggregateResumeTemplate[P]>
  }




  export type ResumeTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeTemplateWhereInput
    orderBy?: ResumeTemplateOrderByWithAggregationInput | ResumeTemplateOrderByWithAggregationInput[]
    by: ResumeTemplateScalarFieldEnum[] | ResumeTemplateScalarFieldEnum
    having?: ResumeTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeTemplateCountAggregateInputType | true
    _avg?: ResumeTemplateAvgAggregateInputType
    _sum?: ResumeTemplateSumAggregateInputType
    _min?: ResumeTemplateMinAggregateInputType
    _max?: ResumeTemplateMaxAggregateInputType
  }

  export type ResumeTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string
    structure: JsonValue
    sections: JsonValue
    isActive: boolean
    isPremium: boolean
    sortOrder: number
    createdAt: Date
    updatedAt: Date
    _count: ResumeTemplateCountAggregateOutputType | null
    _avg: ResumeTemplateAvgAggregateOutputType | null
    _sum: ResumeTemplateSumAggregateOutputType | null
    _min: ResumeTemplateMinAggregateOutputType | null
    _max: ResumeTemplateMaxAggregateOutputType | null
  }

  type GetResumeTemplateGroupByPayload<T extends ResumeTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeTemplateGroupByOutputType[P]>
        }
      >
    >


  export type ResumeTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    structure?: boolean
    sections?: boolean
    isActive?: boolean
    isPremium?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["resumeTemplate"]>

  export type ResumeTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    structure?: boolean
    sections?: boolean
    isActive?: boolean
    isPremium?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["resumeTemplate"]>

  export type ResumeTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    structure?: boolean
    sections?: boolean
    isActive?: boolean
    isPremium?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["resumeTemplate"]>

  export type ResumeTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    structure?: boolean
    sections?: boolean
    isActive?: boolean
    isPremium?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ResumeTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "category" | "structure" | "sections" | "isActive" | "isPremium" | "sortOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["resumeTemplate"]>

  export type $ResumeTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResumeTemplate"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string
      structure: Prisma.JsonValue
      sections: Prisma.JsonValue
      isActive: boolean
      isPremium: boolean
      sortOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["resumeTemplate"]>
    composites: {}
  }

  type ResumeTemplateGetPayload<S extends boolean | null | undefined | ResumeTemplateDefaultArgs> = $Result.GetResult<Prisma.$ResumeTemplatePayload, S>

  type ResumeTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResumeTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResumeTemplateCountAggregateInputType | true
    }

  export interface ResumeTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResumeTemplate'], meta: { name: 'ResumeTemplate' } }
    /**
     * Find zero or one ResumeTemplate that matches the filter.
     * @param {ResumeTemplateFindUniqueArgs} args - Arguments to find a ResumeTemplate
     * @example
     * // Get one ResumeTemplate
     * const resumeTemplate = await prisma.resumeTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResumeTemplateFindUniqueArgs>(args: SelectSubset<T, ResumeTemplateFindUniqueArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResumeTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResumeTemplateFindUniqueOrThrowArgs} args - Arguments to find a ResumeTemplate
     * @example
     * // Get one ResumeTemplate
     * const resumeTemplate = await prisma.resumeTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResumeTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, ResumeTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeTemplateFindFirstArgs} args - Arguments to find a ResumeTemplate
     * @example
     * // Get one ResumeTemplate
     * const resumeTemplate = await prisma.resumeTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResumeTemplateFindFirstArgs>(args?: SelectSubset<T, ResumeTemplateFindFirstArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResumeTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeTemplateFindFirstOrThrowArgs} args - Arguments to find a ResumeTemplate
     * @example
     * // Get one ResumeTemplate
     * const resumeTemplate = await prisma.resumeTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResumeTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, ResumeTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResumeTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeTemplates
     * const resumeTemplates = await prisma.resumeTemplate.findMany()
     * 
     * // Get first 10 ResumeTemplates
     * const resumeTemplates = await prisma.resumeTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeTemplateWithIdOnly = await prisma.resumeTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResumeTemplateFindManyArgs>(args?: SelectSubset<T, ResumeTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResumeTemplate.
     * @param {ResumeTemplateCreateArgs} args - Arguments to create a ResumeTemplate.
     * @example
     * // Create one ResumeTemplate
     * const ResumeTemplate = await prisma.resumeTemplate.create({
     *   data: {
     *     // ... data to create a ResumeTemplate
     *   }
     * })
     * 
     */
    create<T extends ResumeTemplateCreateArgs>(args: SelectSubset<T, ResumeTemplateCreateArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResumeTemplates.
     * @param {ResumeTemplateCreateManyArgs} args - Arguments to create many ResumeTemplates.
     * @example
     * // Create many ResumeTemplates
     * const resumeTemplate = await prisma.resumeTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResumeTemplateCreateManyArgs>(args?: SelectSubset<T, ResumeTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResumeTemplates and returns the data saved in the database.
     * @param {ResumeTemplateCreateManyAndReturnArgs} args - Arguments to create many ResumeTemplates.
     * @example
     * // Create many ResumeTemplates
     * const resumeTemplate = await prisma.resumeTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResumeTemplates and only return the `id`
     * const resumeTemplateWithIdOnly = await prisma.resumeTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResumeTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, ResumeTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResumeTemplate.
     * @param {ResumeTemplateDeleteArgs} args - Arguments to delete one ResumeTemplate.
     * @example
     * // Delete one ResumeTemplate
     * const ResumeTemplate = await prisma.resumeTemplate.delete({
     *   where: {
     *     // ... filter to delete one ResumeTemplate
     *   }
     * })
     * 
     */
    delete<T extends ResumeTemplateDeleteArgs>(args: SelectSubset<T, ResumeTemplateDeleteArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResumeTemplate.
     * @param {ResumeTemplateUpdateArgs} args - Arguments to update one ResumeTemplate.
     * @example
     * // Update one ResumeTemplate
     * const resumeTemplate = await prisma.resumeTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResumeTemplateUpdateArgs>(args: SelectSubset<T, ResumeTemplateUpdateArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResumeTemplates.
     * @param {ResumeTemplateDeleteManyArgs} args - Arguments to filter ResumeTemplates to delete.
     * @example
     * // Delete a few ResumeTemplates
     * const { count } = await prisma.resumeTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResumeTemplateDeleteManyArgs>(args?: SelectSubset<T, ResumeTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeTemplates
     * const resumeTemplate = await prisma.resumeTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResumeTemplateUpdateManyArgs>(args: SelectSubset<T, ResumeTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeTemplates and returns the data updated in the database.
     * @param {ResumeTemplateUpdateManyAndReturnArgs} args - Arguments to update many ResumeTemplates.
     * @example
     * // Update many ResumeTemplates
     * const resumeTemplate = await prisma.resumeTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResumeTemplates and only return the `id`
     * const resumeTemplateWithIdOnly = await prisma.resumeTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResumeTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, ResumeTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResumeTemplate.
     * @param {ResumeTemplateUpsertArgs} args - Arguments to update or create a ResumeTemplate.
     * @example
     * // Update or create a ResumeTemplate
     * const resumeTemplate = await prisma.resumeTemplate.upsert({
     *   create: {
     *     // ... data to create a ResumeTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeTemplate we want to update
     *   }
     * })
     */
    upsert<T extends ResumeTemplateUpsertArgs>(args: SelectSubset<T, ResumeTemplateUpsertArgs<ExtArgs>>): Prisma__ResumeTemplateClient<$Result.GetResult<Prisma.$ResumeTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResumeTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeTemplateCountArgs} args - Arguments to filter ResumeTemplates to count.
     * @example
     * // Count the number of ResumeTemplates
     * const count = await prisma.resumeTemplate.count({
     *   where: {
     *     // ... the filter for the ResumeTemplates we want to count
     *   }
     * })
    **/
    count<T extends ResumeTemplateCountArgs>(
      args?: Subset<T, ResumeTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeTemplateAggregateArgs>(args: Subset<T, ResumeTemplateAggregateArgs>): Prisma.PrismaPromise<GetResumeTemplateAggregateType<T>>

    /**
     * Group by ResumeTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeTemplateGroupByArgs['orderBy'] }
        : { orderBy?: ResumeTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResumeTemplate model
   */
  readonly fields: ResumeTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResumeTemplate model
   */
  interface ResumeTemplateFieldRefs {
    readonly id: FieldRef<"ResumeTemplate", 'String'>
    readonly name: FieldRef<"ResumeTemplate", 'String'>
    readonly description: FieldRef<"ResumeTemplate", 'String'>
    readonly category: FieldRef<"ResumeTemplate", 'String'>
    readonly structure: FieldRef<"ResumeTemplate", 'Json'>
    readonly sections: FieldRef<"ResumeTemplate", 'Json'>
    readonly isActive: FieldRef<"ResumeTemplate", 'Boolean'>
    readonly isPremium: FieldRef<"ResumeTemplate", 'Boolean'>
    readonly sortOrder: FieldRef<"ResumeTemplate", 'Int'>
    readonly createdAt: FieldRef<"ResumeTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"ResumeTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ResumeTemplate findUnique
   */
  export type ResumeTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * Filter, which ResumeTemplate to fetch.
     */
    where: ResumeTemplateWhereUniqueInput
  }

  /**
   * ResumeTemplate findUniqueOrThrow
   */
  export type ResumeTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * Filter, which ResumeTemplate to fetch.
     */
    where: ResumeTemplateWhereUniqueInput
  }

  /**
   * ResumeTemplate findFirst
   */
  export type ResumeTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * Filter, which ResumeTemplate to fetch.
     */
    where?: ResumeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeTemplates to fetch.
     */
    orderBy?: ResumeTemplateOrderByWithRelationInput | ResumeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeTemplates.
     */
    cursor?: ResumeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeTemplates.
     */
    distinct?: ResumeTemplateScalarFieldEnum | ResumeTemplateScalarFieldEnum[]
  }

  /**
   * ResumeTemplate findFirstOrThrow
   */
  export type ResumeTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * Filter, which ResumeTemplate to fetch.
     */
    where?: ResumeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeTemplates to fetch.
     */
    orderBy?: ResumeTemplateOrderByWithRelationInput | ResumeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeTemplates.
     */
    cursor?: ResumeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeTemplates.
     */
    distinct?: ResumeTemplateScalarFieldEnum | ResumeTemplateScalarFieldEnum[]
  }

  /**
   * ResumeTemplate findMany
   */
  export type ResumeTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * Filter, which ResumeTemplates to fetch.
     */
    where?: ResumeTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeTemplates to fetch.
     */
    orderBy?: ResumeTemplateOrderByWithRelationInput | ResumeTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeTemplates.
     */
    cursor?: ResumeTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeTemplates.
     */
    skip?: number
    distinct?: ResumeTemplateScalarFieldEnum | ResumeTemplateScalarFieldEnum[]
  }

  /**
   * ResumeTemplate create
   */
  export type ResumeTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * The data needed to create a ResumeTemplate.
     */
    data: XOR<ResumeTemplateCreateInput, ResumeTemplateUncheckedCreateInput>
  }

  /**
   * ResumeTemplate createMany
   */
  export type ResumeTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResumeTemplates.
     */
    data: ResumeTemplateCreateManyInput | ResumeTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeTemplate createManyAndReturn
   */
  export type ResumeTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many ResumeTemplates.
     */
    data: ResumeTemplateCreateManyInput | ResumeTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResumeTemplate update
   */
  export type ResumeTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * The data needed to update a ResumeTemplate.
     */
    data: XOR<ResumeTemplateUpdateInput, ResumeTemplateUncheckedUpdateInput>
    /**
     * Choose, which ResumeTemplate to update.
     */
    where: ResumeTemplateWhereUniqueInput
  }

  /**
   * ResumeTemplate updateMany
   */
  export type ResumeTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResumeTemplates.
     */
    data: XOR<ResumeTemplateUpdateManyMutationInput, ResumeTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ResumeTemplates to update
     */
    where?: ResumeTemplateWhereInput
    /**
     * Limit how many ResumeTemplates to update.
     */
    limit?: number
  }

  /**
   * ResumeTemplate updateManyAndReturn
   */
  export type ResumeTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * The data used to update ResumeTemplates.
     */
    data: XOR<ResumeTemplateUpdateManyMutationInput, ResumeTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ResumeTemplates to update
     */
    where?: ResumeTemplateWhereInput
    /**
     * Limit how many ResumeTemplates to update.
     */
    limit?: number
  }

  /**
   * ResumeTemplate upsert
   */
  export type ResumeTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * The filter to search for the ResumeTemplate to update in case it exists.
     */
    where: ResumeTemplateWhereUniqueInput
    /**
     * In case the ResumeTemplate found by the `where` argument doesn't exist, create a new ResumeTemplate with this data.
     */
    create: XOR<ResumeTemplateCreateInput, ResumeTemplateUncheckedCreateInput>
    /**
     * In case the ResumeTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeTemplateUpdateInput, ResumeTemplateUncheckedUpdateInput>
  }

  /**
   * ResumeTemplate delete
   */
  export type ResumeTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
    /**
     * Filter which ResumeTemplate to delete.
     */
    where: ResumeTemplateWhereUniqueInput
  }

  /**
   * ResumeTemplate deleteMany
   */
  export type ResumeTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResumeTemplates to delete
     */
    where?: ResumeTemplateWhereInput
    /**
     * Limit how many ResumeTemplates to delete.
     */
    limit?: number
  }

  /**
   * ResumeTemplate without action
   */
  export type ResumeTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResumeTemplate
     */
    select?: ResumeTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResumeTemplate
     */
    omit?: ResumeTemplateOmit<ExtArgs> | null
  }


  /**
   * Model TemplateUsage
   */

  export type AggregateTemplateUsage = {
    _count: TemplateUsageCountAggregateOutputType | null
    _min: TemplateUsageMinAggregateOutputType | null
    _max: TemplateUsageMaxAggregateOutputType | null
  }

  export type TemplateUsageMinAggregateOutputType = {
    id: string | null
    templateId: string | null
    userId: string | null
    usedAt: Date | null
  }

  export type TemplateUsageMaxAggregateOutputType = {
    id: string | null
    templateId: string | null
    userId: string | null
    usedAt: Date | null
  }

  export type TemplateUsageCountAggregateOutputType = {
    id: number
    templateId: number
    userId: number
    usedAt: number
    _all: number
  }


  export type TemplateUsageMinAggregateInputType = {
    id?: true
    templateId?: true
    userId?: true
    usedAt?: true
  }

  export type TemplateUsageMaxAggregateInputType = {
    id?: true
    templateId?: true
    userId?: true
    usedAt?: true
  }

  export type TemplateUsageCountAggregateInputType = {
    id?: true
    templateId?: true
    userId?: true
    usedAt?: true
    _all?: true
  }

  export type TemplateUsageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateUsage to aggregate.
     */
    where?: TemplateUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateUsages to fetch.
     */
    orderBy?: TemplateUsageOrderByWithRelationInput | TemplateUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplateUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TemplateUsages
    **/
    _count?: true | TemplateUsageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateUsageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateUsageMaxAggregateInputType
  }

  export type GetTemplateUsageAggregateType<T extends TemplateUsageAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplateUsage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplateUsage[P]>
      : GetScalarType<T[P], AggregateTemplateUsage[P]>
  }




  export type TemplateUsageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateUsageWhereInput
    orderBy?: TemplateUsageOrderByWithAggregationInput | TemplateUsageOrderByWithAggregationInput[]
    by: TemplateUsageScalarFieldEnum[] | TemplateUsageScalarFieldEnum
    having?: TemplateUsageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateUsageCountAggregateInputType | true
    _min?: TemplateUsageMinAggregateInputType
    _max?: TemplateUsageMaxAggregateInputType
  }

  export type TemplateUsageGroupByOutputType = {
    id: string
    templateId: string
    userId: string
    usedAt: Date
    _count: TemplateUsageCountAggregateOutputType | null
    _min: TemplateUsageMinAggregateOutputType | null
    _max: TemplateUsageMaxAggregateOutputType | null
  }

  type GetTemplateUsageGroupByPayload<T extends TemplateUsageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplateUsageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateUsageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateUsageGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateUsageGroupByOutputType[P]>
        }
      >
    >


  export type TemplateUsageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    userId?: boolean
    usedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateUsage"]>

  export type TemplateUsageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    userId?: boolean
    usedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateUsage"]>

  export type TemplateUsageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    userId?: boolean
    usedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templateUsage"]>

  export type TemplateUsageSelectScalar = {
    id?: boolean
    templateId?: boolean
    userId?: boolean
    usedAt?: boolean
  }

  export type TemplateUsageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "templateId" | "userId" | "usedAt", ExtArgs["result"]["templateUsage"]>
  export type TemplateUsageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TemplateUsageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TemplateUsageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TemplateUsagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TemplateUsage"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      templateId: string
      userId: string
      usedAt: Date
    }, ExtArgs["result"]["templateUsage"]>
    composites: {}
  }

  type TemplateUsageGetPayload<S extends boolean | null | undefined | TemplateUsageDefaultArgs> = $Result.GetResult<Prisma.$TemplateUsagePayload, S>

  type TemplateUsageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TemplateUsageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TemplateUsageCountAggregateInputType | true
    }

  export interface TemplateUsageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TemplateUsage'], meta: { name: 'TemplateUsage' } }
    /**
     * Find zero or one TemplateUsage that matches the filter.
     * @param {TemplateUsageFindUniqueArgs} args - Arguments to find a TemplateUsage
     * @example
     * // Get one TemplateUsage
     * const templateUsage = await prisma.templateUsage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplateUsageFindUniqueArgs>(args: SelectSubset<T, TemplateUsageFindUniqueArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TemplateUsage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TemplateUsageFindUniqueOrThrowArgs} args - Arguments to find a TemplateUsage
     * @example
     * // Get one TemplateUsage
     * const templateUsage = await prisma.templateUsage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplateUsageFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplateUsageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TemplateUsage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUsageFindFirstArgs} args - Arguments to find a TemplateUsage
     * @example
     * // Get one TemplateUsage
     * const templateUsage = await prisma.templateUsage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplateUsageFindFirstArgs>(args?: SelectSubset<T, TemplateUsageFindFirstArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TemplateUsage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUsageFindFirstOrThrowArgs} args - Arguments to find a TemplateUsage
     * @example
     * // Get one TemplateUsage
     * const templateUsage = await prisma.templateUsage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplateUsageFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplateUsageFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TemplateUsages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUsageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TemplateUsages
     * const templateUsages = await prisma.templateUsage.findMany()
     * 
     * // Get first 10 TemplateUsages
     * const templateUsages = await prisma.templateUsage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateUsageWithIdOnly = await prisma.templateUsage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TemplateUsageFindManyArgs>(args?: SelectSubset<T, TemplateUsageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TemplateUsage.
     * @param {TemplateUsageCreateArgs} args - Arguments to create a TemplateUsage.
     * @example
     * // Create one TemplateUsage
     * const TemplateUsage = await prisma.templateUsage.create({
     *   data: {
     *     // ... data to create a TemplateUsage
     *   }
     * })
     * 
     */
    create<T extends TemplateUsageCreateArgs>(args: SelectSubset<T, TemplateUsageCreateArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TemplateUsages.
     * @param {TemplateUsageCreateManyArgs} args - Arguments to create many TemplateUsages.
     * @example
     * // Create many TemplateUsages
     * const templateUsage = await prisma.templateUsage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplateUsageCreateManyArgs>(args?: SelectSubset<T, TemplateUsageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TemplateUsages and returns the data saved in the database.
     * @param {TemplateUsageCreateManyAndReturnArgs} args - Arguments to create many TemplateUsages.
     * @example
     * // Create many TemplateUsages
     * const templateUsage = await prisma.templateUsage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TemplateUsages and only return the `id`
     * const templateUsageWithIdOnly = await prisma.templateUsage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplateUsageCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplateUsageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TemplateUsage.
     * @param {TemplateUsageDeleteArgs} args - Arguments to delete one TemplateUsage.
     * @example
     * // Delete one TemplateUsage
     * const TemplateUsage = await prisma.templateUsage.delete({
     *   where: {
     *     // ... filter to delete one TemplateUsage
     *   }
     * })
     * 
     */
    delete<T extends TemplateUsageDeleteArgs>(args: SelectSubset<T, TemplateUsageDeleteArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TemplateUsage.
     * @param {TemplateUsageUpdateArgs} args - Arguments to update one TemplateUsage.
     * @example
     * // Update one TemplateUsage
     * const templateUsage = await prisma.templateUsage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplateUsageUpdateArgs>(args: SelectSubset<T, TemplateUsageUpdateArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TemplateUsages.
     * @param {TemplateUsageDeleteManyArgs} args - Arguments to filter TemplateUsages to delete.
     * @example
     * // Delete a few TemplateUsages
     * const { count } = await prisma.templateUsage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplateUsageDeleteManyArgs>(args?: SelectSubset<T, TemplateUsageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TemplateUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUsageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TemplateUsages
     * const templateUsage = await prisma.templateUsage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplateUsageUpdateManyArgs>(args: SelectSubset<T, TemplateUsageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TemplateUsages and returns the data updated in the database.
     * @param {TemplateUsageUpdateManyAndReturnArgs} args - Arguments to update many TemplateUsages.
     * @example
     * // Update many TemplateUsages
     * const templateUsage = await prisma.templateUsage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TemplateUsages and only return the `id`
     * const templateUsageWithIdOnly = await prisma.templateUsage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TemplateUsageUpdateManyAndReturnArgs>(args: SelectSubset<T, TemplateUsageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TemplateUsage.
     * @param {TemplateUsageUpsertArgs} args - Arguments to update or create a TemplateUsage.
     * @example
     * // Update or create a TemplateUsage
     * const templateUsage = await prisma.templateUsage.upsert({
     *   create: {
     *     // ... data to create a TemplateUsage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TemplateUsage we want to update
     *   }
     * })
     */
    upsert<T extends TemplateUsageUpsertArgs>(args: SelectSubset<T, TemplateUsageUpsertArgs<ExtArgs>>): Prisma__TemplateUsageClient<$Result.GetResult<Prisma.$TemplateUsagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TemplateUsages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUsageCountArgs} args - Arguments to filter TemplateUsages to count.
     * @example
     * // Count the number of TemplateUsages
     * const count = await prisma.templateUsage.count({
     *   where: {
     *     // ... the filter for the TemplateUsages we want to count
     *   }
     * })
    **/
    count<T extends TemplateUsageCountArgs>(
      args?: Subset<T, TemplateUsageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateUsageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TemplateUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUsageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateUsageAggregateArgs>(args: Subset<T, TemplateUsageAggregateArgs>): Prisma.PrismaPromise<GetTemplateUsageAggregateType<T>>

    /**
     * Group by TemplateUsage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUsageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateUsageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateUsageGroupByArgs['orderBy'] }
        : { orderBy?: TemplateUsageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateUsageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateUsageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TemplateUsage model
   */
  readonly fields: TemplateUsageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TemplateUsage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplateUsageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TemplateUsage model
   */
  interface TemplateUsageFieldRefs {
    readonly id: FieldRef<"TemplateUsage", 'String'>
    readonly templateId: FieldRef<"TemplateUsage", 'String'>
    readonly userId: FieldRef<"TemplateUsage", 'String'>
    readonly usedAt: FieldRef<"TemplateUsage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TemplateUsage findUnique
   */
  export type TemplateUsageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * Filter, which TemplateUsage to fetch.
     */
    where: TemplateUsageWhereUniqueInput
  }

  /**
   * TemplateUsage findUniqueOrThrow
   */
  export type TemplateUsageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * Filter, which TemplateUsage to fetch.
     */
    where: TemplateUsageWhereUniqueInput
  }

  /**
   * TemplateUsage findFirst
   */
  export type TemplateUsageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * Filter, which TemplateUsage to fetch.
     */
    where?: TemplateUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateUsages to fetch.
     */
    orderBy?: TemplateUsageOrderByWithRelationInput | TemplateUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateUsages.
     */
    cursor?: TemplateUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateUsages.
     */
    distinct?: TemplateUsageScalarFieldEnum | TemplateUsageScalarFieldEnum[]
  }

  /**
   * TemplateUsage findFirstOrThrow
   */
  export type TemplateUsageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * Filter, which TemplateUsage to fetch.
     */
    where?: TemplateUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateUsages to fetch.
     */
    orderBy?: TemplateUsageOrderByWithRelationInput | TemplateUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateUsages.
     */
    cursor?: TemplateUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateUsages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateUsages.
     */
    distinct?: TemplateUsageScalarFieldEnum | TemplateUsageScalarFieldEnum[]
  }

  /**
   * TemplateUsage findMany
   */
  export type TemplateUsageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * Filter, which TemplateUsages to fetch.
     */
    where?: TemplateUsageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateUsages to fetch.
     */
    orderBy?: TemplateUsageOrderByWithRelationInput | TemplateUsageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TemplateUsages.
     */
    cursor?: TemplateUsageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateUsages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateUsages.
     */
    skip?: number
    distinct?: TemplateUsageScalarFieldEnum | TemplateUsageScalarFieldEnum[]
  }

  /**
   * TemplateUsage create
   */
  export type TemplateUsageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * The data needed to create a TemplateUsage.
     */
    data: XOR<TemplateUsageCreateInput, TemplateUsageUncheckedCreateInput>
  }

  /**
   * TemplateUsage createMany
   */
  export type TemplateUsageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TemplateUsages.
     */
    data: TemplateUsageCreateManyInput | TemplateUsageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TemplateUsage createManyAndReturn
   */
  export type TemplateUsageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * The data used to create many TemplateUsages.
     */
    data: TemplateUsageCreateManyInput | TemplateUsageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TemplateUsage update
   */
  export type TemplateUsageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * The data needed to update a TemplateUsage.
     */
    data: XOR<TemplateUsageUpdateInput, TemplateUsageUncheckedUpdateInput>
    /**
     * Choose, which TemplateUsage to update.
     */
    where: TemplateUsageWhereUniqueInput
  }

  /**
   * TemplateUsage updateMany
   */
  export type TemplateUsageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TemplateUsages.
     */
    data: XOR<TemplateUsageUpdateManyMutationInput, TemplateUsageUncheckedUpdateManyInput>
    /**
     * Filter which TemplateUsages to update
     */
    where?: TemplateUsageWhereInput
    /**
     * Limit how many TemplateUsages to update.
     */
    limit?: number
  }

  /**
   * TemplateUsage updateManyAndReturn
   */
  export type TemplateUsageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * The data used to update TemplateUsages.
     */
    data: XOR<TemplateUsageUpdateManyMutationInput, TemplateUsageUncheckedUpdateManyInput>
    /**
     * Filter which TemplateUsages to update
     */
    where?: TemplateUsageWhereInput
    /**
     * Limit how many TemplateUsages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TemplateUsage upsert
   */
  export type TemplateUsageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * The filter to search for the TemplateUsage to update in case it exists.
     */
    where: TemplateUsageWhereUniqueInput
    /**
     * In case the TemplateUsage found by the `where` argument doesn't exist, create a new TemplateUsage with this data.
     */
    create: XOR<TemplateUsageCreateInput, TemplateUsageUncheckedCreateInput>
    /**
     * In case the TemplateUsage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplateUsageUpdateInput, TemplateUsageUncheckedUpdateInput>
  }

  /**
   * TemplateUsage delete
   */
  export type TemplateUsageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
    /**
     * Filter which TemplateUsage to delete.
     */
    where: TemplateUsageWhereUniqueInput
  }

  /**
   * TemplateUsage deleteMany
   */
  export type TemplateUsageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TemplateUsages to delete
     */
    where?: TemplateUsageWhereInput
    /**
     * Limit how many TemplateUsages to delete.
     */
    limit?: number
  }

  /**
   * TemplateUsage without action
   */
  export type TemplateUsageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TemplateUsage
     */
    select?: TemplateUsageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TemplateUsage
     */
    omit?: TemplateUsageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateUsageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CoverLetterScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    optimizationRunId: 'optimizationRunId',
    letterText: 'letterText',
    createdAt: 'createdAt'
  };

  export type CoverLetterScalarFieldEnum = (typeof CoverLetterScalarFieldEnum)[keyof typeof CoverLetterScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    fullName: 'fullName',
    firstName: 'firstName',
    lastName: 'lastName',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    freeRunsRemaining: 'freeRunsRemaining',
    plan: 'plan'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ResumeFileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fileName: 'fileName',
    filePath: 'filePath',
    uploadedAt: 'uploadedAt',
    originalTextHash: 'originalTextHash'
  };

  export type ResumeFileScalarFieldEnum = (typeof ResumeFileScalarFieldEnum)[keyof typeof ResumeFileScalarFieldEnum]


  export const OptimizationRunScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    resumeFileId: 'resumeFileId',
    jobDescription: 'jobDescription',
    templateId: 'templateId',
    originalText: 'originalText',
    optimizedText: 'optimizedText',
    bulletRewrites: 'bulletRewrites',
    summaryRewrite: 'summaryRewrite',
    skillsRewrite: 'skillsRewrite',
    keywords: 'keywords',
    requirements: 'requirements',
    targetTitle: 'targetTitle',
    targetCompany: 'targetCompany',
    aiModel: 'aiModel',
    tokenCount: 'tokenCount',
    costUsd: 'costUsd',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    optimizedAtsNotes: 'optimizedAtsNotes',
    optimizedAtsScore: 'optimizedAtsScore',
    originalAtsNotes: 'originalAtsNotes',
    originalAtsScore: 'originalAtsScore'
  };

  export type OptimizationRunScalarFieldEnum = (typeof OptimizationRunScalarFieldEnum)[keyof typeof OptimizationRunScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    optimizationRunId: 'optimizationRunId',
    userId: 'userId',
    rating: 'rating',
    comments: 'comments',
    createdAt: 'createdAt'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    planName: 'planName',
    status: 'status',
    currentPeriodStart: 'currentPeriodStart',
    currentPeriodEnd: 'currentPeriodEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    stripeCustomerId: 'stripeCustomerId',
    stripeSubscriptionId: 'stripeSubscriptionId'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const UsageRecordScalarFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    optimizationRunId: 'optimizationRunId',
    tokenCount: 'tokenCount',
    costUsd: 'costUsd',
    createdAt: 'createdAt'
  };

  export type UsageRecordScalarFieldEnum = (typeof UsageRecordScalarFieldEnum)[keyof typeof UsageRecordScalarFieldEnum]


  export const UsageEventScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    eventType: 'eventType',
    meta: 'meta',
    createdAt: 'createdAt'
  };

  export type UsageEventScalarFieldEnum = (typeof UsageEventScalarFieldEnum)[keyof typeof UsageEventScalarFieldEnum]


  export const ScorecardScalarFieldEnum: {
    id: 'id',
    optimizationRunId: 'optimizationRunId',
    overallScore: 'overallScore',
    metrics: 'metrics',
    takeaways: 'takeaways',
    redFlags: 'redFlags',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScorecardScalarFieldEnum = (typeof ScorecardScalarFieldEnum)[keyof typeof ScorecardScalarFieldEnum]


  export const SavedResumeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    content: 'content',
    createdAt: 'createdAt',
    parsedData: 'parsedData',
    textHash: 'textHash'
  };

  export type SavedResumeScalarFieldEnum = (typeof SavedResumeScalarFieldEnum)[keyof typeof SavedResumeScalarFieldEnum]


  export const UnifiedResumeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    version: 'version',
    builderData: 'builderData',
    optimizationData: 'optimizationData',
    sharingData: 'sharingData',
    title: 'title',
    template: 'template',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    analyzedAt: 'analyzedAt',
    publishedAt: 'publishedAt'
  };

  export type UnifiedResumeScalarFieldEnum = (typeof UnifiedResumeScalarFieldEnum)[keyof typeof UnifiedResumeScalarFieldEnum]


  export const ResumeAnalysisScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    jobDescription: 'jobDescription',
    overallScore: 'overallScore',
    keywordMatches: 'keywordMatches',
    similarityScore: 'similarityScore',
    atsCompatibility: 'atsCompatibility',
    sectionScores: 'sectionScores',
    recommendations: 'recommendations',
    insights: 'insights',
    analysisVersion: 'analysisVersion',
    modelUsed: 'modelUsed',
    processingTime: 'processingTime',
    createdAt: 'createdAt'
  };

  export type ResumeAnalysisScalarFieldEnum = (typeof ResumeAnalysisScalarFieldEnum)[keyof typeof ResumeAnalysisScalarFieldEnum]


  export const ResumeShareScalarFieldEnum: {
    id: 'id',
    resumeId: 'resumeId',
    shareToken: 'shareToken',
    isPublic: 'isPublic',
    password: 'password',
    expiresAt: 'expiresAt',
    viewCount: 'viewCount',
    lastViewed: 'lastViewed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResumeShareScalarFieldEnum = (typeof ResumeShareScalarFieldEnum)[keyof typeof ResumeShareScalarFieldEnum]


  export const ShareViewScalarFieldEnum: {
    id: 'id',
    shareId: 'shareId',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    referer: 'referer',
    country: 'country',
    viewedAt: 'viewedAt'
  };

  export type ShareViewScalarFieldEnum = (typeof ShareViewScalarFieldEnum)[keyof typeof ShareViewScalarFieldEnum]


  export const ResumeTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    structure: 'structure',
    sections: 'sections',
    isActive: 'isActive',
    isPremium: 'isPremium',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResumeTemplateScalarFieldEnum = (typeof ResumeTemplateScalarFieldEnum)[keyof typeof ResumeTemplateScalarFieldEnum]


  export const TemplateUsageScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    userId: 'userId',
    usedAt: 'usedAt'
  };

  export type TemplateUsageScalarFieldEnum = (typeof TemplateUsageScalarFieldEnum)[keyof typeof TemplateUsageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type CoverLetterWhereInput = {
    AND?: CoverLetterWhereInput | CoverLetterWhereInput[]
    OR?: CoverLetterWhereInput[]
    NOT?: CoverLetterWhereInput | CoverLetterWhereInput[]
    id?: StringFilter<"CoverLetter"> | string
    userId?: StringFilter<"CoverLetter"> | string
    optimizationRunId?: StringFilter<"CoverLetter"> | string
    letterText?: StringFilter<"CoverLetter"> | string
    createdAt?: DateTimeFilter<"CoverLetter"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CoverLetterOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    optimizationRunId?: SortOrder
    letterText?: SortOrder
    createdAt?: SortOrder
    optimizationRun?: OptimizationRunOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CoverLetterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    optimizationRunId?: string
    AND?: CoverLetterWhereInput | CoverLetterWhereInput[]
    OR?: CoverLetterWhereInput[]
    NOT?: CoverLetterWhereInput | CoverLetterWhereInput[]
    userId?: StringFilter<"CoverLetter"> | string
    letterText?: StringFilter<"CoverLetter"> | string
    createdAt?: DateTimeFilter<"CoverLetter"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "optimizationRunId">

  export type CoverLetterOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    optimizationRunId?: SortOrder
    letterText?: SortOrder
    createdAt?: SortOrder
    _count?: CoverLetterCountOrderByAggregateInput
    _max?: CoverLetterMaxOrderByAggregateInput
    _min?: CoverLetterMinOrderByAggregateInput
  }

  export type CoverLetterScalarWhereWithAggregatesInput = {
    AND?: CoverLetterScalarWhereWithAggregatesInput | CoverLetterScalarWhereWithAggregatesInput[]
    OR?: CoverLetterScalarWhereWithAggregatesInput[]
    NOT?: CoverLetterScalarWhereWithAggregatesInput | CoverLetterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoverLetter"> | string
    userId?: StringWithAggregatesFilter<"CoverLetter"> | string
    optimizationRunId?: StringWithAggregatesFilter<"CoverLetter"> | string
    letterText?: StringWithAggregatesFilter<"CoverLetter"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CoverLetter"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    fullName?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    freeRunsRemaining?: IntFilter<"User"> | number
    plan?: StringFilter<"User"> | string
    coverLetters?: CoverLetterListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    optimizationRuns?: OptimizationRunListRelationFilter
    resumeFiles?: ResumeFileListRelationFilter
    savedResumes?: SavedResumeListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    usageEvents?: UsageEventListRelationFilter
    unifiedResumes?: UnifiedResumeListRelationFilter
    templateUsages?: TemplateUsageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    freeRunsRemaining?: SortOrder
    plan?: SortOrder
    coverLetters?: CoverLetterOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    optimizationRuns?: OptimizationRunOrderByRelationAggregateInput
    resumeFiles?: ResumeFileOrderByRelationAggregateInput
    savedResumes?: SavedResumeOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    usageEvents?: UsageEventOrderByRelationAggregateInput
    unifiedResumes?: UnifiedResumeOrderByRelationAggregateInput
    templateUsages?: TemplateUsageOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    freeRunsRemaining?: IntFilter<"User"> | number
    plan?: StringFilter<"User"> | string
    coverLetters?: CoverLetterListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    optimizationRuns?: OptimizationRunListRelationFilter
    resumeFiles?: ResumeFileListRelationFilter
    savedResumes?: SavedResumeListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    usageEvents?: UsageEventListRelationFilter
    unifiedResumes?: UnifiedResumeListRelationFilter
    templateUsages?: TemplateUsageListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    freeRunsRemaining?: SortOrder
    plan?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    freeRunsRemaining?: IntWithAggregatesFilter<"User"> | number
    plan?: StringWithAggregatesFilter<"User"> | string
  }

  export type ResumeFileWhereInput = {
    AND?: ResumeFileWhereInput | ResumeFileWhereInput[]
    OR?: ResumeFileWhereInput[]
    NOT?: ResumeFileWhereInput | ResumeFileWhereInput[]
    id?: StringFilter<"ResumeFile"> | string
    userId?: StringFilter<"ResumeFile"> | string
    fileName?: StringFilter<"ResumeFile"> | string
    filePath?: StringFilter<"ResumeFile"> | string
    uploadedAt?: DateTimeFilter<"ResumeFile"> | Date | string
    originalTextHash?: StringNullableFilter<"ResumeFile"> | string | null
    optimizationRuns?: OptimizationRunListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ResumeFileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    originalTextHash?: SortOrderInput | SortOrder
    optimizationRuns?: OptimizationRunOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type ResumeFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResumeFileWhereInput | ResumeFileWhereInput[]
    OR?: ResumeFileWhereInput[]
    NOT?: ResumeFileWhereInput | ResumeFileWhereInput[]
    userId?: StringFilter<"ResumeFile"> | string
    fileName?: StringFilter<"ResumeFile"> | string
    filePath?: StringFilter<"ResumeFile"> | string
    uploadedAt?: DateTimeFilter<"ResumeFile"> | Date | string
    originalTextHash?: StringNullableFilter<"ResumeFile"> | string | null
    optimizationRuns?: OptimizationRunListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ResumeFileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    originalTextHash?: SortOrderInput | SortOrder
    _count?: ResumeFileCountOrderByAggregateInput
    _max?: ResumeFileMaxOrderByAggregateInput
    _min?: ResumeFileMinOrderByAggregateInput
  }

  export type ResumeFileScalarWhereWithAggregatesInput = {
    AND?: ResumeFileScalarWhereWithAggregatesInput | ResumeFileScalarWhereWithAggregatesInput[]
    OR?: ResumeFileScalarWhereWithAggregatesInput[]
    NOT?: ResumeFileScalarWhereWithAggregatesInput | ResumeFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResumeFile"> | string
    userId?: StringWithAggregatesFilter<"ResumeFile"> | string
    fileName?: StringWithAggregatesFilter<"ResumeFile"> | string
    filePath?: StringWithAggregatesFilter<"ResumeFile"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"ResumeFile"> | Date | string
    originalTextHash?: StringNullableWithAggregatesFilter<"ResumeFile"> | string | null
  }

  export type OptimizationRunWhereInput = {
    AND?: OptimizationRunWhereInput | OptimizationRunWhereInput[]
    OR?: OptimizationRunWhereInput[]
    NOT?: OptimizationRunWhereInput | OptimizationRunWhereInput[]
    id?: StringFilter<"OptimizationRun"> | string
    userId?: StringFilter<"OptimizationRun"> | string
    resumeFileId?: StringNullableFilter<"OptimizationRun"> | string | null
    jobDescription?: StringFilter<"OptimizationRun"> | string
    templateId?: StringFilter<"OptimizationRun"> | string
    originalText?: StringFilter<"OptimizationRun"> | string
    optimizedText?: StringFilter<"OptimizationRun"> | string
    bulletRewrites?: JsonFilter<"OptimizationRun">
    summaryRewrite?: StringFilter<"OptimizationRun"> | string
    skillsRewrite?: StringFilter<"OptimizationRun"> | string
    keywords?: JsonFilter<"OptimizationRun">
    requirements?: JsonFilter<"OptimizationRun">
    targetTitle?: StringFilter<"OptimizationRun"> | string
    targetCompany?: StringFilter<"OptimizationRun"> | string
    aiModel?: StringFilter<"OptimizationRun"> | string
    tokenCount?: IntFilter<"OptimizationRun"> | number
    costUsd?: FloatFilter<"OptimizationRun"> | number
    createdAt?: DateTimeFilter<"OptimizationRun"> | Date | string
    deletedAt?: DateTimeNullableFilter<"OptimizationRun"> | Date | string | null
    optimizedAtsNotes?: StringNullableFilter<"OptimizationRun"> | string | null
    optimizedAtsScore?: FloatNullableFilter<"OptimizationRun"> | number | null
    originalAtsNotes?: StringNullableFilter<"OptimizationRun"> | string | null
    originalAtsScore?: FloatNullableFilter<"OptimizationRun"> | number | null
    coverLetter?: XOR<CoverLetterNullableScalarRelationFilter, CoverLetterWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    resumeFile?: XOR<ResumeFileNullableScalarRelationFilter, ResumeFileWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    usageRecords?: UsageRecordListRelationFilter
    scorecard?: XOR<ScorecardNullableScalarRelationFilter, ScorecardWhereInput> | null
  }

  export type OptimizationRunOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    resumeFileId?: SortOrderInput | SortOrder
    jobDescription?: SortOrder
    templateId?: SortOrder
    originalText?: SortOrder
    optimizedText?: SortOrder
    bulletRewrites?: SortOrder
    summaryRewrite?: SortOrder
    skillsRewrite?: SortOrder
    keywords?: SortOrder
    requirements?: SortOrder
    targetTitle?: SortOrder
    targetCompany?: SortOrder
    aiModel?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    optimizedAtsNotes?: SortOrderInput | SortOrder
    optimizedAtsScore?: SortOrderInput | SortOrder
    originalAtsNotes?: SortOrderInput | SortOrder
    originalAtsScore?: SortOrderInput | SortOrder
    coverLetter?: CoverLetterOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    resumeFile?: ResumeFileOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    usageRecords?: UsageRecordOrderByRelationAggregateInput
    scorecard?: ScorecardOrderByWithRelationInput
  }

  export type OptimizationRunWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OptimizationRunWhereInput | OptimizationRunWhereInput[]
    OR?: OptimizationRunWhereInput[]
    NOT?: OptimizationRunWhereInput | OptimizationRunWhereInput[]
    userId?: StringFilter<"OptimizationRun"> | string
    resumeFileId?: StringNullableFilter<"OptimizationRun"> | string | null
    jobDescription?: StringFilter<"OptimizationRun"> | string
    templateId?: StringFilter<"OptimizationRun"> | string
    originalText?: StringFilter<"OptimizationRun"> | string
    optimizedText?: StringFilter<"OptimizationRun"> | string
    bulletRewrites?: JsonFilter<"OptimizationRun">
    summaryRewrite?: StringFilter<"OptimizationRun"> | string
    skillsRewrite?: StringFilter<"OptimizationRun"> | string
    keywords?: JsonFilter<"OptimizationRun">
    requirements?: JsonFilter<"OptimizationRun">
    targetTitle?: StringFilter<"OptimizationRun"> | string
    targetCompany?: StringFilter<"OptimizationRun"> | string
    aiModel?: StringFilter<"OptimizationRun"> | string
    tokenCount?: IntFilter<"OptimizationRun"> | number
    costUsd?: FloatFilter<"OptimizationRun"> | number
    createdAt?: DateTimeFilter<"OptimizationRun"> | Date | string
    deletedAt?: DateTimeNullableFilter<"OptimizationRun"> | Date | string | null
    optimizedAtsNotes?: StringNullableFilter<"OptimizationRun"> | string | null
    optimizedAtsScore?: FloatNullableFilter<"OptimizationRun"> | number | null
    originalAtsNotes?: StringNullableFilter<"OptimizationRun"> | string | null
    originalAtsScore?: FloatNullableFilter<"OptimizationRun"> | number | null
    coverLetter?: XOR<CoverLetterNullableScalarRelationFilter, CoverLetterWhereInput> | null
    feedbacks?: FeedbackListRelationFilter
    resumeFile?: XOR<ResumeFileNullableScalarRelationFilter, ResumeFileWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    usageRecords?: UsageRecordListRelationFilter
    scorecard?: XOR<ScorecardNullableScalarRelationFilter, ScorecardWhereInput> | null
  }, "id">

  export type OptimizationRunOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    resumeFileId?: SortOrderInput | SortOrder
    jobDescription?: SortOrder
    templateId?: SortOrder
    originalText?: SortOrder
    optimizedText?: SortOrder
    bulletRewrites?: SortOrder
    summaryRewrite?: SortOrder
    skillsRewrite?: SortOrder
    keywords?: SortOrder
    requirements?: SortOrder
    targetTitle?: SortOrder
    targetCompany?: SortOrder
    aiModel?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    optimizedAtsNotes?: SortOrderInput | SortOrder
    optimizedAtsScore?: SortOrderInput | SortOrder
    originalAtsNotes?: SortOrderInput | SortOrder
    originalAtsScore?: SortOrderInput | SortOrder
    _count?: OptimizationRunCountOrderByAggregateInput
    _avg?: OptimizationRunAvgOrderByAggregateInput
    _max?: OptimizationRunMaxOrderByAggregateInput
    _min?: OptimizationRunMinOrderByAggregateInput
    _sum?: OptimizationRunSumOrderByAggregateInput
  }

  export type OptimizationRunScalarWhereWithAggregatesInput = {
    AND?: OptimizationRunScalarWhereWithAggregatesInput | OptimizationRunScalarWhereWithAggregatesInput[]
    OR?: OptimizationRunScalarWhereWithAggregatesInput[]
    NOT?: OptimizationRunScalarWhereWithAggregatesInput | OptimizationRunScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OptimizationRun"> | string
    userId?: StringWithAggregatesFilter<"OptimizationRun"> | string
    resumeFileId?: StringNullableWithAggregatesFilter<"OptimizationRun"> | string | null
    jobDescription?: StringWithAggregatesFilter<"OptimizationRun"> | string
    templateId?: StringWithAggregatesFilter<"OptimizationRun"> | string
    originalText?: StringWithAggregatesFilter<"OptimizationRun"> | string
    optimizedText?: StringWithAggregatesFilter<"OptimizationRun"> | string
    bulletRewrites?: JsonWithAggregatesFilter<"OptimizationRun">
    summaryRewrite?: StringWithAggregatesFilter<"OptimizationRun"> | string
    skillsRewrite?: StringWithAggregatesFilter<"OptimizationRun"> | string
    keywords?: JsonWithAggregatesFilter<"OptimizationRun">
    requirements?: JsonWithAggregatesFilter<"OptimizationRun">
    targetTitle?: StringWithAggregatesFilter<"OptimizationRun"> | string
    targetCompany?: StringWithAggregatesFilter<"OptimizationRun"> | string
    aiModel?: StringWithAggregatesFilter<"OptimizationRun"> | string
    tokenCount?: IntWithAggregatesFilter<"OptimizationRun"> | number
    costUsd?: FloatWithAggregatesFilter<"OptimizationRun"> | number
    createdAt?: DateTimeWithAggregatesFilter<"OptimizationRun"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"OptimizationRun"> | Date | string | null
    optimizedAtsNotes?: StringNullableWithAggregatesFilter<"OptimizationRun"> | string | null
    optimizedAtsScore?: FloatNullableWithAggregatesFilter<"OptimizationRun"> | number | null
    originalAtsNotes?: StringNullableWithAggregatesFilter<"OptimizationRun"> | string | null
    originalAtsScore?: FloatNullableWithAggregatesFilter<"OptimizationRun"> | number | null
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    optimizationRunId?: StringFilter<"Feedback"> | string
    userId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comments?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    optimizationRun?: OptimizationRunOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    optimizationRunId?: StringFilter<"Feedback"> | string
    userId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comments?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    optimizationRunId?: StringWithAggregatesFilter<"Feedback"> | string
    userId?: StringWithAggregatesFilter<"Feedback"> | string
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    comments?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
    planName?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    stripeCustomerId?: StringNullableFilter<"Subscription"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"Subscription"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    usageRecords?: UsageRecordListRelationFilter
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    planName?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    usageRecords?: UsageRecordOrderByRelationAggregateInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stripeSubscriptionId?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    userId?: StringFilter<"Subscription"> | string
    planName?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    stripeCustomerId?: StringNullableFilter<"Subscription"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    usageRecords?: UsageRecordListRelationFilter
  }, "id" | "stripeSubscriptionId">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    planName?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    userId?: StringWithAggregatesFilter<"Subscription"> | string
    planName?: StringWithAggregatesFilter<"Subscription"> | string
    status?: StringWithAggregatesFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    stripeCustomerId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
  }

  export type UsageRecordWhereInput = {
    AND?: UsageRecordWhereInput | UsageRecordWhereInput[]
    OR?: UsageRecordWhereInput[]
    NOT?: UsageRecordWhereInput | UsageRecordWhereInput[]
    id?: StringFilter<"UsageRecord"> | string
    subscriptionId?: StringFilter<"UsageRecord"> | string
    optimizationRunId?: StringFilter<"UsageRecord"> | string
    tokenCount?: IntFilter<"UsageRecord"> | number
    costUsd?: FloatFilter<"UsageRecord"> | number
    createdAt?: DateTimeFilter<"UsageRecord"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
    subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
  }

  export type UsageRecordOrderByWithRelationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    optimizationRunId?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
    optimizationRun?: OptimizationRunOrderByWithRelationInput
    subscription?: SubscriptionOrderByWithRelationInput
  }

  export type UsageRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsageRecordWhereInput | UsageRecordWhereInput[]
    OR?: UsageRecordWhereInput[]
    NOT?: UsageRecordWhereInput | UsageRecordWhereInput[]
    subscriptionId?: StringFilter<"UsageRecord"> | string
    optimizationRunId?: StringFilter<"UsageRecord"> | string
    tokenCount?: IntFilter<"UsageRecord"> | number
    costUsd?: FloatFilter<"UsageRecord"> | number
    createdAt?: DateTimeFilter<"UsageRecord"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
    subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
  }, "id">

  export type UsageRecordOrderByWithAggregationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    optimizationRunId?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
    _count?: UsageRecordCountOrderByAggregateInput
    _avg?: UsageRecordAvgOrderByAggregateInput
    _max?: UsageRecordMaxOrderByAggregateInput
    _min?: UsageRecordMinOrderByAggregateInput
    _sum?: UsageRecordSumOrderByAggregateInput
  }

  export type UsageRecordScalarWhereWithAggregatesInput = {
    AND?: UsageRecordScalarWhereWithAggregatesInput | UsageRecordScalarWhereWithAggregatesInput[]
    OR?: UsageRecordScalarWhereWithAggregatesInput[]
    NOT?: UsageRecordScalarWhereWithAggregatesInput | UsageRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsageRecord"> | string
    subscriptionId?: StringWithAggregatesFilter<"UsageRecord"> | string
    optimizationRunId?: StringWithAggregatesFilter<"UsageRecord"> | string
    tokenCount?: IntWithAggregatesFilter<"UsageRecord"> | number
    costUsd?: FloatWithAggregatesFilter<"UsageRecord"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UsageRecord"> | Date | string
  }

  export type UsageEventWhereInput = {
    AND?: UsageEventWhereInput | UsageEventWhereInput[]
    OR?: UsageEventWhereInput[]
    NOT?: UsageEventWhereInput | UsageEventWhereInput[]
    id?: StringFilter<"UsageEvent"> | string
    userId?: StringFilter<"UsageEvent"> | string
    eventType?: StringFilter<"UsageEvent"> | string
    meta?: JsonFilter<"UsageEvent">
    createdAt?: DateTimeFilter<"UsageEvent"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UsageEventOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventType?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UsageEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsageEventWhereInput | UsageEventWhereInput[]
    OR?: UsageEventWhereInput[]
    NOT?: UsageEventWhereInput | UsageEventWhereInput[]
    userId?: StringFilter<"UsageEvent"> | string
    eventType?: StringFilter<"UsageEvent"> | string
    meta?: JsonFilter<"UsageEvent">
    createdAt?: DateTimeFilter<"UsageEvent"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UsageEventOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    eventType?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
    _count?: UsageEventCountOrderByAggregateInput
    _max?: UsageEventMaxOrderByAggregateInput
    _min?: UsageEventMinOrderByAggregateInput
  }

  export type UsageEventScalarWhereWithAggregatesInput = {
    AND?: UsageEventScalarWhereWithAggregatesInput | UsageEventScalarWhereWithAggregatesInput[]
    OR?: UsageEventScalarWhereWithAggregatesInput[]
    NOT?: UsageEventScalarWhereWithAggregatesInput | UsageEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsageEvent"> | string
    userId?: StringWithAggregatesFilter<"UsageEvent"> | string
    eventType?: StringWithAggregatesFilter<"UsageEvent"> | string
    meta?: JsonWithAggregatesFilter<"UsageEvent">
    createdAt?: DateTimeWithAggregatesFilter<"UsageEvent"> | Date | string
  }

  export type ScorecardWhereInput = {
    AND?: ScorecardWhereInput | ScorecardWhereInput[]
    OR?: ScorecardWhereInput[]
    NOT?: ScorecardWhereInput | ScorecardWhereInput[]
    id?: StringFilter<"Scorecard"> | string
    optimizationRunId?: StringFilter<"Scorecard"> | string
    overallScore?: IntFilter<"Scorecard"> | number
    metrics?: JsonFilter<"Scorecard">
    takeaways?: JsonNullableFilter<"Scorecard">
    redFlags?: JsonNullableFilter<"Scorecard">
    createdAt?: DateTimeFilter<"Scorecard"> | Date | string
    updatedAt?: DateTimeFilter<"Scorecard"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
  }

  export type ScorecardOrderByWithRelationInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    overallScore?: SortOrder
    metrics?: SortOrder
    takeaways?: SortOrderInput | SortOrder
    redFlags?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    optimizationRun?: OptimizationRunOrderByWithRelationInput
  }

  export type ScorecardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    optimizationRunId?: string
    AND?: ScorecardWhereInput | ScorecardWhereInput[]
    OR?: ScorecardWhereInput[]
    NOT?: ScorecardWhereInput | ScorecardWhereInput[]
    overallScore?: IntFilter<"Scorecard"> | number
    metrics?: JsonFilter<"Scorecard">
    takeaways?: JsonNullableFilter<"Scorecard">
    redFlags?: JsonNullableFilter<"Scorecard">
    createdAt?: DateTimeFilter<"Scorecard"> | Date | string
    updatedAt?: DateTimeFilter<"Scorecard"> | Date | string
    optimizationRun?: XOR<OptimizationRunScalarRelationFilter, OptimizationRunWhereInput>
  }, "id" | "optimizationRunId">

  export type ScorecardOrderByWithAggregationInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    overallScore?: SortOrder
    metrics?: SortOrder
    takeaways?: SortOrderInput | SortOrder
    redFlags?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScorecardCountOrderByAggregateInput
    _avg?: ScorecardAvgOrderByAggregateInput
    _max?: ScorecardMaxOrderByAggregateInput
    _min?: ScorecardMinOrderByAggregateInput
    _sum?: ScorecardSumOrderByAggregateInput
  }

  export type ScorecardScalarWhereWithAggregatesInput = {
    AND?: ScorecardScalarWhereWithAggregatesInput | ScorecardScalarWhereWithAggregatesInput[]
    OR?: ScorecardScalarWhereWithAggregatesInput[]
    NOT?: ScorecardScalarWhereWithAggregatesInput | ScorecardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Scorecard"> | string
    optimizationRunId?: StringWithAggregatesFilter<"Scorecard"> | string
    overallScore?: IntWithAggregatesFilter<"Scorecard"> | number
    metrics?: JsonWithAggregatesFilter<"Scorecard">
    takeaways?: JsonNullableWithAggregatesFilter<"Scorecard">
    redFlags?: JsonNullableWithAggregatesFilter<"Scorecard">
    createdAt?: DateTimeWithAggregatesFilter<"Scorecard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Scorecard"> | Date | string
  }

  export type SavedResumeWhereInput = {
    AND?: SavedResumeWhereInput | SavedResumeWhereInput[]
    OR?: SavedResumeWhereInput[]
    NOT?: SavedResumeWhereInput | SavedResumeWhereInput[]
    id?: StringFilter<"SavedResume"> | string
    userId?: StringFilter<"SavedResume"> | string
    name?: StringFilter<"SavedResume"> | string
    content?: StringFilter<"SavedResume"> | string
    createdAt?: DateTimeFilter<"SavedResume"> | Date | string
    parsedData?: JsonNullableFilter<"SavedResume">
    textHash?: StringNullableFilter<"SavedResume"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SavedResumeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    parsedData?: SortOrderInput | SortOrder
    textHash?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SavedResumeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SavedResumeWhereInput | SavedResumeWhereInput[]
    OR?: SavedResumeWhereInput[]
    NOT?: SavedResumeWhereInput | SavedResumeWhereInput[]
    userId?: StringFilter<"SavedResume"> | string
    name?: StringFilter<"SavedResume"> | string
    content?: StringFilter<"SavedResume"> | string
    createdAt?: DateTimeFilter<"SavedResume"> | Date | string
    parsedData?: JsonNullableFilter<"SavedResume">
    textHash?: StringNullableFilter<"SavedResume"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SavedResumeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    parsedData?: SortOrderInput | SortOrder
    textHash?: SortOrderInput | SortOrder
    _count?: SavedResumeCountOrderByAggregateInput
    _max?: SavedResumeMaxOrderByAggregateInput
    _min?: SavedResumeMinOrderByAggregateInput
  }

  export type SavedResumeScalarWhereWithAggregatesInput = {
    AND?: SavedResumeScalarWhereWithAggregatesInput | SavedResumeScalarWhereWithAggregatesInput[]
    OR?: SavedResumeScalarWhereWithAggregatesInput[]
    NOT?: SavedResumeScalarWhereWithAggregatesInput | SavedResumeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SavedResume"> | string
    userId?: StringWithAggregatesFilter<"SavedResume"> | string
    name?: StringWithAggregatesFilter<"SavedResume"> | string
    content?: StringWithAggregatesFilter<"SavedResume"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SavedResume"> | Date | string
    parsedData?: JsonNullableWithAggregatesFilter<"SavedResume">
    textHash?: StringNullableWithAggregatesFilter<"SavedResume"> | string | null
  }

  export type UnifiedResumeWhereInput = {
    AND?: UnifiedResumeWhereInput | UnifiedResumeWhereInput[]
    OR?: UnifiedResumeWhereInput[]
    NOT?: UnifiedResumeWhereInput | UnifiedResumeWhereInput[]
    id?: StringFilter<"UnifiedResume"> | string
    userId?: StringFilter<"UnifiedResume"> | string
    version?: IntFilter<"UnifiedResume"> | number
    builderData?: JsonFilter<"UnifiedResume">
    optimizationData?: JsonNullableFilter<"UnifiedResume">
    sharingData?: JsonNullableFilter<"UnifiedResume">
    title?: StringFilter<"UnifiedResume"> | string
    template?: StringFilter<"UnifiedResume"> | string
    createdAt?: DateTimeFilter<"UnifiedResume"> | Date | string
    updatedAt?: DateTimeFilter<"UnifiedResume"> | Date | string
    analyzedAt?: DateTimeNullableFilter<"UnifiedResume"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"UnifiedResume"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    analyses?: ResumeAnalysisListRelationFilter
    shares?: ResumeShareListRelationFilter
  }

  export type UnifiedResumeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    version?: SortOrder
    builderData?: SortOrder
    optimizationData?: SortOrderInput | SortOrder
    sharingData?: SortOrderInput | SortOrder
    title?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    analyzedAt?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    analyses?: ResumeAnalysisOrderByRelationAggregateInput
    shares?: ResumeShareOrderByRelationAggregateInput
  }

  export type UnifiedResumeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UnifiedResumeWhereInput | UnifiedResumeWhereInput[]
    OR?: UnifiedResumeWhereInput[]
    NOT?: UnifiedResumeWhereInput | UnifiedResumeWhereInput[]
    userId?: StringFilter<"UnifiedResume"> | string
    version?: IntFilter<"UnifiedResume"> | number
    builderData?: JsonFilter<"UnifiedResume">
    optimizationData?: JsonNullableFilter<"UnifiedResume">
    sharingData?: JsonNullableFilter<"UnifiedResume">
    title?: StringFilter<"UnifiedResume"> | string
    template?: StringFilter<"UnifiedResume"> | string
    createdAt?: DateTimeFilter<"UnifiedResume"> | Date | string
    updatedAt?: DateTimeFilter<"UnifiedResume"> | Date | string
    analyzedAt?: DateTimeNullableFilter<"UnifiedResume"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"UnifiedResume"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    analyses?: ResumeAnalysisListRelationFilter
    shares?: ResumeShareListRelationFilter
  }, "id">

  export type UnifiedResumeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    version?: SortOrder
    builderData?: SortOrder
    optimizationData?: SortOrderInput | SortOrder
    sharingData?: SortOrderInput | SortOrder
    title?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    analyzedAt?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    _count?: UnifiedResumeCountOrderByAggregateInput
    _avg?: UnifiedResumeAvgOrderByAggregateInput
    _max?: UnifiedResumeMaxOrderByAggregateInput
    _min?: UnifiedResumeMinOrderByAggregateInput
    _sum?: UnifiedResumeSumOrderByAggregateInput
  }

  export type UnifiedResumeScalarWhereWithAggregatesInput = {
    AND?: UnifiedResumeScalarWhereWithAggregatesInput | UnifiedResumeScalarWhereWithAggregatesInput[]
    OR?: UnifiedResumeScalarWhereWithAggregatesInput[]
    NOT?: UnifiedResumeScalarWhereWithAggregatesInput | UnifiedResumeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UnifiedResume"> | string
    userId?: StringWithAggregatesFilter<"UnifiedResume"> | string
    version?: IntWithAggregatesFilter<"UnifiedResume"> | number
    builderData?: JsonWithAggregatesFilter<"UnifiedResume">
    optimizationData?: JsonNullableWithAggregatesFilter<"UnifiedResume">
    sharingData?: JsonNullableWithAggregatesFilter<"UnifiedResume">
    title?: StringWithAggregatesFilter<"UnifiedResume"> | string
    template?: StringWithAggregatesFilter<"UnifiedResume"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UnifiedResume"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UnifiedResume"> | Date | string
    analyzedAt?: DateTimeNullableWithAggregatesFilter<"UnifiedResume"> | Date | string | null
    publishedAt?: DateTimeNullableWithAggregatesFilter<"UnifiedResume"> | Date | string | null
  }

  export type ResumeAnalysisWhereInput = {
    AND?: ResumeAnalysisWhereInput | ResumeAnalysisWhereInput[]
    OR?: ResumeAnalysisWhereInput[]
    NOT?: ResumeAnalysisWhereInput | ResumeAnalysisWhereInput[]
    id?: StringFilter<"ResumeAnalysis"> | string
    resumeId?: StringFilter<"ResumeAnalysis"> | string
    jobDescription?: StringFilter<"ResumeAnalysis"> | string
    overallScore?: IntFilter<"ResumeAnalysis"> | number
    keywordMatches?: JsonFilter<"ResumeAnalysis">
    similarityScore?: FloatFilter<"ResumeAnalysis"> | number
    atsCompatibility?: JsonFilter<"ResumeAnalysis">
    sectionScores?: JsonFilter<"ResumeAnalysis">
    recommendations?: JsonFilter<"ResumeAnalysis">
    insights?: JsonFilter<"ResumeAnalysis">
    analysisVersion?: StringFilter<"ResumeAnalysis"> | string
    modelUsed?: StringFilter<"ResumeAnalysis"> | string
    processingTime?: IntNullableFilter<"ResumeAnalysis"> | number | null
    createdAt?: DateTimeFilter<"ResumeAnalysis"> | Date | string
    resume?: XOR<UnifiedResumeScalarRelationFilter, UnifiedResumeWhereInput>
  }

  export type ResumeAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobDescription?: SortOrder
    overallScore?: SortOrder
    keywordMatches?: SortOrder
    similarityScore?: SortOrder
    atsCompatibility?: SortOrder
    sectionScores?: SortOrder
    recommendations?: SortOrder
    insights?: SortOrder
    analysisVersion?: SortOrder
    modelUsed?: SortOrder
    processingTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resume?: UnifiedResumeOrderByWithRelationInput
  }

  export type ResumeAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResumeAnalysisWhereInput | ResumeAnalysisWhereInput[]
    OR?: ResumeAnalysisWhereInput[]
    NOT?: ResumeAnalysisWhereInput | ResumeAnalysisWhereInput[]
    resumeId?: StringFilter<"ResumeAnalysis"> | string
    jobDescription?: StringFilter<"ResumeAnalysis"> | string
    overallScore?: IntFilter<"ResumeAnalysis"> | number
    keywordMatches?: JsonFilter<"ResumeAnalysis">
    similarityScore?: FloatFilter<"ResumeAnalysis"> | number
    atsCompatibility?: JsonFilter<"ResumeAnalysis">
    sectionScores?: JsonFilter<"ResumeAnalysis">
    recommendations?: JsonFilter<"ResumeAnalysis">
    insights?: JsonFilter<"ResumeAnalysis">
    analysisVersion?: StringFilter<"ResumeAnalysis"> | string
    modelUsed?: StringFilter<"ResumeAnalysis"> | string
    processingTime?: IntNullableFilter<"ResumeAnalysis"> | number | null
    createdAt?: DateTimeFilter<"ResumeAnalysis"> | Date | string
    resume?: XOR<UnifiedResumeScalarRelationFilter, UnifiedResumeWhereInput>
  }, "id">

  export type ResumeAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobDescription?: SortOrder
    overallScore?: SortOrder
    keywordMatches?: SortOrder
    similarityScore?: SortOrder
    atsCompatibility?: SortOrder
    sectionScores?: SortOrder
    recommendations?: SortOrder
    insights?: SortOrder
    analysisVersion?: SortOrder
    modelUsed?: SortOrder
    processingTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ResumeAnalysisCountOrderByAggregateInput
    _avg?: ResumeAnalysisAvgOrderByAggregateInput
    _max?: ResumeAnalysisMaxOrderByAggregateInput
    _min?: ResumeAnalysisMinOrderByAggregateInput
    _sum?: ResumeAnalysisSumOrderByAggregateInput
  }

  export type ResumeAnalysisScalarWhereWithAggregatesInput = {
    AND?: ResumeAnalysisScalarWhereWithAggregatesInput | ResumeAnalysisScalarWhereWithAggregatesInput[]
    OR?: ResumeAnalysisScalarWhereWithAggregatesInput[]
    NOT?: ResumeAnalysisScalarWhereWithAggregatesInput | ResumeAnalysisScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResumeAnalysis"> | string
    resumeId?: StringWithAggregatesFilter<"ResumeAnalysis"> | string
    jobDescription?: StringWithAggregatesFilter<"ResumeAnalysis"> | string
    overallScore?: IntWithAggregatesFilter<"ResumeAnalysis"> | number
    keywordMatches?: JsonWithAggregatesFilter<"ResumeAnalysis">
    similarityScore?: FloatWithAggregatesFilter<"ResumeAnalysis"> | number
    atsCompatibility?: JsonWithAggregatesFilter<"ResumeAnalysis">
    sectionScores?: JsonWithAggregatesFilter<"ResumeAnalysis">
    recommendations?: JsonWithAggregatesFilter<"ResumeAnalysis">
    insights?: JsonWithAggregatesFilter<"ResumeAnalysis">
    analysisVersion?: StringWithAggregatesFilter<"ResumeAnalysis"> | string
    modelUsed?: StringWithAggregatesFilter<"ResumeAnalysis"> | string
    processingTime?: IntNullableWithAggregatesFilter<"ResumeAnalysis"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ResumeAnalysis"> | Date | string
  }

  export type ResumeShareWhereInput = {
    AND?: ResumeShareWhereInput | ResumeShareWhereInput[]
    OR?: ResumeShareWhereInput[]
    NOT?: ResumeShareWhereInput | ResumeShareWhereInput[]
    id?: StringFilter<"ResumeShare"> | string
    resumeId?: StringFilter<"ResumeShare"> | string
    shareToken?: StringFilter<"ResumeShare"> | string
    isPublic?: BoolFilter<"ResumeShare"> | boolean
    password?: StringNullableFilter<"ResumeShare"> | string | null
    expiresAt?: DateTimeNullableFilter<"ResumeShare"> | Date | string | null
    viewCount?: IntFilter<"ResumeShare"> | number
    lastViewed?: DateTimeNullableFilter<"ResumeShare"> | Date | string | null
    createdAt?: DateTimeFilter<"ResumeShare"> | Date | string
    updatedAt?: DateTimeFilter<"ResumeShare"> | Date | string
    resume?: XOR<UnifiedResumeScalarRelationFilter, UnifiedResumeWhereInput>
    views?: ShareViewListRelationFilter
  }

  export type ResumeShareOrderByWithRelationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shareToken?: SortOrder
    isPublic?: SortOrder
    password?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    viewCount?: SortOrder
    lastViewed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resume?: UnifiedResumeOrderByWithRelationInput
    views?: ShareViewOrderByRelationAggregateInput
  }

  export type ResumeShareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shareToken?: string
    AND?: ResumeShareWhereInput | ResumeShareWhereInput[]
    OR?: ResumeShareWhereInput[]
    NOT?: ResumeShareWhereInput | ResumeShareWhereInput[]
    resumeId?: StringFilter<"ResumeShare"> | string
    isPublic?: BoolFilter<"ResumeShare"> | boolean
    password?: StringNullableFilter<"ResumeShare"> | string | null
    expiresAt?: DateTimeNullableFilter<"ResumeShare"> | Date | string | null
    viewCount?: IntFilter<"ResumeShare"> | number
    lastViewed?: DateTimeNullableFilter<"ResumeShare"> | Date | string | null
    createdAt?: DateTimeFilter<"ResumeShare"> | Date | string
    updatedAt?: DateTimeFilter<"ResumeShare"> | Date | string
    resume?: XOR<UnifiedResumeScalarRelationFilter, UnifiedResumeWhereInput>
    views?: ShareViewListRelationFilter
  }, "id" | "shareToken">

  export type ResumeShareOrderByWithAggregationInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shareToken?: SortOrder
    isPublic?: SortOrder
    password?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    viewCount?: SortOrder
    lastViewed?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResumeShareCountOrderByAggregateInput
    _avg?: ResumeShareAvgOrderByAggregateInput
    _max?: ResumeShareMaxOrderByAggregateInput
    _min?: ResumeShareMinOrderByAggregateInput
    _sum?: ResumeShareSumOrderByAggregateInput
  }

  export type ResumeShareScalarWhereWithAggregatesInput = {
    AND?: ResumeShareScalarWhereWithAggregatesInput | ResumeShareScalarWhereWithAggregatesInput[]
    OR?: ResumeShareScalarWhereWithAggregatesInput[]
    NOT?: ResumeShareScalarWhereWithAggregatesInput | ResumeShareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResumeShare"> | string
    resumeId?: StringWithAggregatesFilter<"ResumeShare"> | string
    shareToken?: StringWithAggregatesFilter<"ResumeShare"> | string
    isPublic?: BoolWithAggregatesFilter<"ResumeShare"> | boolean
    password?: StringNullableWithAggregatesFilter<"ResumeShare"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ResumeShare"> | Date | string | null
    viewCount?: IntWithAggregatesFilter<"ResumeShare"> | number
    lastViewed?: DateTimeNullableWithAggregatesFilter<"ResumeShare"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ResumeShare"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ResumeShare"> | Date | string
  }

  export type ShareViewWhereInput = {
    AND?: ShareViewWhereInput | ShareViewWhereInput[]
    OR?: ShareViewWhereInput[]
    NOT?: ShareViewWhereInput | ShareViewWhereInput[]
    id?: StringFilter<"ShareView"> | string
    shareId?: StringFilter<"ShareView"> | string
    ipAddress?: StringNullableFilter<"ShareView"> | string | null
    userAgent?: StringNullableFilter<"ShareView"> | string | null
    referer?: StringNullableFilter<"ShareView"> | string | null
    country?: StringNullableFilter<"ShareView"> | string | null
    viewedAt?: DateTimeFilter<"ShareView"> | Date | string
    share?: XOR<ResumeShareScalarRelationFilter, ResumeShareWhereInput>
  }

  export type ShareViewOrderByWithRelationInput = {
    id?: SortOrder
    shareId?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    referer?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    viewedAt?: SortOrder
    share?: ResumeShareOrderByWithRelationInput
  }

  export type ShareViewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShareViewWhereInput | ShareViewWhereInput[]
    OR?: ShareViewWhereInput[]
    NOT?: ShareViewWhereInput | ShareViewWhereInput[]
    shareId?: StringFilter<"ShareView"> | string
    ipAddress?: StringNullableFilter<"ShareView"> | string | null
    userAgent?: StringNullableFilter<"ShareView"> | string | null
    referer?: StringNullableFilter<"ShareView"> | string | null
    country?: StringNullableFilter<"ShareView"> | string | null
    viewedAt?: DateTimeFilter<"ShareView"> | Date | string
    share?: XOR<ResumeShareScalarRelationFilter, ResumeShareWhereInput>
  }, "id">

  export type ShareViewOrderByWithAggregationInput = {
    id?: SortOrder
    shareId?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    referer?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    viewedAt?: SortOrder
    _count?: ShareViewCountOrderByAggregateInput
    _max?: ShareViewMaxOrderByAggregateInput
    _min?: ShareViewMinOrderByAggregateInput
  }

  export type ShareViewScalarWhereWithAggregatesInput = {
    AND?: ShareViewScalarWhereWithAggregatesInput | ShareViewScalarWhereWithAggregatesInput[]
    OR?: ShareViewScalarWhereWithAggregatesInput[]
    NOT?: ShareViewScalarWhereWithAggregatesInput | ShareViewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ShareView"> | string
    shareId?: StringWithAggregatesFilter<"ShareView"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"ShareView"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ShareView"> | string | null
    referer?: StringNullableWithAggregatesFilter<"ShareView"> | string | null
    country?: StringNullableWithAggregatesFilter<"ShareView"> | string | null
    viewedAt?: DateTimeWithAggregatesFilter<"ShareView"> | Date | string
  }

  export type ResumeTemplateWhereInput = {
    AND?: ResumeTemplateWhereInput | ResumeTemplateWhereInput[]
    OR?: ResumeTemplateWhereInput[]
    NOT?: ResumeTemplateWhereInput | ResumeTemplateWhereInput[]
    id?: StringFilter<"ResumeTemplate"> | string
    name?: StringFilter<"ResumeTemplate"> | string
    description?: StringNullableFilter<"ResumeTemplate"> | string | null
    category?: StringFilter<"ResumeTemplate"> | string
    structure?: JsonFilter<"ResumeTemplate">
    sections?: JsonFilter<"ResumeTemplate">
    isActive?: BoolFilter<"ResumeTemplate"> | boolean
    isPremium?: BoolFilter<"ResumeTemplate"> | boolean
    sortOrder?: IntFilter<"ResumeTemplate"> | number
    createdAt?: DateTimeFilter<"ResumeTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ResumeTemplate"> | Date | string
  }

  export type ResumeTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    structure?: SortOrder
    sections?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResumeTemplateWhereInput | ResumeTemplateWhereInput[]
    OR?: ResumeTemplateWhereInput[]
    NOT?: ResumeTemplateWhereInput | ResumeTemplateWhereInput[]
    name?: StringFilter<"ResumeTemplate"> | string
    description?: StringNullableFilter<"ResumeTemplate"> | string | null
    category?: StringFilter<"ResumeTemplate"> | string
    structure?: JsonFilter<"ResumeTemplate">
    sections?: JsonFilter<"ResumeTemplate">
    isActive?: BoolFilter<"ResumeTemplate"> | boolean
    isPremium?: BoolFilter<"ResumeTemplate"> | boolean
    sortOrder?: IntFilter<"ResumeTemplate"> | number
    createdAt?: DateTimeFilter<"ResumeTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"ResumeTemplate"> | Date | string
  }, "id">

  export type ResumeTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrder
    structure?: SortOrder
    sections?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResumeTemplateCountOrderByAggregateInput
    _avg?: ResumeTemplateAvgOrderByAggregateInput
    _max?: ResumeTemplateMaxOrderByAggregateInput
    _min?: ResumeTemplateMinOrderByAggregateInput
    _sum?: ResumeTemplateSumOrderByAggregateInput
  }

  export type ResumeTemplateScalarWhereWithAggregatesInput = {
    AND?: ResumeTemplateScalarWhereWithAggregatesInput | ResumeTemplateScalarWhereWithAggregatesInput[]
    OR?: ResumeTemplateScalarWhereWithAggregatesInput[]
    NOT?: ResumeTemplateScalarWhereWithAggregatesInput | ResumeTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResumeTemplate"> | string
    name?: StringWithAggregatesFilter<"ResumeTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"ResumeTemplate"> | string | null
    category?: StringWithAggregatesFilter<"ResumeTemplate"> | string
    structure?: JsonWithAggregatesFilter<"ResumeTemplate">
    sections?: JsonWithAggregatesFilter<"ResumeTemplate">
    isActive?: BoolWithAggregatesFilter<"ResumeTemplate"> | boolean
    isPremium?: BoolWithAggregatesFilter<"ResumeTemplate"> | boolean
    sortOrder?: IntWithAggregatesFilter<"ResumeTemplate"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ResumeTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ResumeTemplate"> | Date | string
  }

  export type TemplateUsageWhereInput = {
    AND?: TemplateUsageWhereInput | TemplateUsageWhereInput[]
    OR?: TemplateUsageWhereInput[]
    NOT?: TemplateUsageWhereInput | TemplateUsageWhereInput[]
    id?: StringFilter<"TemplateUsage"> | string
    templateId?: StringFilter<"TemplateUsage"> | string
    userId?: StringFilter<"TemplateUsage"> | string
    usedAt?: DateTimeFilter<"TemplateUsage"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TemplateUsageOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TemplateUsageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TemplateUsageWhereInput | TemplateUsageWhereInput[]
    OR?: TemplateUsageWhereInput[]
    NOT?: TemplateUsageWhereInput | TemplateUsageWhereInput[]
    templateId?: StringFilter<"TemplateUsage"> | string
    userId?: StringFilter<"TemplateUsage"> | string
    usedAt?: DateTimeFilter<"TemplateUsage"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TemplateUsageOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
    _count?: TemplateUsageCountOrderByAggregateInput
    _max?: TemplateUsageMaxOrderByAggregateInput
    _min?: TemplateUsageMinOrderByAggregateInput
  }

  export type TemplateUsageScalarWhereWithAggregatesInput = {
    AND?: TemplateUsageScalarWhereWithAggregatesInput | TemplateUsageScalarWhereWithAggregatesInput[]
    OR?: TemplateUsageScalarWhereWithAggregatesInput[]
    NOT?: TemplateUsageScalarWhereWithAggregatesInput | TemplateUsageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TemplateUsage"> | string
    templateId?: StringWithAggregatesFilter<"TemplateUsage"> | string
    userId?: StringWithAggregatesFilter<"TemplateUsage"> | string
    usedAt?: DateTimeWithAggregatesFilter<"TemplateUsage"> | Date | string
  }

  export type CoverLetterCreateInput = {
    id?: string
    letterText: string
    createdAt?: Date | string
    optimizationRun: OptimizationRunCreateNestedOneWithoutCoverLetterInput
    user: UserCreateNestedOneWithoutCoverLettersInput
  }

  export type CoverLetterUncheckedCreateInput = {
    id?: string
    userId: string
    optimizationRunId: string
    letterText: string
    createdAt?: Date | string
  }

  export type CoverLetterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optimizationRun?: OptimizationRunUpdateOneRequiredWithoutCoverLetterNestedInput
    user?: UserUpdateOneRequiredWithoutCoverLettersNestedInput
  }

  export type CoverLetterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoverLetterCreateManyInput = {
    id?: string
    userId: string
    optimizationRunId: string
    letterText: string
    createdAt?: Date | string
  }

  export type CoverLetterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoverLetterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
  }

  export type ResumeFileCreateInput = {
    id?: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutResumeFileInput
    user: UserCreateNestedOneWithoutResumeFilesInput
  }

  export type ResumeFileUncheckedCreateInput = {
    id?: string
    userId: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutResumeFileInput
  }

  export type ResumeFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
    optimizationRuns?: OptimizationRunUpdateManyWithoutResumeFileNestedInput
    user?: UserUpdateOneRequiredWithoutResumeFilesNestedInput
  }

  export type ResumeFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutResumeFileNestedInput
  }

  export type ResumeFileCreateManyInput = {
    id?: string
    userId: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
  }

  export type ResumeFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResumeFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OptimizationRunCreateInput = {
    id?: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackCreateNestedManyWithoutOptimizationRunInput
    resumeFile?: ResumeFileCreateNestedOneWithoutOptimizationRunsInput
    user: UserCreateNestedOneWithoutOptimizationRunsInput
    usageRecords?: UsageRecordCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunUncheckedCreateInput = {
    id?: string
    userId: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterUncheckedCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOptimizationRunInput
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardUncheckedCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOptimizationRunNestedInput
    resumeFile?: ResumeFileUpdateOneWithoutOptimizationRunsNestedInput
    user?: UserUpdateOneRequiredWithoutOptimizationRunsNestedInput
    usageRecords?: UsageRecordUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUncheckedUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOptimizationRunNestedInput
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUncheckedUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunCreateManyInput = {
    id?: string
    userId: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
  }

  export type OptimizationRunUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type OptimizationRunUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type FeedbackCreateInput = {
    id?: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
    optimizationRun: OptimizationRunCreateNestedOneWithoutFeedbacksInput
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    optimizationRunId: string
    userId: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optimizationRun?: OptimizationRunUpdateOneRequiredWithoutFeedbacksNestedInput
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: string
    optimizationRunId: string
    userId: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    user: UserCreateNestedOneWithoutSubscriptionsInput
    usageRecords?: UsageRecordCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    userId: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
    usageRecords?: UsageRecordUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    userId: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsageRecordCreateInput = {
    id?: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    optimizationRun: OptimizationRunCreateNestedOneWithoutUsageRecordsInput
    subscription: SubscriptionCreateNestedOneWithoutUsageRecordsInput
  }

  export type UsageRecordUncheckedCreateInput = {
    id?: string
    subscriptionId: string
    optimizationRunId: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
  }

  export type UsageRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optimizationRun?: OptimizationRunUpdateOneRequiredWithoutUsageRecordsNestedInput
    subscription?: SubscriptionUpdateOneRequiredWithoutUsageRecordsNestedInput
  }

  export type UsageRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageRecordCreateManyInput = {
    id?: string
    subscriptionId: string
    optimizationRunId: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
  }

  export type UsageRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventCreateInput = {
    id?: string
    eventType: string
    meta: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUsageEventsInput
  }

  export type UsageEventUncheckedCreateInput = {
    id?: string
    userId: string
    eventType: string
    meta: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UsageEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    meta?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUsageEventsNestedInput
  }

  export type UsageEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    meta?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventCreateManyInput = {
    id?: string
    userId: string
    eventType: string
    meta: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UsageEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    meta?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    meta?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScorecardCreateInput = {
    id?: string
    overallScore: number
    metrics: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    optimizationRun: OptimizationRunCreateNestedOneWithoutScorecardInput
  }

  export type ScorecardUncheckedCreateInput = {
    id?: string
    optimizationRunId: string
    overallScore: number
    metrics: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScorecardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optimizationRun?: OptimizationRunUpdateOneRequiredWithoutScorecardNestedInput
  }

  export type ScorecardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScorecardCreateManyInput = {
    id?: string
    optimizationRunId: string
    overallScore: number
    metrics: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScorecardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScorecardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SavedResumeCreateInput = {
    id?: string
    name: string
    content: string
    createdAt?: Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: string | null
    user: UserCreateNestedOneWithoutSavedResumesInput
  }

  export type SavedResumeUncheckedCreateInput = {
    id?: string
    userId: string
    name: string
    content: string
    createdAt?: Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: string | null
  }

  export type SavedResumeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSavedResumesNestedInput
  }

  export type SavedResumeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedResumeCreateManyInput = {
    id?: string
    userId: string
    name: string
    content: string
    createdAt?: Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: string | null
  }

  export type SavedResumeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedResumeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UnifiedResumeCreateInput = {
    id?: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    user: UserCreateNestedOneWithoutUnifiedResumesInput
    analyses?: ResumeAnalysisCreateNestedManyWithoutResumeInput
    shares?: ResumeShareCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeUncheckedCreateInput = {
    id?: string
    userId: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    analyses?: ResumeAnalysisUncheckedCreateNestedManyWithoutResumeInput
    shares?: ResumeShareUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutUnifiedResumesNestedInput
    analyses?: ResumeAnalysisUpdateManyWithoutResumeNestedInput
    shares?: ResumeShareUpdateManyWithoutResumeNestedInput
  }

  export type UnifiedResumeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    analyses?: ResumeAnalysisUncheckedUpdateManyWithoutResumeNestedInput
    shares?: ResumeShareUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UnifiedResumeCreateManyInput = {
    id?: string
    userId: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
  }

  export type UnifiedResumeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UnifiedResumeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeAnalysisCreateInput = {
    id?: string
    jobDescription: string
    overallScore: number
    keywordMatches: JsonNullValueInput | InputJsonValue
    similarityScore: number
    atsCompatibility: JsonNullValueInput | InputJsonValue
    sectionScores: JsonNullValueInput | InputJsonValue
    recommendations: JsonNullValueInput | InputJsonValue
    insights: JsonNullValueInput | InputJsonValue
    analysisVersion?: string
    modelUsed?: string
    processingTime?: number | null
    createdAt?: Date | string
    resume: UnifiedResumeCreateNestedOneWithoutAnalysesInput
  }

  export type ResumeAnalysisUncheckedCreateInput = {
    id?: string
    resumeId: string
    jobDescription: string
    overallScore: number
    keywordMatches: JsonNullValueInput | InputJsonValue
    similarityScore: number
    atsCompatibility: JsonNullValueInput | InputJsonValue
    sectionScores: JsonNullValueInput | InputJsonValue
    recommendations: JsonNullValueInput | InputJsonValue
    insights: JsonNullValueInput | InputJsonValue
    analysisVersion?: string
    modelUsed?: string
    processingTime?: number | null
    createdAt?: Date | string
  }

  export type ResumeAnalysisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    keywordMatches?: JsonNullValueInput | InputJsonValue
    similarityScore?: FloatFieldUpdateOperationsInput | number
    atsCompatibility?: JsonNullValueInput | InputJsonValue
    sectionScores?: JsonNullValueInput | InputJsonValue
    recommendations?: JsonNullValueInput | InputJsonValue
    insights?: JsonNullValueInput | InputJsonValue
    analysisVersion?: StringFieldUpdateOperationsInput | string
    modelUsed?: StringFieldUpdateOperationsInput | string
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UnifiedResumeUpdateOneRequiredWithoutAnalysesNestedInput
  }

  export type ResumeAnalysisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resumeId?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    keywordMatches?: JsonNullValueInput | InputJsonValue
    similarityScore?: FloatFieldUpdateOperationsInput | number
    atsCompatibility?: JsonNullValueInput | InputJsonValue
    sectionScores?: JsonNullValueInput | InputJsonValue
    recommendations?: JsonNullValueInput | InputJsonValue
    insights?: JsonNullValueInput | InputJsonValue
    analysisVersion?: StringFieldUpdateOperationsInput | string
    modelUsed?: StringFieldUpdateOperationsInput | string
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAnalysisCreateManyInput = {
    id?: string
    resumeId: string
    jobDescription: string
    overallScore: number
    keywordMatches: JsonNullValueInput | InputJsonValue
    similarityScore: number
    atsCompatibility: JsonNullValueInput | InputJsonValue
    sectionScores: JsonNullValueInput | InputJsonValue
    recommendations: JsonNullValueInput | InputJsonValue
    insights: JsonNullValueInput | InputJsonValue
    analysisVersion?: string
    modelUsed?: string
    processingTime?: number | null
    createdAt?: Date | string
  }

  export type ResumeAnalysisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    keywordMatches?: JsonNullValueInput | InputJsonValue
    similarityScore?: FloatFieldUpdateOperationsInput | number
    atsCompatibility?: JsonNullValueInput | InputJsonValue
    sectionScores?: JsonNullValueInput | InputJsonValue
    recommendations?: JsonNullValueInput | InputJsonValue
    insights?: JsonNullValueInput | InputJsonValue
    analysisVersion?: StringFieldUpdateOperationsInput | string
    modelUsed?: StringFieldUpdateOperationsInput | string
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAnalysisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    resumeId?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    keywordMatches?: JsonNullValueInput | InputJsonValue
    similarityScore?: FloatFieldUpdateOperationsInput | number
    atsCompatibility?: JsonNullValueInput | InputJsonValue
    sectionScores?: JsonNullValueInput | InputJsonValue
    recommendations?: JsonNullValueInput | InputJsonValue
    insights?: JsonNullValueInput | InputJsonValue
    analysisVersion?: StringFieldUpdateOperationsInput | string
    modelUsed?: StringFieldUpdateOperationsInput | string
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeShareCreateInput = {
    id?: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resume: UnifiedResumeCreateNestedOneWithoutSharesInput
    views?: ShareViewCreateNestedManyWithoutShareInput
  }

  export type ResumeShareUncheckedCreateInput = {
    id?: string
    resumeId: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    views?: ShareViewUncheckedCreateNestedManyWithoutShareInput
  }

  export type ResumeShareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UnifiedResumeUpdateOneRequiredWithoutSharesNestedInput
    views?: ShareViewUpdateManyWithoutShareNestedInput
  }

  export type ResumeShareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    resumeId?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: ShareViewUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ResumeShareCreateManyInput = {
    id?: string
    resumeId: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResumeShareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeShareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    resumeId?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareViewCreateInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    referer?: string | null
    country?: string | null
    viewedAt?: Date | string
    share: ResumeShareCreateNestedOneWithoutViewsInput
  }

  export type ShareViewUncheckedCreateInput = {
    id?: string
    shareId: string
    ipAddress?: string | null
    userAgent?: string | null
    referer?: string | null
    country?: string | null
    viewedAt?: Date | string
  }

  export type ShareViewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    share?: ResumeShareUpdateOneRequiredWithoutViewsNestedInput
  }

  export type ShareViewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareViewCreateManyInput = {
    id?: string
    shareId: string
    ipAddress?: string | null
    userAgent?: string | null
    referer?: string | null
    country?: string | null
    viewedAt?: Date | string
  }

  export type ShareViewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareViewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareId?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string
    structure: JsonNullValueInput | InputJsonValue
    sections: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPremium?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResumeTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string
    structure: JsonNullValueInput | InputJsonValue
    sections: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPremium?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResumeTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    structure?: JsonNullValueInput | InputJsonValue
    sections?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    structure?: JsonNullValueInput | InputJsonValue
    sections?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category?: string
    structure: JsonNullValueInput | InputJsonValue
    sections: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    isPremium?: boolean
    sortOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResumeTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    structure?: JsonNullValueInput | InputJsonValue
    sections?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    structure?: JsonNullValueInput | InputJsonValue
    sections?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    isPremium?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUsageCreateInput = {
    id?: string
    templateId: string
    usedAt?: Date | string
    user: UserCreateNestedOneWithoutTemplateUsagesInput
  }

  export type TemplateUsageUncheckedCreateInput = {
    id?: string
    templateId: string
    userId: string
    usedAt?: Date | string
  }

  export type TemplateUsageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTemplateUsagesNestedInput
  }

  export type TemplateUsageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUsageCreateManyInput = {
    id?: string
    templateId: string
    userId: string
    usedAt?: Date | string
  }

  export type TemplateUsageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUsageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OptimizationRunScalarRelationFilter = {
    is?: OptimizationRunWhereInput
    isNot?: OptimizationRunWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CoverLetterCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    optimizationRunId?: SortOrder
    letterText?: SortOrder
    createdAt?: SortOrder
  }

  export type CoverLetterMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    optimizationRunId?: SortOrder
    letterText?: SortOrder
    createdAt?: SortOrder
  }

  export type CoverLetterMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    optimizationRunId?: SortOrder
    letterText?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CoverLetterListRelationFilter = {
    every?: CoverLetterWhereInput
    some?: CoverLetterWhereInput
    none?: CoverLetterWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type OptimizationRunListRelationFilter = {
    every?: OptimizationRunWhereInput
    some?: OptimizationRunWhereInput
    none?: OptimizationRunWhereInput
  }

  export type ResumeFileListRelationFilter = {
    every?: ResumeFileWhereInput
    some?: ResumeFileWhereInput
    none?: ResumeFileWhereInput
  }

  export type SavedResumeListRelationFilter = {
    every?: SavedResumeWhereInput
    some?: SavedResumeWhereInput
    none?: SavedResumeWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type UsageEventListRelationFilter = {
    every?: UsageEventWhereInput
    some?: UsageEventWhereInput
    none?: UsageEventWhereInput
  }

  export type UnifiedResumeListRelationFilter = {
    every?: UnifiedResumeWhereInput
    some?: UnifiedResumeWhereInput
    none?: UnifiedResumeWhereInput
  }

  export type TemplateUsageListRelationFilter = {
    every?: TemplateUsageWhereInput
    some?: TemplateUsageWhereInput
    none?: TemplateUsageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CoverLetterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OptimizationRunOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedResumeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsageEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnifiedResumeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TemplateUsageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    freeRunsRemaining?: SortOrder
    plan?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    freeRunsRemaining?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    freeRunsRemaining?: SortOrder
    plan?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    fullName?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    freeRunsRemaining?: SortOrder
    plan?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    freeRunsRemaining?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ResumeFileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    originalTextHash?: SortOrder
  }

  export type ResumeFileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    originalTextHash?: SortOrder
  }

  export type ResumeFileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fileName?: SortOrder
    filePath?: SortOrder
    uploadedAt?: SortOrder
    originalTextHash?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type CoverLetterNullableScalarRelationFilter = {
    is?: CoverLetterWhereInput | null
    isNot?: CoverLetterWhereInput | null
  }

  export type ResumeFileNullableScalarRelationFilter = {
    is?: ResumeFileWhereInput | null
    isNot?: ResumeFileWhereInput | null
  }

  export type UsageRecordListRelationFilter = {
    every?: UsageRecordWhereInput
    some?: UsageRecordWhereInput
    none?: UsageRecordWhereInput
  }

  export type ScorecardNullableScalarRelationFilter = {
    is?: ScorecardWhereInput | null
    isNot?: ScorecardWhereInput | null
  }

  export type UsageRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OptimizationRunCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resumeFileId?: SortOrder
    jobDescription?: SortOrder
    templateId?: SortOrder
    originalText?: SortOrder
    optimizedText?: SortOrder
    bulletRewrites?: SortOrder
    summaryRewrite?: SortOrder
    skillsRewrite?: SortOrder
    keywords?: SortOrder
    requirements?: SortOrder
    targetTitle?: SortOrder
    targetCompany?: SortOrder
    aiModel?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    optimizedAtsNotes?: SortOrder
    optimizedAtsScore?: SortOrder
    originalAtsNotes?: SortOrder
    originalAtsScore?: SortOrder
  }

  export type OptimizationRunAvgOrderByAggregateInput = {
    tokenCount?: SortOrder
    costUsd?: SortOrder
    optimizedAtsScore?: SortOrder
    originalAtsScore?: SortOrder
  }

  export type OptimizationRunMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resumeFileId?: SortOrder
    jobDescription?: SortOrder
    templateId?: SortOrder
    originalText?: SortOrder
    optimizedText?: SortOrder
    summaryRewrite?: SortOrder
    skillsRewrite?: SortOrder
    targetTitle?: SortOrder
    targetCompany?: SortOrder
    aiModel?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    optimizedAtsNotes?: SortOrder
    optimizedAtsScore?: SortOrder
    originalAtsNotes?: SortOrder
    originalAtsScore?: SortOrder
  }

  export type OptimizationRunMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    resumeFileId?: SortOrder
    jobDescription?: SortOrder
    templateId?: SortOrder
    originalText?: SortOrder
    optimizedText?: SortOrder
    summaryRewrite?: SortOrder
    skillsRewrite?: SortOrder
    targetTitle?: SortOrder
    targetCompany?: SortOrder
    aiModel?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    optimizedAtsNotes?: SortOrder
    optimizedAtsScore?: SortOrder
    originalAtsNotes?: SortOrder
    originalAtsScore?: SortOrder
  }

  export type OptimizationRunSumOrderByAggregateInput = {
    tokenCount?: SortOrder
    costUsd?: SortOrder
    optimizedAtsScore?: SortOrder
    originalAtsScore?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planName?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planName?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planName?: SortOrder
    status?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
  }

  export type SubscriptionScalarRelationFilter = {
    is?: SubscriptionWhereInput
    isNot?: SubscriptionWhereInput
  }

  export type UsageRecordCountOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    optimizationRunId?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageRecordAvgOrderByAggregateInput = {
    tokenCount?: SortOrder
    costUsd?: SortOrder
  }

  export type UsageRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    optimizationRunId?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageRecordMinOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    optimizationRunId?: SortOrder
    tokenCount?: SortOrder
    costUsd?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageRecordSumOrderByAggregateInput = {
    tokenCount?: SortOrder
    costUsd?: SortOrder
  }

  export type UsageEventCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventType?: SortOrder
    meta?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageEventMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventType?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageEventMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    eventType?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ScorecardCountOrderByAggregateInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    overallScore?: SortOrder
    metrics?: SortOrder
    takeaways?: SortOrder
    redFlags?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScorecardAvgOrderByAggregateInput = {
    overallScore?: SortOrder
  }

  export type ScorecardMaxOrderByAggregateInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    overallScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScorecardMinOrderByAggregateInput = {
    id?: SortOrder
    optimizationRunId?: SortOrder
    overallScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScorecardSumOrderByAggregateInput = {
    overallScore?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type SavedResumeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    parsedData?: SortOrder
    textHash?: SortOrder
  }

  export type SavedResumeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    textHash?: SortOrder
  }

  export type SavedResumeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    textHash?: SortOrder
  }

  export type ResumeAnalysisListRelationFilter = {
    every?: ResumeAnalysisWhereInput
    some?: ResumeAnalysisWhereInput
    none?: ResumeAnalysisWhereInput
  }

  export type ResumeShareListRelationFilter = {
    every?: ResumeShareWhereInput
    some?: ResumeShareWhereInput
    none?: ResumeShareWhereInput
  }

  export type ResumeAnalysisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnifiedResumeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    version?: SortOrder
    builderData?: SortOrder
    optimizationData?: SortOrder
    sharingData?: SortOrder
    title?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    analyzedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type UnifiedResumeAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type UnifiedResumeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    version?: SortOrder
    title?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    analyzedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type UnifiedResumeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    version?: SortOrder
    title?: SortOrder
    template?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    analyzedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type UnifiedResumeSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UnifiedResumeScalarRelationFilter = {
    is?: UnifiedResumeWhereInput
    isNot?: UnifiedResumeWhereInput
  }

  export type ResumeAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobDescription?: SortOrder
    overallScore?: SortOrder
    keywordMatches?: SortOrder
    similarityScore?: SortOrder
    atsCompatibility?: SortOrder
    sectionScores?: SortOrder
    recommendations?: SortOrder
    insights?: SortOrder
    analysisVersion?: SortOrder
    modelUsed?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeAnalysisAvgOrderByAggregateInput = {
    overallScore?: SortOrder
    similarityScore?: SortOrder
    processingTime?: SortOrder
  }

  export type ResumeAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobDescription?: SortOrder
    overallScore?: SortOrder
    similarityScore?: SortOrder
    analysisVersion?: SortOrder
    modelUsed?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    jobDescription?: SortOrder
    overallScore?: SortOrder
    similarityScore?: SortOrder
    analysisVersion?: SortOrder
    modelUsed?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
  }

  export type ResumeAnalysisSumOrderByAggregateInput = {
    overallScore?: SortOrder
    similarityScore?: SortOrder
    processingTime?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ShareViewListRelationFilter = {
    every?: ShareViewWhereInput
    some?: ShareViewWhereInput
    none?: ShareViewWhereInput
  }

  export type ShareViewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeShareCountOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shareToken?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    expiresAt?: SortOrder
    viewCount?: SortOrder
    lastViewed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeShareAvgOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type ResumeShareMaxOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shareToken?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    expiresAt?: SortOrder
    viewCount?: SortOrder
    lastViewed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeShareMinOrderByAggregateInput = {
    id?: SortOrder
    resumeId?: SortOrder
    shareToken?: SortOrder
    isPublic?: SortOrder
    password?: SortOrder
    expiresAt?: SortOrder
    viewCount?: SortOrder
    lastViewed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeShareSumOrderByAggregateInput = {
    viewCount?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ResumeShareScalarRelationFilter = {
    is?: ResumeShareWhereInput
    isNot?: ResumeShareWhereInput
  }

  export type ShareViewCountOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    referer?: SortOrder
    country?: SortOrder
    viewedAt?: SortOrder
  }

  export type ShareViewMaxOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    referer?: SortOrder
    country?: SortOrder
    viewedAt?: SortOrder
  }

  export type ShareViewMinOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    referer?: SortOrder
    country?: SortOrder
    viewedAt?: SortOrder
  }

  export type ResumeTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    structure?: SortOrder
    sections?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeTemplateAvgOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type ResumeTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    isActive?: SortOrder
    isPremium?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeTemplateSumOrderByAggregateInput = {
    sortOrder?: SortOrder
  }

  export type TemplateUsageCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
  }

  export type TemplateUsageMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
  }

  export type TemplateUsageMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    userId?: SortOrder
    usedAt?: SortOrder
  }

  export type OptimizationRunCreateNestedOneWithoutCoverLetterInput = {
    create?: XOR<OptimizationRunCreateWithoutCoverLetterInput, OptimizationRunUncheckedCreateWithoutCoverLetterInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutCoverLetterInput
    connect?: OptimizationRunWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCoverLettersInput = {
    create?: XOR<UserCreateWithoutCoverLettersInput, UserUncheckedCreateWithoutCoverLettersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoverLettersInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type OptimizationRunUpdateOneRequiredWithoutCoverLetterNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutCoverLetterInput, OptimizationRunUncheckedCreateWithoutCoverLetterInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutCoverLetterInput
    upsert?: OptimizationRunUpsertWithoutCoverLetterInput
    connect?: OptimizationRunWhereUniqueInput
    update?: XOR<XOR<OptimizationRunUpdateToOneWithWhereWithoutCoverLetterInput, OptimizationRunUpdateWithoutCoverLetterInput>, OptimizationRunUncheckedUpdateWithoutCoverLetterInput>
  }

  export type UserUpdateOneRequiredWithoutCoverLettersNestedInput = {
    create?: XOR<UserCreateWithoutCoverLettersInput, UserUncheckedCreateWithoutCoverLettersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoverLettersInput
    upsert?: UserUpsertWithoutCoverLettersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCoverLettersInput, UserUpdateWithoutCoverLettersInput>, UserUncheckedUpdateWithoutCoverLettersInput>
  }

  export type CoverLetterCreateNestedManyWithoutUserInput = {
    create?: XOR<CoverLetterCreateWithoutUserInput, CoverLetterUncheckedCreateWithoutUserInput> | CoverLetterCreateWithoutUserInput[] | CoverLetterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoverLetterCreateOrConnectWithoutUserInput | CoverLetterCreateOrConnectWithoutUserInput[]
    createMany?: CoverLetterCreateManyUserInputEnvelope
    connect?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type OptimizationRunCreateNestedManyWithoutUserInput = {
    create?: XOR<OptimizationRunCreateWithoutUserInput, OptimizationRunUncheckedCreateWithoutUserInput> | OptimizationRunCreateWithoutUserInput[] | OptimizationRunUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutUserInput | OptimizationRunCreateOrConnectWithoutUserInput[]
    createMany?: OptimizationRunCreateManyUserInputEnvelope
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
  }

  export type ResumeFileCreateNestedManyWithoutUserInput = {
    create?: XOR<ResumeFileCreateWithoutUserInput, ResumeFileUncheckedCreateWithoutUserInput> | ResumeFileCreateWithoutUserInput[] | ResumeFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeFileCreateOrConnectWithoutUserInput | ResumeFileCreateOrConnectWithoutUserInput[]
    createMany?: ResumeFileCreateManyUserInputEnvelope
    connect?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
  }

  export type SavedResumeCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedResumeCreateWithoutUserInput, SavedResumeUncheckedCreateWithoutUserInput> | SavedResumeCreateWithoutUserInput[] | SavedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResumeCreateOrConnectWithoutUserInput | SavedResumeCreateOrConnectWithoutUserInput[]
    createMany?: SavedResumeCreateManyUserInputEnvelope
    connect?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type UsageEventCreateNestedManyWithoutUserInput = {
    create?: XOR<UsageEventCreateWithoutUserInput, UsageEventUncheckedCreateWithoutUserInput> | UsageEventCreateWithoutUserInput[] | UsageEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutUserInput | UsageEventCreateOrConnectWithoutUserInput[]
    createMany?: UsageEventCreateManyUserInputEnvelope
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
  }

  export type UnifiedResumeCreateNestedManyWithoutUserInput = {
    create?: XOR<UnifiedResumeCreateWithoutUserInput, UnifiedResumeUncheckedCreateWithoutUserInput> | UnifiedResumeCreateWithoutUserInput[] | UnifiedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutUserInput | UnifiedResumeCreateOrConnectWithoutUserInput[]
    createMany?: UnifiedResumeCreateManyUserInputEnvelope
    connect?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
  }

  export type TemplateUsageCreateNestedManyWithoutUserInput = {
    create?: XOR<TemplateUsageCreateWithoutUserInput, TemplateUsageUncheckedCreateWithoutUserInput> | TemplateUsageCreateWithoutUserInput[] | TemplateUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateUsageCreateOrConnectWithoutUserInput | TemplateUsageCreateOrConnectWithoutUserInput[]
    createMany?: TemplateUsageCreateManyUserInputEnvelope
    connect?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
  }

  export type CoverLetterUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CoverLetterCreateWithoutUserInput, CoverLetterUncheckedCreateWithoutUserInput> | CoverLetterCreateWithoutUserInput[] | CoverLetterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoverLetterCreateOrConnectWithoutUserInput | CoverLetterCreateOrConnectWithoutUserInput[]
    createMany?: CoverLetterCreateManyUserInputEnvelope
    connect?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type OptimizationRunUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OptimizationRunCreateWithoutUserInput, OptimizationRunUncheckedCreateWithoutUserInput> | OptimizationRunCreateWithoutUserInput[] | OptimizationRunUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutUserInput | OptimizationRunCreateOrConnectWithoutUserInput[]
    createMany?: OptimizationRunCreateManyUserInputEnvelope
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
  }

  export type ResumeFileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ResumeFileCreateWithoutUserInput, ResumeFileUncheckedCreateWithoutUserInput> | ResumeFileCreateWithoutUserInput[] | ResumeFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeFileCreateOrConnectWithoutUserInput | ResumeFileCreateOrConnectWithoutUserInput[]
    createMany?: ResumeFileCreateManyUserInputEnvelope
    connect?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
  }

  export type SavedResumeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SavedResumeCreateWithoutUserInput, SavedResumeUncheckedCreateWithoutUserInput> | SavedResumeCreateWithoutUserInput[] | SavedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResumeCreateOrConnectWithoutUserInput | SavedResumeCreateOrConnectWithoutUserInput[]
    createMany?: SavedResumeCreateManyUserInputEnvelope
    connect?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type UsageEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UsageEventCreateWithoutUserInput, UsageEventUncheckedCreateWithoutUserInput> | UsageEventCreateWithoutUserInput[] | UsageEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutUserInput | UsageEventCreateOrConnectWithoutUserInput[]
    createMany?: UsageEventCreateManyUserInputEnvelope
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
  }

  export type UnifiedResumeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UnifiedResumeCreateWithoutUserInput, UnifiedResumeUncheckedCreateWithoutUserInput> | UnifiedResumeCreateWithoutUserInput[] | UnifiedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutUserInput | UnifiedResumeCreateOrConnectWithoutUserInput[]
    createMany?: UnifiedResumeCreateManyUserInputEnvelope
    connect?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
  }

  export type TemplateUsageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TemplateUsageCreateWithoutUserInput, TemplateUsageUncheckedCreateWithoutUserInput> | TemplateUsageCreateWithoutUserInput[] | TemplateUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateUsageCreateOrConnectWithoutUserInput | TemplateUsageCreateOrConnectWithoutUserInput[]
    createMany?: TemplateUsageCreateManyUserInputEnvelope
    connect?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CoverLetterUpdateManyWithoutUserNestedInput = {
    create?: XOR<CoverLetterCreateWithoutUserInput, CoverLetterUncheckedCreateWithoutUserInput> | CoverLetterCreateWithoutUserInput[] | CoverLetterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoverLetterCreateOrConnectWithoutUserInput | CoverLetterCreateOrConnectWithoutUserInput[]
    upsert?: CoverLetterUpsertWithWhereUniqueWithoutUserInput | CoverLetterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CoverLetterCreateManyUserInputEnvelope
    set?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    disconnect?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    delete?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    connect?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    update?: CoverLetterUpdateWithWhereUniqueWithoutUserInput | CoverLetterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CoverLetterUpdateManyWithWhereWithoutUserInput | CoverLetterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CoverLetterScalarWhereInput | CoverLetterScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type OptimizationRunUpdateManyWithoutUserNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutUserInput, OptimizationRunUncheckedCreateWithoutUserInput> | OptimizationRunCreateWithoutUserInput[] | OptimizationRunUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutUserInput | OptimizationRunCreateOrConnectWithoutUserInput[]
    upsert?: OptimizationRunUpsertWithWhereUniqueWithoutUserInput | OptimizationRunUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OptimizationRunCreateManyUserInputEnvelope
    set?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    disconnect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    delete?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    update?: OptimizationRunUpdateWithWhereUniqueWithoutUserInput | OptimizationRunUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OptimizationRunUpdateManyWithWhereWithoutUserInput | OptimizationRunUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OptimizationRunScalarWhereInput | OptimizationRunScalarWhereInput[]
  }

  export type ResumeFileUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResumeFileCreateWithoutUserInput, ResumeFileUncheckedCreateWithoutUserInput> | ResumeFileCreateWithoutUserInput[] | ResumeFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeFileCreateOrConnectWithoutUserInput | ResumeFileCreateOrConnectWithoutUserInput[]
    upsert?: ResumeFileUpsertWithWhereUniqueWithoutUserInput | ResumeFileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResumeFileCreateManyUserInputEnvelope
    set?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    disconnect?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    delete?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    connect?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    update?: ResumeFileUpdateWithWhereUniqueWithoutUserInput | ResumeFileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResumeFileUpdateManyWithWhereWithoutUserInput | ResumeFileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResumeFileScalarWhereInput | ResumeFileScalarWhereInput[]
  }

  export type SavedResumeUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedResumeCreateWithoutUserInput, SavedResumeUncheckedCreateWithoutUserInput> | SavedResumeCreateWithoutUserInput[] | SavedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResumeCreateOrConnectWithoutUserInput | SavedResumeCreateOrConnectWithoutUserInput[]
    upsert?: SavedResumeUpsertWithWhereUniqueWithoutUserInput | SavedResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedResumeCreateManyUserInputEnvelope
    set?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    disconnect?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    delete?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    connect?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    update?: SavedResumeUpdateWithWhereUniqueWithoutUserInput | SavedResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedResumeUpdateManyWithWhereWithoutUserInput | SavedResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedResumeScalarWhereInput | SavedResumeScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UsageEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsageEventCreateWithoutUserInput, UsageEventUncheckedCreateWithoutUserInput> | UsageEventCreateWithoutUserInput[] | UsageEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutUserInput | UsageEventCreateOrConnectWithoutUserInput[]
    upsert?: UsageEventUpsertWithWhereUniqueWithoutUserInput | UsageEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsageEventCreateManyUserInputEnvelope
    set?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    disconnect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    delete?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    update?: UsageEventUpdateWithWhereUniqueWithoutUserInput | UsageEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsageEventUpdateManyWithWhereWithoutUserInput | UsageEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
  }

  export type UnifiedResumeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UnifiedResumeCreateWithoutUserInput, UnifiedResumeUncheckedCreateWithoutUserInput> | UnifiedResumeCreateWithoutUserInput[] | UnifiedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutUserInput | UnifiedResumeCreateOrConnectWithoutUserInput[]
    upsert?: UnifiedResumeUpsertWithWhereUniqueWithoutUserInput | UnifiedResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UnifiedResumeCreateManyUserInputEnvelope
    set?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    disconnect?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    delete?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    connect?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    update?: UnifiedResumeUpdateWithWhereUniqueWithoutUserInput | UnifiedResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UnifiedResumeUpdateManyWithWhereWithoutUserInput | UnifiedResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UnifiedResumeScalarWhereInput | UnifiedResumeScalarWhereInput[]
  }

  export type TemplateUsageUpdateManyWithoutUserNestedInput = {
    create?: XOR<TemplateUsageCreateWithoutUserInput, TemplateUsageUncheckedCreateWithoutUserInput> | TemplateUsageCreateWithoutUserInput[] | TemplateUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateUsageCreateOrConnectWithoutUserInput | TemplateUsageCreateOrConnectWithoutUserInput[]
    upsert?: TemplateUsageUpsertWithWhereUniqueWithoutUserInput | TemplateUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TemplateUsageCreateManyUserInputEnvelope
    set?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    disconnect?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    delete?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    connect?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    update?: TemplateUsageUpdateWithWhereUniqueWithoutUserInput | TemplateUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TemplateUsageUpdateManyWithWhereWithoutUserInput | TemplateUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TemplateUsageScalarWhereInput | TemplateUsageScalarWhereInput[]
  }

  export type CoverLetterUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CoverLetterCreateWithoutUserInput, CoverLetterUncheckedCreateWithoutUserInput> | CoverLetterCreateWithoutUserInput[] | CoverLetterUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CoverLetterCreateOrConnectWithoutUserInput | CoverLetterCreateOrConnectWithoutUserInput[]
    upsert?: CoverLetterUpsertWithWhereUniqueWithoutUserInput | CoverLetterUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CoverLetterCreateManyUserInputEnvelope
    set?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    disconnect?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    delete?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    connect?: CoverLetterWhereUniqueInput | CoverLetterWhereUniqueInput[]
    update?: CoverLetterUpdateWithWhereUniqueWithoutUserInput | CoverLetterUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CoverLetterUpdateManyWithWhereWithoutUserInput | CoverLetterUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CoverLetterScalarWhereInput | CoverLetterScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type OptimizationRunUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutUserInput, OptimizationRunUncheckedCreateWithoutUserInput> | OptimizationRunCreateWithoutUserInput[] | OptimizationRunUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutUserInput | OptimizationRunCreateOrConnectWithoutUserInput[]
    upsert?: OptimizationRunUpsertWithWhereUniqueWithoutUserInput | OptimizationRunUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OptimizationRunCreateManyUserInputEnvelope
    set?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    disconnect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    delete?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    update?: OptimizationRunUpdateWithWhereUniqueWithoutUserInput | OptimizationRunUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OptimizationRunUpdateManyWithWhereWithoutUserInput | OptimizationRunUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OptimizationRunScalarWhereInput | OptimizationRunScalarWhereInput[]
  }

  export type ResumeFileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResumeFileCreateWithoutUserInput, ResumeFileUncheckedCreateWithoutUserInput> | ResumeFileCreateWithoutUserInput[] | ResumeFileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResumeFileCreateOrConnectWithoutUserInput | ResumeFileCreateOrConnectWithoutUserInput[]
    upsert?: ResumeFileUpsertWithWhereUniqueWithoutUserInput | ResumeFileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResumeFileCreateManyUserInputEnvelope
    set?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    disconnect?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    delete?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    connect?: ResumeFileWhereUniqueInput | ResumeFileWhereUniqueInput[]
    update?: ResumeFileUpdateWithWhereUniqueWithoutUserInput | ResumeFileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResumeFileUpdateManyWithWhereWithoutUserInput | ResumeFileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResumeFileScalarWhereInput | ResumeFileScalarWhereInput[]
  }

  export type SavedResumeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SavedResumeCreateWithoutUserInput, SavedResumeUncheckedCreateWithoutUserInput> | SavedResumeCreateWithoutUserInput[] | SavedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SavedResumeCreateOrConnectWithoutUserInput | SavedResumeCreateOrConnectWithoutUserInput[]
    upsert?: SavedResumeUpsertWithWhereUniqueWithoutUserInput | SavedResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SavedResumeCreateManyUserInputEnvelope
    set?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    disconnect?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    delete?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    connect?: SavedResumeWhereUniqueInput | SavedResumeWhereUniqueInput[]
    update?: SavedResumeUpdateWithWhereUniqueWithoutUserInput | SavedResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SavedResumeUpdateManyWithWhereWithoutUserInput | SavedResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SavedResumeScalarWhereInput | SavedResumeScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput> | SubscriptionCreateWithoutUserInput[] | SubscriptionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUserInput | SubscriptionCreateOrConnectWithoutUserInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutUserInput | SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriptionCreateManyUserInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutUserInput | SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutUserInput | SubscriptionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type UsageEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UsageEventCreateWithoutUserInput, UsageEventUncheckedCreateWithoutUserInput> | UsageEventCreateWithoutUserInput[] | UsageEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutUserInput | UsageEventCreateOrConnectWithoutUserInput[]
    upsert?: UsageEventUpsertWithWhereUniqueWithoutUserInput | UsageEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UsageEventCreateManyUserInputEnvelope
    set?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    disconnect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    delete?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    update?: UsageEventUpdateWithWhereUniqueWithoutUserInput | UsageEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UsageEventUpdateManyWithWhereWithoutUserInput | UsageEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
  }

  export type UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UnifiedResumeCreateWithoutUserInput, UnifiedResumeUncheckedCreateWithoutUserInput> | UnifiedResumeCreateWithoutUserInput[] | UnifiedResumeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutUserInput | UnifiedResumeCreateOrConnectWithoutUserInput[]
    upsert?: UnifiedResumeUpsertWithWhereUniqueWithoutUserInput | UnifiedResumeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UnifiedResumeCreateManyUserInputEnvelope
    set?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    disconnect?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    delete?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    connect?: UnifiedResumeWhereUniqueInput | UnifiedResumeWhereUniqueInput[]
    update?: UnifiedResumeUpdateWithWhereUniqueWithoutUserInput | UnifiedResumeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UnifiedResumeUpdateManyWithWhereWithoutUserInput | UnifiedResumeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UnifiedResumeScalarWhereInput | UnifiedResumeScalarWhereInput[]
  }

  export type TemplateUsageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TemplateUsageCreateWithoutUserInput, TemplateUsageUncheckedCreateWithoutUserInput> | TemplateUsageCreateWithoutUserInput[] | TemplateUsageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateUsageCreateOrConnectWithoutUserInput | TemplateUsageCreateOrConnectWithoutUserInput[]
    upsert?: TemplateUsageUpsertWithWhereUniqueWithoutUserInput | TemplateUsageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TemplateUsageCreateManyUserInputEnvelope
    set?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    disconnect?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    delete?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    connect?: TemplateUsageWhereUniqueInput | TemplateUsageWhereUniqueInput[]
    update?: TemplateUsageUpdateWithWhereUniqueWithoutUserInput | TemplateUsageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TemplateUsageUpdateManyWithWhereWithoutUserInput | TemplateUsageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TemplateUsageScalarWhereInput | TemplateUsageScalarWhereInput[]
  }

  export type OptimizationRunCreateNestedManyWithoutResumeFileInput = {
    create?: XOR<OptimizationRunCreateWithoutResumeFileInput, OptimizationRunUncheckedCreateWithoutResumeFileInput> | OptimizationRunCreateWithoutResumeFileInput[] | OptimizationRunUncheckedCreateWithoutResumeFileInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutResumeFileInput | OptimizationRunCreateOrConnectWithoutResumeFileInput[]
    createMany?: OptimizationRunCreateManyResumeFileInputEnvelope
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutResumeFilesInput = {
    create?: XOR<UserCreateWithoutResumeFilesInput, UserUncheckedCreateWithoutResumeFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeFilesInput
    connect?: UserWhereUniqueInput
  }

  export type OptimizationRunUncheckedCreateNestedManyWithoutResumeFileInput = {
    create?: XOR<OptimizationRunCreateWithoutResumeFileInput, OptimizationRunUncheckedCreateWithoutResumeFileInput> | OptimizationRunCreateWithoutResumeFileInput[] | OptimizationRunUncheckedCreateWithoutResumeFileInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutResumeFileInput | OptimizationRunCreateOrConnectWithoutResumeFileInput[]
    createMany?: OptimizationRunCreateManyResumeFileInputEnvelope
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
  }

  export type OptimizationRunUpdateManyWithoutResumeFileNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutResumeFileInput, OptimizationRunUncheckedCreateWithoutResumeFileInput> | OptimizationRunCreateWithoutResumeFileInput[] | OptimizationRunUncheckedCreateWithoutResumeFileInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutResumeFileInput | OptimizationRunCreateOrConnectWithoutResumeFileInput[]
    upsert?: OptimizationRunUpsertWithWhereUniqueWithoutResumeFileInput | OptimizationRunUpsertWithWhereUniqueWithoutResumeFileInput[]
    createMany?: OptimizationRunCreateManyResumeFileInputEnvelope
    set?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    disconnect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    delete?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    update?: OptimizationRunUpdateWithWhereUniqueWithoutResumeFileInput | OptimizationRunUpdateWithWhereUniqueWithoutResumeFileInput[]
    updateMany?: OptimizationRunUpdateManyWithWhereWithoutResumeFileInput | OptimizationRunUpdateManyWithWhereWithoutResumeFileInput[]
    deleteMany?: OptimizationRunScalarWhereInput | OptimizationRunScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutResumeFilesNestedInput = {
    create?: XOR<UserCreateWithoutResumeFilesInput, UserUncheckedCreateWithoutResumeFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResumeFilesInput
    upsert?: UserUpsertWithoutResumeFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResumeFilesInput, UserUpdateWithoutResumeFilesInput>, UserUncheckedUpdateWithoutResumeFilesInput>
  }

  export type OptimizationRunUncheckedUpdateManyWithoutResumeFileNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutResumeFileInput, OptimizationRunUncheckedCreateWithoutResumeFileInput> | OptimizationRunCreateWithoutResumeFileInput[] | OptimizationRunUncheckedCreateWithoutResumeFileInput[]
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutResumeFileInput | OptimizationRunCreateOrConnectWithoutResumeFileInput[]
    upsert?: OptimizationRunUpsertWithWhereUniqueWithoutResumeFileInput | OptimizationRunUpsertWithWhereUniqueWithoutResumeFileInput[]
    createMany?: OptimizationRunCreateManyResumeFileInputEnvelope
    set?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    disconnect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    delete?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    connect?: OptimizationRunWhereUniqueInput | OptimizationRunWhereUniqueInput[]
    update?: OptimizationRunUpdateWithWhereUniqueWithoutResumeFileInput | OptimizationRunUpdateWithWhereUniqueWithoutResumeFileInput[]
    updateMany?: OptimizationRunUpdateManyWithWhereWithoutResumeFileInput | OptimizationRunUpdateManyWithWhereWithoutResumeFileInput[]
    deleteMany?: OptimizationRunScalarWhereInput | OptimizationRunScalarWhereInput[]
  }

  export type CoverLetterCreateNestedOneWithoutOptimizationRunInput = {
    create?: XOR<CoverLetterCreateWithoutOptimizationRunInput, CoverLetterUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: CoverLetterCreateOrConnectWithoutOptimizationRunInput
    connect?: CoverLetterWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutOptimizationRunInput = {
    create?: XOR<FeedbackCreateWithoutOptimizationRunInput, FeedbackUncheckedCreateWithoutOptimizationRunInput> | FeedbackCreateWithoutOptimizationRunInput[] | FeedbackUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOptimizationRunInput | FeedbackCreateOrConnectWithoutOptimizationRunInput[]
    createMany?: FeedbackCreateManyOptimizationRunInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ResumeFileCreateNestedOneWithoutOptimizationRunsInput = {
    create?: XOR<ResumeFileCreateWithoutOptimizationRunsInput, ResumeFileUncheckedCreateWithoutOptimizationRunsInput>
    connectOrCreate?: ResumeFileCreateOrConnectWithoutOptimizationRunsInput
    connect?: ResumeFileWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOptimizationRunsInput = {
    create?: XOR<UserCreateWithoutOptimizationRunsInput, UserUncheckedCreateWithoutOptimizationRunsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOptimizationRunsInput
    connect?: UserWhereUniqueInput
  }

  export type UsageRecordCreateNestedManyWithoutOptimizationRunInput = {
    create?: XOR<UsageRecordCreateWithoutOptimizationRunInput, UsageRecordUncheckedCreateWithoutOptimizationRunInput> | UsageRecordCreateWithoutOptimizationRunInput[] | UsageRecordUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutOptimizationRunInput | UsageRecordCreateOrConnectWithoutOptimizationRunInput[]
    createMany?: UsageRecordCreateManyOptimizationRunInputEnvelope
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
  }

  export type ScorecardCreateNestedOneWithoutOptimizationRunInput = {
    create?: XOR<ScorecardCreateWithoutOptimizationRunInput, ScorecardUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: ScorecardCreateOrConnectWithoutOptimizationRunInput
    connect?: ScorecardWhereUniqueInput
  }

  export type CoverLetterUncheckedCreateNestedOneWithoutOptimizationRunInput = {
    create?: XOR<CoverLetterCreateWithoutOptimizationRunInput, CoverLetterUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: CoverLetterCreateOrConnectWithoutOptimizationRunInput
    connect?: CoverLetterWhereUniqueInput
  }

  export type FeedbackUncheckedCreateNestedManyWithoutOptimizationRunInput = {
    create?: XOR<FeedbackCreateWithoutOptimizationRunInput, FeedbackUncheckedCreateWithoutOptimizationRunInput> | FeedbackCreateWithoutOptimizationRunInput[] | FeedbackUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOptimizationRunInput | FeedbackCreateOrConnectWithoutOptimizationRunInput[]
    createMany?: FeedbackCreateManyOptimizationRunInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type UsageRecordUncheckedCreateNestedManyWithoutOptimizationRunInput = {
    create?: XOR<UsageRecordCreateWithoutOptimizationRunInput, UsageRecordUncheckedCreateWithoutOptimizationRunInput> | UsageRecordCreateWithoutOptimizationRunInput[] | UsageRecordUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutOptimizationRunInput | UsageRecordCreateOrConnectWithoutOptimizationRunInput[]
    createMany?: UsageRecordCreateManyOptimizationRunInputEnvelope
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
  }

  export type ScorecardUncheckedCreateNestedOneWithoutOptimizationRunInput = {
    create?: XOR<ScorecardCreateWithoutOptimizationRunInput, ScorecardUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: ScorecardCreateOrConnectWithoutOptimizationRunInput
    connect?: ScorecardWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CoverLetterUpdateOneWithoutOptimizationRunNestedInput = {
    create?: XOR<CoverLetterCreateWithoutOptimizationRunInput, CoverLetterUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: CoverLetterCreateOrConnectWithoutOptimizationRunInput
    upsert?: CoverLetterUpsertWithoutOptimizationRunInput
    disconnect?: CoverLetterWhereInput | boolean
    delete?: CoverLetterWhereInput | boolean
    connect?: CoverLetterWhereUniqueInput
    update?: XOR<XOR<CoverLetterUpdateToOneWithWhereWithoutOptimizationRunInput, CoverLetterUpdateWithoutOptimizationRunInput>, CoverLetterUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type FeedbackUpdateManyWithoutOptimizationRunNestedInput = {
    create?: XOR<FeedbackCreateWithoutOptimizationRunInput, FeedbackUncheckedCreateWithoutOptimizationRunInput> | FeedbackCreateWithoutOptimizationRunInput[] | FeedbackUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOptimizationRunInput | FeedbackCreateOrConnectWithoutOptimizationRunInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutOptimizationRunInput | FeedbackUpsertWithWhereUniqueWithoutOptimizationRunInput[]
    createMany?: FeedbackCreateManyOptimizationRunInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutOptimizationRunInput | FeedbackUpdateWithWhereUniqueWithoutOptimizationRunInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutOptimizationRunInput | FeedbackUpdateManyWithWhereWithoutOptimizationRunInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ResumeFileUpdateOneWithoutOptimizationRunsNestedInput = {
    create?: XOR<ResumeFileCreateWithoutOptimizationRunsInput, ResumeFileUncheckedCreateWithoutOptimizationRunsInput>
    connectOrCreate?: ResumeFileCreateOrConnectWithoutOptimizationRunsInput
    upsert?: ResumeFileUpsertWithoutOptimizationRunsInput
    disconnect?: ResumeFileWhereInput | boolean
    delete?: ResumeFileWhereInput | boolean
    connect?: ResumeFileWhereUniqueInput
    update?: XOR<XOR<ResumeFileUpdateToOneWithWhereWithoutOptimizationRunsInput, ResumeFileUpdateWithoutOptimizationRunsInput>, ResumeFileUncheckedUpdateWithoutOptimizationRunsInput>
  }

  export type UserUpdateOneRequiredWithoutOptimizationRunsNestedInput = {
    create?: XOR<UserCreateWithoutOptimizationRunsInput, UserUncheckedCreateWithoutOptimizationRunsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOptimizationRunsInput
    upsert?: UserUpsertWithoutOptimizationRunsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOptimizationRunsInput, UserUpdateWithoutOptimizationRunsInput>, UserUncheckedUpdateWithoutOptimizationRunsInput>
  }

  export type UsageRecordUpdateManyWithoutOptimizationRunNestedInput = {
    create?: XOR<UsageRecordCreateWithoutOptimizationRunInput, UsageRecordUncheckedCreateWithoutOptimizationRunInput> | UsageRecordCreateWithoutOptimizationRunInput[] | UsageRecordUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutOptimizationRunInput | UsageRecordCreateOrConnectWithoutOptimizationRunInput[]
    upsert?: UsageRecordUpsertWithWhereUniqueWithoutOptimizationRunInput | UsageRecordUpsertWithWhereUniqueWithoutOptimizationRunInput[]
    createMany?: UsageRecordCreateManyOptimizationRunInputEnvelope
    set?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    disconnect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    delete?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    update?: UsageRecordUpdateWithWhereUniqueWithoutOptimizationRunInput | UsageRecordUpdateWithWhereUniqueWithoutOptimizationRunInput[]
    updateMany?: UsageRecordUpdateManyWithWhereWithoutOptimizationRunInput | UsageRecordUpdateManyWithWhereWithoutOptimizationRunInput[]
    deleteMany?: UsageRecordScalarWhereInput | UsageRecordScalarWhereInput[]
  }

  export type ScorecardUpdateOneWithoutOptimizationRunNestedInput = {
    create?: XOR<ScorecardCreateWithoutOptimizationRunInput, ScorecardUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: ScorecardCreateOrConnectWithoutOptimizationRunInput
    upsert?: ScorecardUpsertWithoutOptimizationRunInput
    disconnect?: ScorecardWhereInput | boolean
    delete?: ScorecardWhereInput | boolean
    connect?: ScorecardWhereUniqueInput
    update?: XOR<XOR<ScorecardUpdateToOneWithWhereWithoutOptimizationRunInput, ScorecardUpdateWithoutOptimizationRunInput>, ScorecardUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type CoverLetterUncheckedUpdateOneWithoutOptimizationRunNestedInput = {
    create?: XOR<CoverLetterCreateWithoutOptimizationRunInput, CoverLetterUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: CoverLetterCreateOrConnectWithoutOptimizationRunInput
    upsert?: CoverLetterUpsertWithoutOptimizationRunInput
    disconnect?: CoverLetterWhereInput | boolean
    delete?: CoverLetterWhereInput | boolean
    connect?: CoverLetterWhereUniqueInput
    update?: XOR<XOR<CoverLetterUpdateToOneWithWhereWithoutOptimizationRunInput, CoverLetterUpdateWithoutOptimizationRunInput>, CoverLetterUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type FeedbackUncheckedUpdateManyWithoutOptimizationRunNestedInput = {
    create?: XOR<FeedbackCreateWithoutOptimizationRunInput, FeedbackUncheckedCreateWithoutOptimizationRunInput> | FeedbackCreateWithoutOptimizationRunInput[] | FeedbackUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutOptimizationRunInput | FeedbackCreateOrConnectWithoutOptimizationRunInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutOptimizationRunInput | FeedbackUpsertWithWhereUniqueWithoutOptimizationRunInput[]
    createMany?: FeedbackCreateManyOptimizationRunInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutOptimizationRunInput | FeedbackUpdateWithWhereUniqueWithoutOptimizationRunInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutOptimizationRunInput | FeedbackUpdateManyWithWhereWithoutOptimizationRunInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UsageRecordUncheckedUpdateManyWithoutOptimizationRunNestedInput = {
    create?: XOR<UsageRecordCreateWithoutOptimizationRunInput, UsageRecordUncheckedCreateWithoutOptimizationRunInput> | UsageRecordCreateWithoutOptimizationRunInput[] | UsageRecordUncheckedCreateWithoutOptimizationRunInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutOptimizationRunInput | UsageRecordCreateOrConnectWithoutOptimizationRunInput[]
    upsert?: UsageRecordUpsertWithWhereUniqueWithoutOptimizationRunInput | UsageRecordUpsertWithWhereUniqueWithoutOptimizationRunInput[]
    createMany?: UsageRecordCreateManyOptimizationRunInputEnvelope
    set?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    disconnect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    delete?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    update?: UsageRecordUpdateWithWhereUniqueWithoutOptimizationRunInput | UsageRecordUpdateWithWhereUniqueWithoutOptimizationRunInput[]
    updateMany?: UsageRecordUpdateManyWithWhereWithoutOptimizationRunInput | UsageRecordUpdateManyWithWhereWithoutOptimizationRunInput[]
    deleteMany?: UsageRecordScalarWhereInput | UsageRecordScalarWhereInput[]
  }

  export type ScorecardUncheckedUpdateOneWithoutOptimizationRunNestedInput = {
    create?: XOR<ScorecardCreateWithoutOptimizationRunInput, ScorecardUncheckedCreateWithoutOptimizationRunInput>
    connectOrCreate?: ScorecardCreateOrConnectWithoutOptimizationRunInput
    upsert?: ScorecardUpsertWithoutOptimizationRunInput
    disconnect?: ScorecardWhereInput | boolean
    delete?: ScorecardWhereInput | boolean
    connect?: ScorecardWhereUniqueInput
    update?: XOR<XOR<ScorecardUpdateToOneWithWhereWithoutOptimizationRunInput, ScorecardUpdateWithoutOptimizationRunInput>, ScorecardUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type OptimizationRunCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<OptimizationRunCreateWithoutFeedbacksInput, OptimizationRunUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutFeedbacksInput
    connect?: OptimizationRunWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type OptimizationRunUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutFeedbacksInput, OptimizationRunUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutFeedbacksInput
    upsert?: OptimizationRunUpsertWithoutFeedbacksInput
    connect?: OptimizationRunWhereUniqueInput
    update?: XOR<XOR<OptimizationRunUpdateToOneWithWhereWithoutFeedbacksInput, OptimizationRunUpdateWithoutFeedbacksInput>, OptimizationRunUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type UsageRecordCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<UsageRecordCreateWithoutSubscriptionInput, UsageRecordUncheckedCreateWithoutSubscriptionInput> | UsageRecordCreateWithoutSubscriptionInput[] | UsageRecordUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutSubscriptionInput | UsageRecordCreateOrConnectWithoutSubscriptionInput[]
    createMany?: UsageRecordCreateManySubscriptionInputEnvelope
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
  }

  export type UsageRecordUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<UsageRecordCreateWithoutSubscriptionInput, UsageRecordUncheckedCreateWithoutSubscriptionInput> | UsageRecordCreateWithoutSubscriptionInput[] | UsageRecordUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutSubscriptionInput | UsageRecordCreateOrConnectWithoutSubscriptionInput[]
    createMany?: UsageRecordCreateManySubscriptionInputEnvelope
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionsInput
    upsert?: UserUpsertWithoutSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscriptionsInput, UserUpdateWithoutSubscriptionsInput>, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UsageRecordUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<UsageRecordCreateWithoutSubscriptionInput, UsageRecordUncheckedCreateWithoutSubscriptionInput> | UsageRecordCreateWithoutSubscriptionInput[] | UsageRecordUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutSubscriptionInput | UsageRecordCreateOrConnectWithoutSubscriptionInput[]
    upsert?: UsageRecordUpsertWithWhereUniqueWithoutSubscriptionInput | UsageRecordUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: UsageRecordCreateManySubscriptionInputEnvelope
    set?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    disconnect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    delete?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    update?: UsageRecordUpdateWithWhereUniqueWithoutSubscriptionInput | UsageRecordUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: UsageRecordUpdateManyWithWhereWithoutSubscriptionInput | UsageRecordUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: UsageRecordScalarWhereInput | UsageRecordScalarWhereInput[]
  }

  export type UsageRecordUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<UsageRecordCreateWithoutSubscriptionInput, UsageRecordUncheckedCreateWithoutSubscriptionInput> | UsageRecordCreateWithoutSubscriptionInput[] | UsageRecordUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageRecordCreateOrConnectWithoutSubscriptionInput | UsageRecordCreateOrConnectWithoutSubscriptionInput[]
    upsert?: UsageRecordUpsertWithWhereUniqueWithoutSubscriptionInput | UsageRecordUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: UsageRecordCreateManySubscriptionInputEnvelope
    set?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    disconnect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    delete?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    connect?: UsageRecordWhereUniqueInput | UsageRecordWhereUniqueInput[]
    update?: UsageRecordUpdateWithWhereUniqueWithoutSubscriptionInput | UsageRecordUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: UsageRecordUpdateManyWithWhereWithoutSubscriptionInput | UsageRecordUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: UsageRecordScalarWhereInput | UsageRecordScalarWhereInput[]
  }

  export type OptimizationRunCreateNestedOneWithoutUsageRecordsInput = {
    create?: XOR<OptimizationRunCreateWithoutUsageRecordsInput, OptimizationRunUncheckedCreateWithoutUsageRecordsInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutUsageRecordsInput
    connect?: OptimizationRunWhereUniqueInput
  }

  export type SubscriptionCreateNestedOneWithoutUsageRecordsInput = {
    create?: XOR<SubscriptionCreateWithoutUsageRecordsInput, SubscriptionUncheckedCreateWithoutUsageRecordsInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUsageRecordsInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type OptimizationRunUpdateOneRequiredWithoutUsageRecordsNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutUsageRecordsInput, OptimizationRunUncheckedCreateWithoutUsageRecordsInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutUsageRecordsInput
    upsert?: OptimizationRunUpsertWithoutUsageRecordsInput
    connect?: OptimizationRunWhereUniqueInput
    update?: XOR<XOR<OptimizationRunUpdateToOneWithWhereWithoutUsageRecordsInput, OptimizationRunUpdateWithoutUsageRecordsInput>, OptimizationRunUncheckedUpdateWithoutUsageRecordsInput>
  }

  export type SubscriptionUpdateOneRequiredWithoutUsageRecordsNestedInput = {
    create?: XOR<SubscriptionCreateWithoutUsageRecordsInput, SubscriptionUncheckedCreateWithoutUsageRecordsInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutUsageRecordsInput
    upsert?: SubscriptionUpsertWithoutUsageRecordsInput
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutUsageRecordsInput, SubscriptionUpdateWithoutUsageRecordsInput>, SubscriptionUncheckedUpdateWithoutUsageRecordsInput>
  }

  export type UserCreateNestedOneWithoutUsageEventsInput = {
    create?: XOR<UserCreateWithoutUsageEventsInput, UserUncheckedCreateWithoutUsageEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsageEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUsageEventsNestedInput = {
    create?: XOR<UserCreateWithoutUsageEventsInput, UserUncheckedCreateWithoutUsageEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUsageEventsInput
    upsert?: UserUpsertWithoutUsageEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUsageEventsInput, UserUpdateWithoutUsageEventsInput>, UserUncheckedUpdateWithoutUsageEventsInput>
  }

  export type OptimizationRunCreateNestedOneWithoutScorecardInput = {
    create?: XOR<OptimizationRunCreateWithoutScorecardInput, OptimizationRunUncheckedCreateWithoutScorecardInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutScorecardInput
    connect?: OptimizationRunWhereUniqueInput
  }

  export type OptimizationRunUpdateOneRequiredWithoutScorecardNestedInput = {
    create?: XOR<OptimizationRunCreateWithoutScorecardInput, OptimizationRunUncheckedCreateWithoutScorecardInput>
    connectOrCreate?: OptimizationRunCreateOrConnectWithoutScorecardInput
    upsert?: OptimizationRunUpsertWithoutScorecardInput
    connect?: OptimizationRunWhereUniqueInput
    update?: XOR<XOR<OptimizationRunUpdateToOneWithWhereWithoutScorecardInput, OptimizationRunUpdateWithoutScorecardInput>, OptimizationRunUncheckedUpdateWithoutScorecardInput>
  }

  export type UserCreateNestedOneWithoutSavedResumesInput = {
    create?: XOR<UserCreateWithoutSavedResumesInput, UserUncheckedCreateWithoutSavedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedResumesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSavedResumesNestedInput = {
    create?: XOR<UserCreateWithoutSavedResumesInput, UserUncheckedCreateWithoutSavedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedResumesInput
    upsert?: UserUpsertWithoutSavedResumesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSavedResumesInput, UserUpdateWithoutSavedResumesInput>, UserUncheckedUpdateWithoutSavedResumesInput>
  }

  export type UserCreateNestedOneWithoutUnifiedResumesInput = {
    create?: XOR<UserCreateWithoutUnifiedResumesInput, UserUncheckedCreateWithoutUnifiedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUnifiedResumesInput
    connect?: UserWhereUniqueInput
  }

  export type ResumeAnalysisCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeAnalysisCreateWithoutResumeInput, ResumeAnalysisUncheckedCreateWithoutResumeInput> | ResumeAnalysisCreateWithoutResumeInput[] | ResumeAnalysisUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAnalysisCreateOrConnectWithoutResumeInput | ResumeAnalysisCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeAnalysisCreateManyResumeInputEnvelope
    connect?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
  }

  export type ResumeShareCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeShareCreateWithoutResumeInput, ResumeShareUncheckedCreateWithoutResumeInput> | ResumeShareCreateWithoutResumeInput[] | ResumeShareUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeShareCreateOrConnectWithoutResumeInput | ResumeShareCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeShareCreateManyResumeInputEnvelope
    connect?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
  }

  export type ResumeAnalysisUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeAnalysisCreateWithoutResumeInput, ResumeAnalysisUncheckedCreateWithoutResumeInput> | ResumeAnalysisCreateWithoutResumeInput[] | ResumeAnalysisUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAnalysisCreateOrConnectWithoutResumeInput | ResumeAnalysisCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeAnalysisCreateManyResumeInputEnvelope
    connect?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
  }

  export type ResumeShareUncheckedCreateNestedManyWithoutResumeInput = {
    create?: XOR<ResumeShareCreateWithoutResumeInput, ResumeShareUncheckedCreateWithoutResumeInput> | ResumeShareCreateWithoutResumeInput[] | ResumeShareUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeShareCreateOrConnectWithoutResumeInput | ResumeShareCreateOrConnectWithoutResumeInput[]
    createMany?: ResumeShareCreateManyResumeInputEnvelope
    connect?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutUnifiedResumesNestedInput = {
    create?: XOR<UserCreateWithoutUnifiedResumesInput, UserUncheckedCreateWithoutUnifiedResumesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUnifiedResumesInput
    upsert?: UserUpsertWithoutUnifiedResumesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUnifiedResumesInput, UserUpdateWithoutUnifiedResumesInput>, UserUncheckedUpdateWithoutUnifiedResumesInput>
  }

  export type ResumeAnalysisUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeAnalysisCreateWithoutResumeInput, ResumeAnalysisUncheckedCreateWithoutResumeInput> | ResumeAnalysisCreateWithoutResumeInput[] | ResumeAnalysisUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAnalysisCreateOrConnectWithoutResumeInput | ResumeAnalysisCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeAnalysisUpsertWithWhereUniqueWithoutResumeInput | ResumeAnalysisUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeAnalysisCreateManyResumeInputEnvelope
    set?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    disconnect?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    delete?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    connect?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    update?: ResumeAnalysisUpdateWithWhereUniqueWithoutResumeInput | ResumeAnalysisUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeAnalysisUpdateManyWithWhereWithoutResumeInput | ResumeAnalysisUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeAnalysisScalarWhereInput | ResumeAnalysisScalarWhereInput[]
  }

  export type ResumeShareUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeShareCreateWithoutResumeInput, ResumeShareUncheckedCreateWithoutResumeInput> | ResumeShareCreateWithoutResumeInput[] | ResumeShareUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeShareCreateOrConnectWithoutResumeInput | ResumeShareCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeShareUpsertWithWhereUniqueWithoutResumeInput | ResumeShareUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeShareCreateManyResumeInputEnvelope
    set?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    disconnect?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    delete?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    connect?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    update?: ResumeShareUpdateWithWhereUniqueWithoutResumeInput | ResumeShareUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeShareUpdateManyWithWhereWithoutResumeInput | ResumeShareUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeShareScalarWhereInput | ResumeShareScalarWhereInput[]
  }

  export type ResumeAnalysisUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeAnalysisCreateWithoutResumeInput, ResumeAnalysisUncheckedCreateWithoutResumeInput> | ResumeAnalysisCreateWithoutResumeInput[] | ResumeAnalysisUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeAnalysisCreateOrConnectWithoutResumeInput | ResumeAnalysisCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeAnalysisUpsertWithWhereUniqueWithoutResumeInput | ResumeAnalysisUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeAnalysisCreateManyResumeInputEnvelope
    set?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    disconnect?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    delete?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    connect?: ResumeAnalysisWhereUniqueInput | ResumeAnalysisWhereUniqueInput[]
    update?: ResumeAnalysisUpdateWithWhereUniqueWithoutResumeInput | ResumeAnalysisUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeAnalysisUpdateManyWithWhereWithoutResumeInput | ResumeAnalysisUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeAnalysisScalarWhereInput | ResumeAnalysisScalarWhereInput[]
  }

  export type ResumeShareUncheckedUpdateManyWithoutResumeNestedInput = {
    create?: XOR<ResumeShareCreateWithoutResumeInput, ResumeShareUncheckedCreateWithoutResumeInput> | ResumeShareCreateWithoutResumeInput[] | ResumeShareUncheckedCreateWithoutResumeInput[]
    connectOrCreate?: ResumeShareCreateOrConnectWithoutResumeInput | ResumeShareCreateOrConnectWithoutResumeInput[]
    upsert?: ResumeShareUpsertWithWhereUniqueWithoutResumeInput | ResumeShareUpsertWithWhereUniqueWithoutResumeInput[]
    createMany?: ResumeShareCreateManyResumeInputEnvelope
    set?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    disconnect?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    delete?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    connect?: ResumeShareWhereUniqueInput | ResumeShareWhereUniqueInput[]
    update?: ResumeShareUpdateWithWhereUniqueWithoutResumeInput | ResumeShareUpdateWithWhereUniqueWithoutResumeInput[]
    updateMany?: ResumeShareUpdateManyWithWhereWithoutResumeInput | ResumeShareUpdateManyWithWhereWithoutResumeInput[]
    deleteMany?: ResumeShareScalarWhereInput | ResumeShareScalarWhereInput[]
  }

  export type UnifiedResumeCreateNestedOneWithoutAnalysesInput = {
    create?: XOR<UnifiedResumeCreateWithoutAnalysesInput, UnifiedResumeUncheckedCreateWithoutAnalysesInput>
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutAnalysesInput
    connect?: UnifiedResumeWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UnifiedResumeUpdateOneRequiredWithoutAnalysesNestedInput = {
    create?: XOR<UnifiedResumeCreateWithoutAnalysesInput, UnifiedResumeUncheckedCreateWithoutAnalysesInput>
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutAnalysesInput
    upsert?: UnifiedResumeUpsertWithoutAnalysesInput
    connect?: UnifiedResumeWhereUniqueInput
    update?: XOR<XOR<UnifiedResumeUpdateToOneWithWhereWithoutAnalysesInput, UnifiedResumeUpdateWithoutAnalysesInput>, UnifiedResumeUncheckedUpdateWithoutAnalysesInput>
  }

  export type UnifiedResumeCreateNestedOneWithoutSharesInput = {
    create?: XOR<UnifiedResumeCreateWithoutSharesInput, UnifiedResumeUncheckedCreateWithoutSharesInput>
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutSharesInput
    connect?: UnifiedResumeWhereUniqueInput
  }

  export type ShareViewCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareViewCreateWithoutShareInput, ShareViewUncheckedCreateWithoutShareInput> | ShareViewCreateWithoutShareInput[] | ShareViewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareViewCreateOrConnectWithoutShareInput | ShareViewCreateOrConnectWithoutShareInput[]
    createMany?: ShareViewCreateManyShareInputEnvelope
    connect?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
  }

  export type ShareViewUncheckedCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareViewCreateWithoutShareInput, ShareViewUncheckedCreateWithoutShareInput> | ShareViewCreateWithoutShareInput[] | ShareViewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareViewCreateOrConnectWithoutShareInput | ShareViewCreateOrConnectWithoutShareInput[]
    createMany?: ShareViewCreateManyShareInputEnvelope
    connect?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UnifiedResumeUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<UnifiedResumeCreateWithoutSharesInput, UnifiedResumeUncheckedCreateWithoutSharesInput>
    connectOrCreate?: UnifiedResumeCreateOrConnectWithoutSharesInput
    upsert?: UnifiedResumeUpsertWithoutSharesInput
    connect?: UnifiedResumeWhereUniqueInput
    update?: XOR<XOR<UnifiedResumeUpdateToOneWithWhereWithoutSharesInput, UnifiedResumeUpdateWithoutSharesInput>, UnifiedResumeUncheckedUpdateWithoutSharesInput>
  }

  export type ShareViewUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareViewCreateWithoutShareInput, ShareViewUncheckedCreateWithoutShareInput> | ShareViewCreateWithoutShareInput[] | ShareViewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareViewCreateOrConnectWithoutShareInput | ShareViewCreateOrConnectWithoutShareInput[]
    upsert?: ShareViewUpsertWithWhereUniqueWithoutShareInput | ShareViewUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareViewCreateManyShareInputEnvelope
    set?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    disconnect?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    delete?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    connect?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    update?: ShareViewUpdateWithWhereUniqueWithoutShareInput | ShareViewUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareViewUpdateManyWithWhereWithoutShareInput | ShareViewUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareViewScalarWhereInput | ShareViewScalarWhereInput[]
  }

  export type ShareViewUncheckedUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareViewCreateWithoutShareInput, ShareViewUncheckedCreateWithoutShareInput> | ShareViewCreateWithoutShareInput[] | ShareViewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareViewCreateOrConnectWithoutShareInput | ShareViewCreateOrConnectWithoutShareInput[]
    upsert?: ShareViewUpsertWithWhereUniqueWithoutShareInput | ShareViewUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareViewCreateManyShareInputEnvelope
    set?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    disconnect?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    delete?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    connect?: ShareViewWhereUniqueInput | ShareViewWhereUniqueInput[]
    update?: ShareViewUpdateWithWhereUniqueWithoutShareInput | ShareViewUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareViewUpdateManyWithWhereWithoutShareInput | ShareViewUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareViewScalarWhereInput | ShareViewScalarWhereInput[]
  }

  export type ResumeShareCreateNestedOneWithoutViewsInput = {
    create?: XOR<ResumeShareCreateWithoutViewsInput, ResumeShareUncheckedCreateWithoutViewsInput>
    connectOrCreate?: ResumeShareCreateOrConnectWithoutViewsInput
    connect?: ResumeShareWhereUniqueInput
  }

  export type ResumeShareUpdateOneRequiredWithoutViewsNestedInput = {
    create?: XOR<ResumeShareCreateWithoutViewsInput, ResumeShareUncheckedCreateWithoutViewsInput>
    connectOrCreate?: ResumeShareCreateOrConnectWithoutViewsInput
    upsert?: ResumeShareUpsertWithoutViewsInput
    connect?: ResumeShareWhereUniqueInput
    update?: XOR<XOR<ResumeShareUpdateToOneWithWhereWithoutViewsInput, ResumeShareUpdateWithoutViewsInput>, ResumeShareUncheckedUpdateWithoutViewsInput>
  }

  export type UserCreateNestedOneWithoutTemplateUsagesInput = {
    create?: XOR<UserCreateWithoutTemplateUsagesInput, UserUncheckedCreateWithoutTemplateUsagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTemplateUsagesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTemplateUsagesNestedInput = {
    create?: XOR<UserCreateWithoutTemplateUsagesInput, UserUncheckedCreateWithoutTemplateUsagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTemplateUsagesInput
    upsert?: UserUpsertWithoutTemplateUsagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTemplateUsagesInput, UserUpdateWithoutTemplateUsagesInput>, UserUncheckedUpdateWithoutTemplateUsagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OptimizationRunCreateWithoutCoverLetterInput = {
    id?: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    feedbacks?: FeedbackCreateNestedManyWithoutOptimizationRunInput
    resumeFile?: ResumeFileCreateNestedOneWithoutOptimizationRunsInput
    user: UserCreateNestedOneWithoutOptimizationRunsInput
    usageRecords?: UsageRecordCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunUncheckedCreateWithoutCoverLetterInput = {
    id?: string
    userId: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOptimizationRunInput
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardUncheckedCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunCreateOrConnectWithoutCoverLetterInput = {
    where: OptimizationRunWhereUniqueInput
    create: XOR<OptimizationRunCreateWithoutCoverLetterInput, OptimizationRunUncheckedCreateWithoutCoverLetterInput>
  }

  export type UserCreateWithoutCoverLettersInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCoverLettersInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCoverLettersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCoverLettersInput, UserUncheckedCreateWithoutCoverLettersInput>
  }

  export type OptimizationRunUpsertWithoutCoverLetterInput = {
    update: XOR<OptimizationRunUpdateWithoutCoverLetterInput, OptimizationRunUncheckedUpdateWithoutCoverLetterInput>
    create: XOR<OptimizationRunCreateWithoutCoverLetterInput, OptimizationRunUncheckedCreateWithoutCoverLetterInput>
    where?: OptimizationRunWhereInput
  }

  export type OptimizationRunUpdateToOneWithWhereWithoutCoverLetterInput = {
    where?: OptimizationRunWhereInput
    data: XOR<OptimizationRunUpdateWithoutCoverLetterInput, OptimizationRunUncheckedUpdateWithoutCoverLetterInput>
  }

  export type OptimizationRunUpdateWithoutCoverLetterInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    feedbacks?: FeedbackUpdateManyWithoutOptimizationRunNestedInput
    resumeFile?: ResumeFileUpdateOneWithoutOptimizationRunsNestedInput
    user?: UserUpdateOneRequiredWithoutOptimizationRunsNestedInput
    usageRecords?: UsageRecordUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateWithoutCoverLetterInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOptimizationRunNestedInput
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUncheckedUpdateOneWithoutOptimizationRunNestedInput
  }

  export type UserUpsertWithoutCoverLettersInput = {
    update: XOR<UserUpdateWithoutCoverLettersInput, UserUncheckedUpdateWithoutCoverLettersInput>
    create: XOR<UserCreateWithoutCoverLettersInput, UserUncheckedCreateWithoutCoverLettersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCoverLettersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCoverLettersInput, UserUncheckedUpdateWithoutCoverLettersInput>
  }

  export type UserUpdateWithoutCoverLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCoverLettersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoverLetterCreateWithoutUserInput = {
    id?: string
    letterText: string
    createdAt?: Date | string
    optimizationRun: OptimizationRunCreateNestedOneWithoutCoverLetterInput
  }

  export type CoverLetterUncheckedCreateWithoutUserInput = {
    id?: string
    optimizationRunId: string
    letterText: string
    createdAt?: Date | string
  }

  export type CoverLetterCreateOrConnectWithoutUserInput = {
    where: CoverLetterWhereUniqueInput
    create: XOR<CoverLetterCreateWithoutUserInput, CoverLetterUncheckedCreateWithoutUserInput>
  }

  export type CoverLetterCreateManyUserInputEnvelope = {
    data: CoverLetterCreateManyUserInput | CoverLetterCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    id?: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
    optimizationRun: OptimizationRunCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: string
    optimizationRunId: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OptimizationRunCreateWithoutUserInput = {
    id?: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackCreateNestedManyWithoutOptimizationRunInput
    resumeFile?: ResumeFileCreateNestedOneWithoutOptimizationRunsInput
    usageRecords?: UsageRecordCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunUncheckedCreateWithoutUserInput = {
    id?: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterUncheckedCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOptimizationRunInput
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardUncheckedCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunCreateOrConnectWithoutUserInput = {
    where: OptimizationRunWhereUniqueInput
    create: XOR<OptimizationRunCreateWithoutUserInput, OptimizationRunUncheckedCreateWithoutUserInput>
  }

  export type OptimizationRunCreateManyUserInputEnvelope = {
    data: OptimizationRunCreateManyUserInput | OptimizationRunCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ResumeFileCreateWithoutUserInput = {
    id?: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutResumeFileInput
  }

  export type ResumeFileUncheckedCreateWithoutUserInput = {
    id?: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutResumeFileInput
  }

  export type ResumeFileCreateOrConnectWithoutUserInput = {
    where: ResumeFileWhereUniqueInput
    create: XOR<ResumeFileCreateWithoutUserInput, ResumeFileUncheckedCreateWithoutUserInput>
  }

  export type ResumeFileCreateManyUserInputEnvelope = {
    data: ResumeFileCreateManyUserInput | ResumeFileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SavedResumeCreateWithoutUserInput = {
    id?: string
    name: string
    content: string
    createdAt?: Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: string | null
  }

  export type SavedResumeUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    content: string
    createdAt?: Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: string | null
  }

  export type SavedResumeCreateOrConnectWithoutUserInput = {
    where: SavedResumeWhereUniqueInput
    create: XOR<SavedResumeCreateWithoutUserInput, SavedResumeUncheckedCreateWithoutUserInput>
  }

  export type SavedResumeCreateManyUserInputEnvelope = {
    data: SavedResumeCreateManyUserInput | SavedResumeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutUserInput = {
    id?: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    usageRecords?: UsageRecordCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionCreateManyUserInputEnvelope = {
    data: SubscriptionCreateManyUserInput | SubscriptionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UsageEventCreateWithoutUserInput = {
    id?: string
    eventType: string
    meta: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UsageEventUncheckedCreateWithoutUserInput = {
    id?: string
    eventType: string
    meta: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UsageEventCreateOrConnectWithoutUserInput = {
    where: UsageEventWhereUniqueInput
    create: XOR<UsageEventCreateWithoutUserInput, UsageEventUncheckedCreateWithoutUserInput>
  }

  export type UsageEventCreateManyUserInputEnvelope = {
    data: UsageEventCreateManyUserInput | UsageEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UnifiedResumeCreateWithoutUserInput = {
    id?: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    analyses?: ResumeAnalysisCreateNestedManyWithoutResumeInput
    shares?: ResumeShareCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeUncheckedCreateWithoutUserInput = {
    id?: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    analyses?: ResumeAnalysisUncheckedCreateNestedManyWithoutResumeInput
    shares?: ResumeShareUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeCreateOrConnectWithoutUserInput = {
    where: UnifiedResumeWhereUniqueInput
    create: XOR<UnifiedResumeCreateWithoutUserInput, UnifiedResumeUncheckedCreateWithoutUserInput>
  }

  export type UnifiedResumeCreateManyUserInputEnvelope = {
    data: UnifiedResumeCreateManyUserInput | UnifiedResumeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TemplateUsageCreateWithoutUserInput = {
    id?: string
    templateId: string
    usedAt?: Date | string
  }

  export type TemplateUsageUncheckedCreateWithoutUserInput = {
    id?: string
    templateId: string
    usedAt?: Date | string
  }

  export type TemplateUsageCreateOrConnectWithoutUserInput = {
    where: TemplateUsageWhereUniqueInput
    create: XOR<TemplateUsageCreateWithoutUserInput, TemplateUsageUncheckedCreateWithoutUserInput>
  }

  export type TemplateUsageCreateManyUserInputEnvelope = {
    data: TemplateUsageCreateManyUserInput | TemplateUsageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CoverLetterUpsertWithWhereUniqueWithoutUserInput = {
    where: CoverLetterWhereUniqueInput
    update: XOR<CoverLetterUpdateWithoutUserInput, CoverLetterUncheckedUpdateWithoutUserInput>
    create: XOR<CoverLetterCreateWithoutUserInput, CoverLetterUncheckedCreateWithoutUserInput>
  }

  export type CoverLetterUpdateWithWhereUniqueWithoutUserInput = {
    where: CoverLetterWhereUniqueInput
    data: XOR<CoverLetterUpdateWithoutUserInput, CoverLetterUncheckedUpdateWithoutUserInput>
  }

  export type CoverLetterUpdateManyWithWhereWithoutUserInput = {
    where: CoverLetterScalarWhereInput
    data: XOR<CoverLetterUpdateManyMutationInput, CoverLetterUncheckedUpdateManyWithoutUserInput>
  }

  export type CoverLetterScalarWhereInput = {
    AND?: CoverLetterScalarWhereInput | CoverLetterScalarWhereInput[]
    OR?: CoverLetterScalarWhereInput[]
    NOT?: CoverLetterScalarWhereInput | CoverLetterScalarWhereInput[]
    id?: StringFilter<"CoverLetter"> | string
    userId?: StringFilter<"CoverLetter"> | string
    optimizationRunId?: StringFilter<"CoverLetter"> | string
    letterText?: StringFilter<"CoverLetter"> | string
    createdAt?: DateTimeFilter<"CoverLetter"> | Date | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: StringFilter<"Feedback"> | string
    optimizationRunId?: StringFilter<"Feedback"> | string
    userId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comments?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type OptimizationRunUpsertWithWhereUniqueWithoutUserInput = {
    where: OptimizationRunWhereUniqueInput
    update: XOR<OptimizationRunUpdateWithoutUserInput, OptimizationRunUncheckedUpdateWithoutUserInput>
    create: XOR<OptimizationRunCreateWithoutUserInput, OptimizationRunUncheckedCreateWithoutUserInput>
  }

  export type OptimizationRunUpdateWithWhereUniqueWithoutUserInput = {
    where: OptimizationRunWhereUniqueInput
    data: XOR<OptimizationRunUpdateWithoutUserInput, OptimizationRunUncheckedUpdateWithoutUserInput>
  }

  export type OptimizationRunUpdateManyWithWhereWithoutUserInput = {
    where: OptimizationRunScalarWhereInput
    data: XOR<OptimizationRunUpdateManyMutationInput, OptimizationRunUncheckedUpdateManyWithoutUserInput>
  }

  export type OptimizationRunScalarWhereInput = {
    AND?: OptimizationRunScalarWhereInput | OptimizationRunScalarWhereInput[]
    OR?: OptimizationRunScalarWhereInput[]
    NOT?: OptimizationRunScalarWhereInput | OptimizationRunScalarWhereInput[]
    id?: StringFilter<"OptimizationRun"> | string
    userId?: StringFilter<"OptimizationRun"> | string
    resumeFileId?: StringNullableFilter<"OptimizationRun"> | string | null
    jobDescription?: StringFilter<"OptimizationRun"> | string
    templateId?: StringFilter<"OptimizationRun"> | string
    originalText?: StringFilter<"OptimizationRun"> | string
    optimizedText?: StringFilter<"OptimizationRun"> | string
    bulletRewrites?: JsonFilter<"OptimizationRun">
    summaryRewrite?: StringFilter<"OptimizationRun"> | string
    skillsRewrite?: StringFilter<"OptimizationRun"> | string
    keywords?: JsonFilter<"OptimizationRun">
    requirements?: JsonFilter<"OptimizationRun">
    targetTitle?: StringFilter<"OptimizationRun"> | string
    targetCompany?: StringFilter<"OptimizationRun"> | string
    aiModel?: StringFilter<"OptimizationRun"> | string
    tokenCount?: IntFilter<"OptimizationRun"> | number
    costUsd?: FloatFilter<"OptimizationRun"> | number
    createdAt?: DateTimeFilter<"OptimizationRun"> | Date | string
    deletedAt?: DateTimeNullableFilter<"OptimizationRun"> | Date | string | null
    optimizedAtsNotes?: StringNullableFilter<"OptimizationRun"> | string | null
    optimizedAtsScore?: FloatNullableFilter<"OptimizationRun"> | number | null
    originalAtsNotes?: StringNullableFilter<"OptimizationRun"> | string | null
    originalAtsScore?: FloatNullableFilter<"OptimizationRun"> | number | null
  }

  export type ResumeFileUpsertWithWhereUniqueWithoutUserInput = {
    where: ResumeFileWhereUniqueInput
    update: XOR<ResumeFileUpdateWithoutUserInput, ResumeFileUncheckedUpdateWithoutUserInput>
    create: XOR<ResumeFileCreateWithoutUserInput, ResumeFileUncheckedCreateWithoutUserInput>
  }

  export type ResumeFileUpdateWithWhereUniqueWithoutUserInput = {
    where: ResumeFileWhereUniqueInput
    data: XOR<ResumeFileUpdateWithoutUserInput, ResumeFileUncheckedUpdateWithoutUserInput>
  }

  export type ResumeFileUpdateManyWithWhereWithoutUserInput = {
    where: ResumeFileScalarWhereInput
    data: XOR<ResumeFileUpdateManyMutationInput, ResumeFileUncheckedUpdateManyWithoutUserInput>
  }

  export type ResumeFileScalarWhereInput = {
    AND?: ResumeFileScalarWhereInput | ResumeFileScalarWhereInput[]
    OR?: ResumeFileScalarWhereInput[]
    NOT?: ResumeFileScalarWhereInput | ResumeFileScalarWhereInput[]
    id?: StringFilter<"ResumeFile"> | string
    userId?: StringFilter<"ResumeFile"> | string
    fileName?: StringFilter<"ResumeFile"> | string
    filePath?: StringFilter<"ResumeFile"> | string
    uploadedAt?: DateTimeFilter<"ResumeFile"> | Date | string
    originalTextHash?: StringNullableFilter<"ResumeFile"> | string | null
  }

  export type SavedResumeUpsertWithWhereUniqueWithoutUserInput = {
    where: SavedResumeWhereUniqueInput
    update: XOR<SavedResumeUpdateWithoutUserInput, SavedResumeUncheckedUpdateWithoutUserInput>
    create: XOR<SavedResumeCreateWithoutUserInput, SavedResumeUncheckedCreateWithoutUserInput>
  }

  export type SavedResumeUpdateWithWhereUniqueWithoutUserInput = {
    where: SavedResumeWhereUniqueInput
    data: XOR<SavedResumeUpdateWithoutUserInput, SavedResumeUncheckedUpdateWithoutUserInput>
  }

  export type SavedResumeUpdateManyWithWhereWithoutUserInput = {
    where: SavedResumeScalarWhereInput
    data: XOR<SavedResumeUpdateManyMutationInput, SavedResumeUncheckedUpdateManyWithoutUserInput>
  }

  export type SavedResumeScalarWhereInput = {
    AND?: SavedResumeScalarWhereInput | SavedResumeScalarWhereInput[]
    OR?: SavedResumeScalarWhereInput[]
    NOT?: SavedResumeScalarWhereInput | SavedResumeScalarWhereInput[]
    id?: StringFilter<"SavedResume"> | string
    userId?: StringFilter<"SavedResume"> | string
    name?: StringFilter<"SavedResume"> | string
    content?: StringFilter<"SavedResume"> | string
    createdAt?: DateTimeFilter<"SavedResume"> | Date | string
    parsedData?: JsonNullableFilter<"SavedResume">
    textHash?: StringNullableFilter<"SavedResume"> | string | null
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriptionCreateWithoutUserInput, SubscriptionUncheckedCreateWithoutUserInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutUserInput, SubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutUserInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    userId?: StringFilter<"Subscription"> | string
    planName?: StringFilter<"Subscription"> | string
    status?: StringFilter<"Subscription"> | string
    currentPeriodStart?: DateTimeFilter<"Subscription"> | Date | string
    currentPeriodEnd?: DateTimeFilter<"Subscription"> | Date | string
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    stripeCustomerId?: StringNullableFilter<"Subscription"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"Subscription"> | string | null
  }

  export type UsageEventUpsertWithWhereUniqueWithoutUserInput = {
    where: UsageEventWhereUniqueInput
    update: XOR<UsageEventUpdateWithoutUserInput, UsageEventUncheckedUpdateWithoutUserInput>
    create: XOR<UsageEventCreateWithoutUserInput, UsageEventUncheckedCreateWithoutUserInput>
  }

  export type UsageEventUpdateWithWhereUniqueWithoutUserInput = {
    where: UsageEventWhereUniqueInput
    data: XOR<UsageEventUpdateWithoutUserInput, UsageEventUncheckedUpdateWithoutUserInput>
  }

  export type UsageEventUpdateManyWithWhereWithoutUserInput = {
    where: UsageEventScalarWhereInput
    data: XOR<UsageEventUpdateManyMutationInput, UsageEventUncheckedUpdateManyWithoutUserInput>
  }

  export type UsageEventScalarWhereInput = {
    AND?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
    OR?: UsageEventScalarWhereInput[]
    NOT?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
    id?: StringFilter<"UsageEvent"> | string
    userId?: StringFilter<"UsageEvent"> | string
    eventType?: StringFilter<"UsageEvent"> | string
    meta?: JsonFilter<"UsageEvent">
    createdAt?: DateTimeFilter<"UsageEvent"> | Date | string
  }

  export type UnifiedResumeUpsertWithWhereUniqueWithoutUserInput = {
    where: UnifiedResumeWhereUniqueInput
    update: XOR<UnifiedResumeUpdateWithoutUserInput, UnifiedResumeUncheckedUpdateWithoutUserInput>
    create: XOR<UnifiedResumeCreateWithoutUserInput, UnifiedResumeUncheckedCreateWithoutUserInput>
  }

  export type UnifiedResumeUpdateWithWhereUniqueWithoutUserInput = {
    where: UnifiedResumeWhereUniqueInput
    data: XOR<UnifiedResumeUpdateWithoutUserInput, UnifiedResumeUncheckedUpdateWithoutUserInput>
  }

  export type UnifiedResumeUpdateManyWithWhereWithoutUserInput = {
    where: UnifiedResumeScalarWhereInput
    data: XOR<UnifiedResumeUpdateManyMutationInput, UnifiedResumeUncheckedUpdateManyWithoutUserInput>
  }

  export type UnifiedResumeScalarWhereInput = {
    AND?: UnifiedResumeScalarWhereInput | UnifiedResumeScalarWhereInput[]
    OR?: UnifiedResumeScalarWhereInput[]
    NOT?: UnifiedResumeScalarWhereInput | UnifiedResumeScalarWhereInput[]
    id?: StringFilter<"UnifiedResume"> | string
    userId?: StringFilter<"UnifiedResume"> | string
    version?: IntFilter<"UnifiedResume"> | number
    builderData?: JsonFilter<"UnifiedResume">
    optimizationData?: JsonNullableFilter<"UnifiedResume">
    sharingData?: JsonNullableFilter<"UnifiedResume">
    title?: StringFilter<"UnifiedResume"> | string
    template?: StringFilter<"UnifiedResume"> | string
    createdAt?: DateTimeFilter<"UnifiedResume"> | Date | string
    updatedAt?: DateTimeFilter<"UnifiedResume"> | Date | string
    analyzedAt?: DateTimeNullableFilter<"UnifiedResume"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"UnifiedResume"> | Date | string | null
  }

  export type TemplateUsageUpsertWithWhereUniqueWithoutUserInput = {
    where: TemplateUsageWhereUniqueInput
    update: XOR<TemplateUsageUpdateWithoutUserInput, TemplateUsageUncheckedUpdateWithoutUserInput>
    create: XOR<TemplateUsageCreateWithoutUserInput, TemplateUsageUncheckedCreateWithoutUserInput>
  }

  export type TemplateUsageUpdateWithWhereUniqueWithoutUserInput = {
    where: TemplateUsageWhereUniqueInput
    data: XOR<TemplateUsageUpdateWithoutUserInput, TemplateUsageUncheckedUpdateWithoutUserInput>
  }

  export type TemplateUsageUpdateManyWithWhereWithoutUserInput = {
    where: TemplateUsageScalarWhereInput
    data: XOR<TemplateUsageUpdateManyMutationInput, TemplateUsageUncheckedUpdateManyWithoutUserInput>
  }

  export type TemplateUsageScalarWhereInput = {
    AND?: TemplateUsageScalarWhereInput | TemplateUsageScalarWhereInput[]
    OR?: TemplateUsageScalarWhereInput[]
    NOT?: TemplateUsageScalarWhereInput | TemplateUsageScalarWhereInput[]
    id?: StringFilter<"TemplateUsage"> | string
    templateId?: StringFilter<"TemplateUsage"> | string
    userId?: StringFilter<"TemplateUsage"> | string
    usedAt?: DateTimeFilter<"TemplateUsage"> | Date | string
  }

  export type OptimizationRunCreateWithoutResumeFileInput = {
    id?: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackCreateNestedManyWithoutOptimizationRunInput
    user: UserCreateNestedOneWithoutOptimizationRunsInput
    usageRecords?: UsageRecordCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunUncheckedCreateWithoutResumeFileInput = {
    id?: string
    userId: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterUncheckedCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOptimizationRunInput
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardUncheckedCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunCreateOrConnectWithoutResumeFileInput = {
    where: OptimizationRunWhereUniqueInput
    create: XOR<OptimizationRunCreateWithoutResumeFileInput, OptimizationRunUncheckedCreateWithoutResumeFileInput>
  }

  export type OptimizationRunCreateManyResumeFileInputEnvelope = {
    data: OptimizationRunCreateManyResumeFileInput | OptimizationRunCreateManyResumeFileInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutResumeFilesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResumeFilesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResumeFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResumeFilesInput, UserUncheckedCreateWithoutResumeFilesInput>
  }

  export type OptimizationRunUpsertWithWhereUniqueWithoutResumeFileInput = {
    where: OptimizationRunWhereUniqueInput
    update: XOR<OptimizationRunUpdateWithoutResumeFileInput, OptimizationRunUncheckedUpdateWithoutResumeFileInput>
    create: XOR<OptimizationRunCreateWithoutResumeFileInput, OptimizationRunUncheckedCreateWithoutResumeFileInput>
  }

  export type OptimizationRunUpdateWithWhereUniqueWithoutResumeFileInput = {
    where: OptimizationRunWhereUniqueInput
    data: XOR<OptimizationRunUpdateWithoutResumeFileInput, OptimizationRunUncheckedUpdateWithoutResumeFileInput>
  }

  export type OptimizationRunUpdateManyWithWhereWithoutResumeFileInput = {
    where: OptimizationRunScalarWhereInput
    data: XOR<OptimizationRunUpdateManyMutationInput, OptimizationRunUncheckedUpdateManyWithoutResumeFileInput>
  }

  export type UserUpsertWithoutResumeFilesInput = {
    update: XOR<UserUpdateWithoutResumeFilesInput, UserUncheckedUpdateWithoutResumeFilesInput>
    create: XOR<UserCreateWithoutResumeFilesInput, UserUncheckedCreateWithoutResumeFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResumeFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResumeFilesInput, UserUncheckedUpdateWithoutResumeFilesInput>
  }

  export type UserUpdateWithoutResumeFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResumeFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoverLetterCreateWithoutOptimizationRunInput = {
    id?: string
    letterText: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCoverLettersInput
  }

  export type CoverLetterUncheckedCreateWithoutOptimizationRunInput = {
    id?: string
    userId: string
    letterText: string
    createdAt?: Date | string
  }

  export type CoverLetterCreateOrConnectWithoutOptimizationRunInput = {
    where: CoverLetterWhereUniqueInput
    create: XOR<CoverLetterCreateWithoutOptimizationRunInput, CoverLetterUncheckedCreateWithoutOptimizationRunInput>
  }

  export type FeedbackCreateWithoutOptimizationRunInput = {
    id?: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutOptimizationRunInput = {
    id?: string
    userId: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutOptimizationRunInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutOptimizationRunInput, FeedbackUncheckedCreateWithoutOptimizationRunInput>
  }

  export type FeedbackCreateManyOptimizationRunInputEnvelope = {
    data: FeedbackCreateManyOptimizationRunInput | FeedbackCreateManyOptimizationRunInput[]
    skipDuplicates?: boolean
  }

  export type ResumeFileCreateWithoutOptimizationRunsInput = {
    id?: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
    user: UserCreateNestedOneWithoutResumeFilesInput
  }

  export type ResumeFileUncheckedCreateWithoutOptimizationRunsInput = {
    id?: string
    userId: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
  }

  export type ResumeFileCreateOrConnectWithoutOptimizationRunsInput = {
    where: ResumeFileWhereUniqueInput
    create: XOR<ResumeFileCreateWithoutOptimizationRunsInput, ResumeFileUncheckedCreateWithoutOptimizationRunsInput>
  }

  export type UserCreateWithoutOptimizationRunsInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOptimizationRunsInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOptimizationRunsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOptimizationRunsInput, UserUncheckedCreateWithoutOptimizationRunsInput>
  }

  export type UsageRecordCreateWithoutOptimizationRunInput = {
    id?: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    subscription: SubscriptionCreateNestedOneWithoutUsageRecordsInput
  }

  export type UsageRecordUncheckedCreateWithoutOptimizationRunInput = {
    id?: string
    subscriptionId: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
  }

  export type UsageRecordCreateOrConnectWithoutOptimizationRunInput = {
    where: UsageRecordWhereUniqueInput
    create: XOR<UsageRecordCreateWithoutOptimizationRunInput, UsageRecordUncheckedCreateWithoutOptimizationRunInput>
  }

  export type UsageRecordCreateManyOptimizationRunInputEnvelope = {
    data: UsageRecordCreateManyOptimizationRunInput | UsageRecordCreateManyOptimizationRunInput[]
    skipDuplicates?: boolean
  }

  export type ScorecardCreateWithoutOptimizationRunInput = {
    id?: string
    overallScore: number
    metrics: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScorecardUncheckedCreateWithoutOptimizationRunInput = {
    id?: string
    overallScore: number
    metrics: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScorecardCreateOrConnectWithoutOptimizationRunInput = {
    where: ScorecardWhereUniqueInput
    create: XOR<ScorecardCreateWithoutOptimizationRunInput, ScorecardUncheckedCreateWithoutOptimizationRunInput>
  }

  export type CoverLetterUpsertWithoutOptimizationRunInput = {
    update: XOR<CoverLetterUpdateWithoutOptimizationRunInput, CoverLetterUncheckedUpdateWithoutOptimizationRunInput>
    create: XOR<CoverLetterCreateWithoutOptimizationRunInput, CoverLetterUncheckedCreateWithoutOptimizationRunInput>
    where?: CoverLetterWhereInput
  }

  export type CoverLetterUpdateToOneWithWhereWithoutOptimizationRunInput = {
    where?: CoverLetterWhereInput
    data: XOR<CoverLetterUpdateWithoutOptimizationRunInput, CoverLetterUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type CoverLetterUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCoverLettersNestedInput
  }

  export type CoverLetterUncheckedUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutOptimizationRunInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutOptimizationRunInput, FeedbackUncheckedUpdateWithoutOptimizationRunInput>
    create: XOR<FeedbackCreateWithoutOptimizationRunInput, FeedbackUncheckedCreateWithoutOptimizationRunInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutOptimizationRunInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutOptimizationRunInput, FeedbackUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutOptimizationRunInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutOptimizationRunInput>
  }

  export type ResumeFileUpsertWithoutOptimizationRunsInput = {
    update: XOR<ResumeFileUpdateWithoutOptimizationRunsInput, ResumeFileUncheckedUpdateWithoutOptimizationRunsInput>
    create: XOR<ResumeFileCreateWithoutOptimizationRunsInput, ResumeFileUncheckedCreateWithoutOptimizationRunsInput>
    where?: ResumeFileWhereInput
  }

  export type ResumeFileUpdateToOneWithWhereWithoutOptimizationRunsInput = {
    where?: ResumeFileWhereInput
    data: XOR<ResumeFileUpdateWithoutOptimizationRunsInput, ResumeFileUncheckedUpdateWithoutOptimizationRunsInput>
  }

  export type ResumeFileUpdateWithoutOptimizationRunsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutResumeFilesNestedInput
  }

  export type ResumeFileUncheckedUpdateWithoutOptimizationRunsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutOptimizationRunsInput = {
    update: XOR<UserUpdateWithoutOptimizationRunsInput, UserUncheckedUpdateWithoutOptimizationRunsInput>
    create: XOR<UserCreateWithoutOptimizationRunsInput, UserUncheckedCreateWithoutOptimizationRunsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOptimizationRunsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOptimizationRunsInput, UserUncheckedUpdateWithoutOptimizationRunsInput>
  }

  export type UserUpdateWithoutOptimizationRunsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOptimizationRunsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsageRecordUpsertWithWhereUniqueWithoutOptimizationRunInput = {
    where: UsageRecordWhereUniqueInput
    update: XOR<UsageRecordUpdateWithoutOptimizationRunInput, UsageRecordUncheckedUpdateWithoutOptimizationRunInput>
    create: XOR<UsageRecordCreateWithoutOptimizationRunInput, UsageRecordUncheckedCreateWithoutOptimizationRunInput>
  }

  export type UsageRecordUpdateWithWhereUniqueWithoutOptimizationRunInput = {
    where: UsageRecordWhereUniqueInput
    data: XOR<UsageRecordUpdateWithoutOptimizationRunInput, UsageRecordUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type UsageRecordUpdateManyWithWhereWithoutOptimizationRunInput = {
    where: UsageRecordScalarWhereInput
    data: XOR<UsageRecordUpdateManyMutationInput, UsageRecordUncheckedUpdateManyWithoutOptimizationRunInput>
  }

  export type UsageRecordScalarWhereInput = {
    AND?: UsageRecordScalarWhereInput | UsageRecordScalarWhereInput[]
    OR?: UsageRecordScalarWhereInput[]
    NOT?: UsageRecordScalarWhereInput | UsageRecordScalarWhereInput[]
    id?: StringFilter<"UsageRecord"> | string
    subscriptionId?: StringFilter<"UsageRecord"> | string
    optimizationRunId?: StringFilter<"UsageRecord"> | string
    tokenCount?: IntFilter<"UsageRecord"> | number
    costUsd?: FloatFilter<"UsageRecord"> | number
    createdAt?: DateTimeFilter<"UsageRecord"> | Date | string
  }

  export type ScorecardUpsertWithoutOptimizationRunInput = {
    update: XOR<ScorecardUpdateWithoutOptimizationRunInput, ScorecardUncheckedUpdateWithoutOptimizationRunInput>
    create: XOR<ScorecardCreateWithoutOptimizationRunInput, ScorecardUncheckedCreateWithoutOptimizationRunInput>
    where?: ScorecardWhereInput
  }

  export type ScorecardUpdateToOneWithWhereWithoutOptimizationRunInput = {
    where?: ScorecardWhereInput
    data: XOR<ScorecardUpdateWithoutOptimizationRunInput, ScorecardUncheckedUpdateWithoutOptimizationRunInput>
  }

  export type ScorecardUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScorecardUncheckedUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    metrics?: JsonNullValueInput | InputJsonValue
    takeaways?: NullableJsonNullValueInput | InputJsonValue
    redFlags?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptimizationRunCreateWithoutFeedbacksInput = {
    id?: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterCreateNestedOneWithoutOptimizationRunInput
    resumeFile?: ResumeFileCreateNestedOneWithoutOptimizationRunsInput
    user: UserCreateNestedOneWithoutOptimizationRunsInput
    usageRecords?: UsageRecordCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    userId: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterUncheckedCreateNestedOneWithoutOptimizationRunInput
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardUncheckedCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunCreateOrConnectWithoutFeedbacksInput = {
    where: OptimizationRunWhereUniqueInput
    create: XOR<OptimizationRunCreateWithoutFeedbacksInput, OptimizationRunUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserCreateWithoutFeedbacksInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type OptimizationRunUpsertWithoutFeedbacksInput = {
    update: XOR<OptimizationRunUpdateWithoutFeedbacksInput, OptimizationRunUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<OptimizationRunCreateWithoutFeedbacksInput, OptimizationRunUncheckedCreateWithoutFeedbacksInput>
    where?: OptimizationRunWhereInput
  }

  export type OptimizationRunUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: OptimizationRunWhereInput
    data: XOR<OptimizationRunUpdateWithoutFeedbacksInput, OptimizationRunUncheckedUpdateWithoutFeedbacksInput>
  }

  export type OptimizationRunUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUpdateOneWithoutOptimizationRunNestedInput
    resumeFile?: ResumeFileUpdateOneWithoutOptimizationRunsNestedInput
    user?: UserUpdateOneRequiredWithoutOptimizationRunsNestedInput
    usageRecords?: UsageRecordUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUncheckedUpdateOneWithoutOptimizationRunNestedInput
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUncheckedUpdateOneWithoutOptimizationRunNestedInput
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSubscriptionsInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionsInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
  }

  export type UsageRecordCreateWithoutSubscriptionInput = {
    id?: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    optimizationRun: OptimizationRunCreateNestedOneWithoutUsageRecordsInput
  }

  export type UsageRecordUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    optimizationRunId: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
  }

  export type UsageRecordCreateOrConnectWithoutSubscriptionInput = {
    where: UsageRecordWhereUniqueInput
    create: XOR<UsageRecordCreateWithoutSubscriptionInput, UsageRecordUncheckedCreateWithoutSubscriptionInput>
  }

  export type UsageRecordCreateManySubscriptionInputEnvelope = {
    data: UsageRecordCreateManySubscriptionInput | UsageRecordCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSubscriptionsInput = {
    update: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<UserCreateWithoutSubscriptionsInput, UserUncheckedCreateWithoutSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscriptionsInput, UserUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UserUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsageRecordUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: UsageRecordWhereUniqueInput
    update: XOR<UsageRecordUpdateWithoutSubscriptionInput, UsageRecordUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UsageRecordCreateWithoutSubscriptionInput, UsageRecordUncheckedCreateWithoutSubscriptionInput>
  }

  export type UsageRecordUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: UsageRecordWhereUniqueInput
    data: XOR<UsageRecordUpdateWithoutSubscriptionInput, UsageRecordUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UsageRecordUpdateManyWithWhereWithoutSubscriptionInput = {
    where: UsageRecordScalarWhereInput
    data: XOR<UsageRecordUpdateManyMutationInput, UsageRecordUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type OptimizationRunCreateWithoutUsageRecordsInput = {
    id?: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackCreateNestedManyWithoutOptimizationRunInput
    resumeFile?: ResumeFileCreateNestedOneWithoutOptimizationRunsInput
    user: UserCreateNestedOneWithoutOptimizationRunsInput
    scorecard?: ScorecardCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunUncheckedCreateWithoutUsageRecordsInput = {
    id?: string
    userId: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterUncheckedCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOptimizationRunInput
    scorecard?: ScorecardUncheckedCreateNestedOneWithoutOptimizationRunInput
  }

  export type OptimizationRunCreateOrConnectWithoutUsageRecordsInput = {
    where: OptimizationRunWhereUniqueInput
    create: XOR<OptimizationRunCreateWithoutUsageRecordsInput, OptimizationRunUncheckedCreateWithoutUsageRecordsInput>
  }

  export type SubscriptionCreateWithoutUsageRecordsInput = {
    id?: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    user: UserCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutUsageRecordsInput = {
    id?: string
    userId: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
  }

  export type SubscriptionCreateOrConnectWithoutUsageRecordsInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutUsageRecordsInput, SubscriptionUncheckedCreateWithoutUsageRecordsInput>
  }

  export type OptimizationRunUpsertWithoutUsageRecordsInput = {
    update: XOR<OptimizationRunUpdateWithoutUsageRecordsInput, OptimizationRunUncheckedUpdateWithoutUsageRecordsInput>
    create: XOR<OptimizationRunCreateWithoutUsageRecordsInput, OptimizationRunUncheckedCreateWithoutUsageRecordsInput>
    where?: OptimizationRunWhereInput
  }

  export type OptimizationRunUpdateToOneWithWhereWithoutUsageRecordsInput = {
    where?: OptimizationRunWhereInput
    data: XOR<OptimizationRunUpdateWithoutUsageRecordsInput, OptimizationRunUncheckedUpdateWithoutUsageRecordsInput>
  }

  export type OptimizationRunUpdateWithoutUsageRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOptimizationRunNestedInput
    resumeFile?: ResumeFileUpdateOneWithoutOptimizationRunsNestedInput
    user?: UserUpdateOneRequiredWithoutOptimizationRunsNestedInput
    scorecard?: ScorecardUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateWithoutUsageRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUncheckedUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUncheckedUpdateOneWithoutOptimizationRunNestedInput
  }

  export type SubscriptionUpsertWithoutUsageRecordsInput = {
    update: XOR<SubscriptionUpdateWithoutUsageRecordsInput, SubscriptionUncheckedUpdateWithoutUsageRecordsInput>
    create: XOR<SubscriptionCreateWithoutUsageRecordsInput, SubscriptionUncheckedCreateWithoutUsageRecordsInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutUsageRecordsInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutUsageRecordsInput, SubscriptionUncheckedUpdateWithoutUsageRecordsInput>
  }

  export type SubscriptionUpdateWithoutUsageRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUsageRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutUsageEventsInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUsageEventsInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUsageEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUsageEventsInput, UserUncheckedCreateWithoutUsageEventsInput>
  }

  export type UserUpsertWithoutUsageEventsInput = {
    update: XOR<UserUpdateWithoutUsageEventsInput, UserUncheckedUpdateWithoutUsageEventsInput>
    create: XOR<UserCreateWithoutUsageEventsInput, UserUncheckedCreateWithoutUsageEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUsageEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUsageEventsInput, UserUncheckedUpdateWithoutUsageEventsInput>
  }

  export type UserUpdateWithoutUsageEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUsageEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OptimizationRunCreateWithoutScorecardInput = {
    id?: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackCreateNestedManyWithoutOptimizationRunInput
    resumeFile?: ResumeFileCreateNestedOneWithoutOptimizationRunsInput
    user: UserCreateNestedOneWithoutOptimizationRunsInput
    usageRecords?: UsageRecordCreateNestedManyWithoutOptimizationRunInput
  }

  export type OptimizationRunUncheckedCreateWithoutScorecardInput = {
    id?: string
    userId: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
    coverLetter?: CoverLetterUncheckedCreateNestedOneWithoutOptimizationRunInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutOptimizationRunInput
    usageRecords?: UsageRecordUncheckedCreateNestedManyWithoutOptimizationRunInput
  }

  export type OptimizationRunCreateOrConnectWithoutScorecardInput = {
    where: OptimizationRunWhereUniqueInput
    create: XOR<OptimizationRunCreateWithoutScorecardInput, OptimizationRunUncheckedCreateWithoutScorecardInput>
  }

  export type OptimizationRunUpsertWithoutScorecardInput = {
    update: XOR<OptimizationRunUpdateWithoutScorecardInput, OptimizationRunUncheckedUpdateWithoutScorecardInput>
    create: XOR<OptimizationRunCreateWithoutScorecardInput, OptimizationRunUncheckedCreateWithoutScorecardInput>
    where?: OptimizationRunWhereInput
  }

  export type OptimizationRunUpdateToOneWithWhereWithoutScorecardInput = {
    where?: OptimizationRunWhereInput
    data: XOR<OptimizationRunUpdateWithoutScorecardInput, OptimizationRunUncheckedUpdateWithoutScorecardInput>
  }

  export type OptimizationRunUpdateWithoutScorecardInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOptimizationRunNestedInput
    resumeFile?: ResumeFileUpdateOneWithoutOptimizationRunsNestedInput
    user?: UserUpdateOneRequiredWithoutOptimizationRunsNestedInput
    usageRecords?: UsageRecordUpdateManyWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateWithoutScorecardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUncheckedUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOptimizationRunNestedInput
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutOptimizationRunNestedInput
  }

  export type UserCreateWithoutSavedResumesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSavedResumesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSavedResumesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSavedResumesInput, UserUncheckedCreateWithoutSavedResumesInput>
  }

  export type UserUpsertWithoutSavedResumesInput = {
    update: XOR<UserUpdateWithoutSavedResumesInput, UserUncheckedUpdateWithoutSavedResumesInput>
    create: XOR<UserCreateWithoutSavedResumesInput, UserUncheckedCreateWithoutSavedResumesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSavedResumesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSavedResumesInput, UserUncheckedUpdateWithoutSavedResumesInput>
  }

  export type UserUpdateWithoutSavedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSavedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUnifiedResumesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUnifiedResumesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    templateUsages?: TemplateUsageUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUnifiedResumesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUnifiedResumesInput, UserUncheckedCreateWithoutUnifiedResumesInput>
  }

  export type ResumeAnalysisCreateWithoutResumeInput = {
    id?: string
    jobDescription: string
    overallScore: number
    keywordMatches: JsonNullValueInput | InputJsonValue
    similarityScore: number
    atsCompatibility: JsonNullValueInput | InputJsonValue
    sectionScores: JsonNullValueInput | InputJsonValue
    recommendations: JsonNullValueInput | InputJsonValue
    insights: JsonNullValueInput | InputJsonValue
    analysisVersion?: string
    modelUsed?: string
    processingTime?: number | null
    createdAt?: Date | string
  }

  export type ResumeAnalysisUncheckedCreateWithoutResumeInput = {
    id?: string
    jobDescription: string
    overallScore: number
    keywordMatches: JsonNullValueInput | InputJsonValue
    similarityScore: number
    atsCompatibility: JsonNullValueInput | InputJsonValue
    sectionScores: JsonNullValueInput | InputJsonValue
    recommendations: JsonNullValueInput | InputJsonValue
    insights: JsonNullValueInput | InputJsonValue
    analysisVersion?: string
    modelUsed?: string
    processingTime?: number | null
    createdAt?: Date | string
  }

  export type ResumeAnalysisCreateOrConnectWithoutResumeInput = {
    where: ResumeAnalysisWhereUniqueInput
    create: XOR<ResumeAnalysisCreateWithoutResumeInput, ResumeAnalysisUncheckedCreateWithoutResumeInput>
  }

  export type ResumeAnalysisCreateManyResumeInputEnvelope = {
    data: ResumeAnalysisCreateManyResumeInput | ResumeAnalysisCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type ResumeShareCreateWithoutResumeInput = {
    id?: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    views?: ShareViewCreateNestedManyWithoutShareInput
  }

  export type ResumeShareUncheckedCreateWithoutResumeInput = {
    id?: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    views?: ShareViewUncheckedCreateNestedManyWithoutShareInput
  }

  export type ResumeShareCreateOrConnectWithoutResumeInput = {
    where: ResumeShareWhereUniqueInput
    create: XOR<ResumeShareCreateWithoutResumeInput, ResumeShareUncheckedCreateWithoutResumeInput>
  }

  export type ResumeShareCreateManyResumeInputEnvelope = {
    data: ResumeShareCreateManyResumeInput | ResumeShareCreateManyResumeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutUnifiedResumesInput = {
    update: XOR<UserUpdateWithoutUnifiedResumesInput, UserUncheckedUpdateWithoutUnifiedResumesInput>
    create: XOR<UserCreateWithoutUnifiedResumesInput, UserUncheckedCreateWithoutUnifiedResumesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUnifiedResumesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUnifiedResumesInput, UserUncheckedUpdateWithoutUnifiedResumesInput>
  }

  export type UserUpdateWithoutUnifiedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUnifiedResumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    templateUsages?: TemplateUsageUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ResumeAnalysisUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumeAnalysisWhereUniqueInput
    update: XOR<ResumeAnalysisUpdateWithoutResumeInput, ResumeAnalysisUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeAnalysisCreateWithoutResumeInput, ResumeAnalysisUncheckedCreateWithoutResumeInput>
  }

  export type ResumeAnalysisUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumeAnalysisWhereUniqueInput
    data: XOR<ResumeAnalysisUpdateWithoutResumeInput, ResumeAnalysisUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeAnalysisUpdateManyWithWhereWithoutResumeInput = {
    where: ResumeAnalysisScalarWhereInput
    data: XOR<ResumeAnalysisUpdateManyMutationInput, ResumeAnalysisUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumeAnalysisScalarWhereInput = {
    AND?: ResumeAnalysisScalarWhereInput | ResumeAnalysisScalarWhereInput[]
    OR?: ResumeAnalysisScalarWhereInput[]
    NOT?: ResumeAnalysisScalarWhereInput | ResumeAnalysisScalarWhereInput[]
    id?: StringFilter<"ResumeAnalysis"> | string
    resumeId?: StringFilter<"ResumeAnalysis"> | string
    jobDescription?: StringFilter<"ResumeAnalysis"> | string
    overallScore?: IntFilter<"ResumeAnalysis"> | number
    keywordMatches?: JsonFilter<"ResumeAnalysis">
    similarityScore?: FloatFilter<"ResumeAnalysis"> | number
    atsCompatibility?: JsonFilter<"ResumeAnalysis">
    sectionScores?: JsonFilter<"ResumeAnalysis">
    recommendations?: JsonFilter<"ResumeAnalysis">
    insights?: JsonFilter<"ResumeAnalysis">
    analysisVersion?: StringFilter<"ResumeAnalysis"> | string
    modelUsed?: StringFilter<"ResumeAnalysis"> | string
    processingTime?: IntNullableFilter<"ResumeAnalysis"> | number | null
    createdAt?: DateTimeFilter<"ResumeAnalysis"> | Date | string
  }

  export type ResumeShareUpsertWithWhereUniqueWithoutResumeInput = {
    where: ResumeShareWhereUniqueInput
    update: XOR<ResumeShareUpdateWithoutResumeInput, ResumeShareUncheckedUpdateWithoutResumeInput>
    create: XOR<ResumeShareCreateWithoutResumeInput, ResumeShareUncheckedCreateWithoutResumeInput>
  }

  export type ResumeShareUpdateWithWhereUniqueWithoutResumeInput = {
    where: ResumeShareWhereUniqueInput
    data: XOR<ResumeShareUpdateWithoutResumeInput, ResumeShareUncheckedUpdateWithoutResumeInput>
  }

  export type ResumeShareUpdateManyWithWhereWithoutResumeInput = {
    where: ResumeShareScalarWhereInput
    data: XOR<ResumeShareUpdateManyMutationInput, ResumeShareUncheckedUpdateManyWithoutResumeInput>
  }

  export type ResumeShareScalarWhereInput = {
    AND?: ResumeShareScalarWhereInput | ResumeShareScalarWhereInput[]
    OR?: ResumeShareScalarWhereInput[]
    NOT?: ResumeShareScalarWhereInput | ResumeShareScalarWhereInput[]
    id?: StringFilter<"ResumeShare"> | string
    resumeId?: StringFilter<"ResumeShare"> | string
    shareToken?: StringFilter<"ResumeShare"> | string
    isPublic?: BoolFilter<"ResumeShare"> | boolean
    password?: StringNullableFilter<"ResumeShare"> | string | null
    expiresAt?: DateTimeNullableFilter<"ResumeShare"> | Date | string | null
    viewCount?: IntFilter<"ResumeShare"> | number
    lastViewed?: DateTimeNullableFilter<"ResumeShare"> | Date | string | null
    createdAt?: DateTimeFilter<"ResumeShare"> | Date | string
    updatedAt?: DateTimeFilter<"ResumeShare"> | Date | string
  }

  export type UnifiedResumeCreateWithoutAnalysesInput = {
    id?: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    user: UserCreateNestedOneWithoutUnifiedResumesInput
    shares?: ResumeShareCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeUncheckedCreateWithoutAnalysesInput = {
    id?: string
    userId: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    shares?: ResumeShareUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeCreateOrConnectWithoutAnalysesInput = {
    where: UnifiedResumeWhereUniqueInput
    create: XOR<UnifiedResumeCreateWithoutAnalysesInput, UnifiedResumeUncheckedCreateWithoutAnalysesInput>
  }

  export type UnifiedResumeUpsertWithoutAnalysesInput = {
    update: XOR<UnifiedResumeUpdateWithoutAnalysesInput, UnifiedResumeUncheckedUpdateWithoutAnalysesInput>
    create: XOR<UnifiedResumeCreateWithoutAnalysesInput, UnifiedResumeUncheckedCreateWithoutAnalysesInput>
    where?: UnifiedResumeWhereInput
  }

  export type UnifiedResumeUpdateToOneWithWhereWithoutAnalysesInput = {
    where?: UnifiedResumeWhereInput
    data: XOR<UnifiedResumeUpdateWithoutAnalysesInput, UnifiedResumeUncheckedUpdateWithoutAnalysesInput>
  }

  export type UnifiedResumeUpdateWithoutAnalysesInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutUnifiedResumesNestedInput
    shares?: ResumeShareUpdateManyWithoutResumeNestedInput
  }

  export type UnifiedResumeUncheckedUpdateWithoutAnalysesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shares?: ResumeShareUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UnifiedResumeCreateWithoutSharesInput = {
    id?: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    user: UserCreateNestedOneWithoutUnifiedResumesInput
    analyses?: ResumeAnalysisCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeUncheckedCreateWithoutSharesInput = {
    id?: string
    userId: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
    analyses?: ResumeAnalysisUncheckedCreateNestedManyWithoutResumeInput
  }

  export type UnifiedResumeCreateOrConnectWithoutSharesInput = {
    where: UnifiedResumeWhereUniqueInput
    create: XOR<UnifiedResumeCreateWithoutSharesInput, UnifiedResumeUncheckedCreateWithoutSharesInput>
  }

  export type ShareViewCreateWithoutShareInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    referer?: string | null
    country?: string | null
    viewedAt?: Date | string
  }

  export type ShareViewUncheckedCreateWithoutShareInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    referer?: string | null
    country?: string | null
    viewedAt?: Date | string
  }

  export type ShareViewCreateOrConnectWithoutShareInput = {
    where: ShareViewWhereUniqueInput
    create: XOR<ShareViewCreateWithoutShareInput, ShareViewUncheckedCreateWithoutShareInput>
  }

  export type ShareViewCreateManyShareInputEnvelope = {
    data: ShareViewCreateManyShareInput | ShareViewCreateManyShareInput[]
    skipDuplicates?: boolean
  }

  export type UnifiedResumeUpsertWithoutSharesInput = {
    update: XOR<UnifiedResumeUpdateWithoutSharesInput, UnifiedResumeUncheckedUpdateWithoutSharesInput>
    create: XOR<UnifiedResumeCreateWithoutSharesInput, UnifiedResumeUncheckedCreateWithoutSharesInput>
    where?: UnifiedResumeWhereInput
  }

  export type UnifiedResumeUpdateToOneWithWhereWithoutSharesInput = {
    where?: UnifiedResumeWhereInput
    data: XOR<UnifiedResumeUpdateWithoutSharesInput, UnifiedResumeUncheckedUpdateWithoutSharesInput>
  }

  export type UnifiedResumeUpdateWithoutSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutUnifiedResumesNestedInput
    analyses?: ResumeAnalysisUpdateManyWithoutResumeNestedInput
  }

  export type UnifiedResumeUncheckedUpdateWithoutSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    analyses?: ResumeAnalysisUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type ShareViewUpsertWithWhereUniqueWithoutShareInput = {
    where: ShareViewWhereUniqueInput
    update: XOR<ShareViewUpdateWithoutShareInput, ShareViewUncheckedUpdateWithoutShareInput>
    create: XOR<ShareViewCreateWithoutShareInput, ShareViewUncheckedCreateWithoutShareInput>
  }

  export type ShareViewUpdateWithWhereUniqueWithoutShareInput = {
    where: ShareViewWhereUniqueInput
    data: XOR<ShareViewUpdateWithoutShareInput, ShareViewUncheckedUpdateWithoutShareInput>
  }

  export type ShareViewUpdateManyWithWhereWithoutShareInput = {
    where: ShareViewScalarWhereInput
    data: XOR<ShareViewUpdateManyMutationInput, ShareViewUncheckedUpdateManyWithoutShareInput>
  }

  export type ShareViewScalarWhereInput = {
    AND?: ShareViewScalarWhereInput | ShareViewScalarWhereInput[]
    OR?: ShareViewScalarWhereInput[]
    NOT?: ShareViewScalarWhereInput | ShareViewScalarWhereInput[]
    id?: StringFilter<"ShareView"> | string
    shareId?: StringFilter<"ShareView"> | string
    ipAddress?: StringNullableFilter<"ShareView"> | string | null
    userAgent?: StringNullableFilter<"ShareView"> | string | null
    referer?: StringNullableFilter<"ShareView"> | string | null
    country?: StringNullableFilter<"ShareView"> | string | null
    viewedAt?: DateTimeFilter<"ShareView"> | Date | string
  }

  export type ResumeShareCreateWithoutViewsInput = {
    id?: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resume: UnifiedResumeCreateNestedOneWithoutSharesInput
  }

  export type ResumeShareUncheckedCreateWithoutViewsInput = {
    id?: string
    resumeId: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResumeShareCreateOrConnectWithoutViewsInput = {
    where: ResumeShareWhereUniqueInput
    create: XOR<ResumeShareCreateWithoutViewsInput, ResumeShareUncheckedCreateWithoutViewsInput>
  }

  export type ResumeShareUpsertWithoutViewsInput = {
    update: XOR<ResumeShareUpdateWithoutViewsInput, ResumeShareUncheckedUpdateWithoutViewsInput>
    create: XOR<ResumeShareCreateWithoutViewsInput, ResumeShareUncheckedCreateWithoutViewsInput>
    where?: ResumeShareWhereInput
  }

  export type ResumeShareUpdateToOneWithWhereWithoutViewsInput = {
    where?: ResumeShareWhereInput
    data: XOR<ResumeShareUpdateWithoutViewsInput, ResumeShareUncheckedUpdateWithoutViewsInput>
  }

  export type ResumeShareUpdateWithoutViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resume?: UnifiedResumeUpdateOneRequiredWithoutSharesNestedInput
  }

  export type ResumeShareUncheckedUpdateWithoutViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    resumeId?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutTemplateUsagesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTemplateUsagesInput = {
    id: string
    email: string
    fullName?: string | null
    firstName?: string | null
    lastName?: string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    freeRunsRemaining?: number
    plan?: string
    coverLetters?: CoverLetterUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    optimizationRuns?: OptimizationRunUncheckedCreateNestedManyWithoutUserInput
    resumeFiles?: ResumeFileUncheckedCreateNestedManyWithoutUserInput
    savedResumes?: SavedResumeUncheckedCreateNestedManyWithoutUserInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutUserInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutUserInput
    unifiedResumes?: UnifiedResumeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTemplateUsagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTemplateUsagesInput, UserUncheckedCreateWithoutTemplateUsagesInput>
  }

  export type UserUpsertWithoutTemplateUsagesInput = {
    update: XOR<UserUpdateWithoutTemplateUsagesInput, UserUncheckedUpdateWithoutTemplateUsagesInput>
    create: XOR<UserCreateWithoutTemplateUsagesInput, UserUncheckedCreateWithoutTemplateUsagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTemplateUsagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTemplateUsagesInput, UserUncheckedUpdateWithoutTemplateUsagesInput>
  }

  export type UserUpdateWithoutTemplateUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTemplateUsagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    freeRunsRemaining?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    coverLetters?: CoverLetterUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutUserNestedInput
    resumeFiles?: ResumeFileUncheckedUpdateManyWithoutUserNestedInput
    savedResumes?: SavedResumeUncheckedUpdateManyWithoutUserNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutUserNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutUserNestedInput
    unifiedResumes?: UnifiedResumeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoverLetterCreateManyUserInput = {
    id?: string
    optimizationRunId: string
    letterText: string
    createdAt?: Date | string
  }

  export type FeedbackCreateManyUserInput = {
    id?: string
    optimizationRunId: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
  }

  export type OptimizationRunCreateManyUserInput = {
    id?: string
    resumeFileId?: string | null
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
  }

  export type ResumeFileCreateManyUserInput = {
    id?: string
    fileName: string
    filePath: string
    uploadedAt?: Date | string
    originalTextHash?: string | null
  }

  export type SavedResumeCreateManyUserInput = {
    id?: string
    name: string
    content: string
    createdAt?: Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: string | null
  }

  export type SubscriptionCreateManyUserInput = {
    id?: string
    planName: string
    status: string
    currentPeriodStart: Date | string
    currentPeriodEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
  }

  export type UsageEventCreateManyUserInput = {
    id?: string
    eventType: string
    meta: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type UnifiedResumeCreateManyUserInput = {
    id?: string
    version?: number
    builderData: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title: string
    template?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    analyzedAt?: Date | string | null
    publishedAt?: Date | string | null
  }

  export type TemplateUsageCreateManyUserInput = {
    id?: string
    templateId: string
    usedAt?: Date | string
  }

  export type CoverLetterUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optimizationRun?: OptimizationRunUpdateOneRequiredWithoutCoverLetterNestedInput
  }

  export type CoverLetterUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoverLetterUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    letterText?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optimizationRun?: OptimizationRunUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptimizationRunUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOptimizationRunNestedInput
    resumeFile?: ResumeFileUpdateOneWithoutOptimizationRunsNestedInput
    usageRecords?: UsageRecordUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUncheckedUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOptimizationRunNestedInput
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUncheckedUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    resumeFileId?: NullableStringFieldUpdateOperationsInput | string | null
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ResumeFileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
    optimizationRuns?: OptimizationRunUpdateManyWithoutResumeFileNestedInput
  }

  export type ResumeFileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
    optimizationRuns?: OptimizationRunUncheckedUpdateManyWithoutResumeFileNestedInput
  }

  export type ResumeFileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTextHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedResumeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedResumeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedResumeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parsedData?: NullableJsonNullValueInput | InputJsonValue
    textHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    usageRecords?: UsageRecordUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    currentPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    currentPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsageEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    meta?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    meta?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    meta?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnifiedResumeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    analyses?: ResumeAnalysisUpdateManyWithoutResumeNestedInput
    shares?: ResumeShareUpdateManyWithoutResumeNestedInput
  }

  export type UnifiedResumeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    analyses?: ResumeAnalysisUncheckedUpdateManyWithoutResumeNestedInput
    shares?: ResumeShareUncheckedUpdateManyWithoutResumeNestedInput
  }

  export type UnifiedResumeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    builderData?: JsonNullValueInput | InputJsonValue
    optimizationData?: NullableJsonNullValueInput | InputJsonValue
    sharingData?: NullableJsonNullValueInput | InputJsonValue
    title?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analyzedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TemplateUsageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUsageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateUsageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    usedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OptimizationRunCreateManyResumeFileInput = {
    id?: string
    userId: string
    jobDescription: string
    templateId: string
    originalText: string
    optimizedText: string
    bulletRewrites: JsonNullValueInput | InputJsonValue
    summaryRewrite: string
    skillsRewrite: string
    keywords: JsonNullValueInput | InputJsonValue
    requirements: JsonNullValueInput | InputJsonValue
    targetTitle: string
    targetCompany: string
    aiModel: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
    deletedAt?: Date | string | null
    optimizedAtsNotes?: string | null
    optimizedAtsScore?: number | null
    originalAtsNotes?: string | null
    originalAtsScore?: number | null
  }

  export type OptimizationRunUpdateWithoutResumeFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUpdateManyWithoutOptimizationRunNestedInput
    user?: UserUpdateOneRequiredWithoutOptimizationRunsNestedInput
    usageRecords?: UsageRecordUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateWithoutResumeFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    coverLetter?: CoverLetterUncheckedUpdateOneWithoutOptimizationRunNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutOptimizationRunNestedInput
    usageRecords?: UsageRecordUncheckedUpdateManyWithoutOptimizationRunNestedInput
    scorecard?: ScorecardUncheckedUpdateOneWithoutOptimizationRunNestedInput
  }

  export type OptimizationRunUncheckedUpdateManyWithoutResumeFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    originalText?: StringFieldUpdateOperationsInput | string
    optimizedText?: StringFieldUpdateOperationsInput | string
    bulletRewrites?: JsonNullValueInput | InputJsonValue
    summaryRewrite?: StringFieldUpdateOperationsInput | string
    skillsRewrite?: StringFieldUpdateOperationsInput | string
    keywords?: JsonNullValueInput | InputJsonValue
    requirements?: JsonNullValueInput | InputJsonValue
    targetTitle?: StringFieldUpdateOperationsInput | string
    targetCompany?: StringFieldUpdateOperationsInput | string
    aiModel?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    optimizedAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    optimizedAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
    originalAtsNotes?: NullableStringFieldUpdateOperationsInput | string | null
    originalAtsScore?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type FeedbackCreateManyOptimizationRunInput = {
    id?: string
    userId: string
    rating: number
    comments?: string | null
    createdAt?: Date | string
  }

  export type UsageRecordCreateManyOptimizationRunInput = {
    id?: string
    subscriptionId: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
  }

  export type FeedbackUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageRecordUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUpdateOneRequiredWithoutUsageRecordsNestedInput
  }

  export type UsageRecordUncheckedUpdateWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageRecordUncheckedUpdateManyWithoutOptimizationRunInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageRecordCreateManySubscriptionInput = {
    id?: string
    optimizationRunId: string
    tokenCount: number
    costUsd: number
    createdAt?: Date | string
  }

  export type UsageRecordUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    optimizationRun?: OptimizationRunUpdateOneRequiredWithoutUsageRecordsNestedInput
  }

  export type UsageRecordUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageRecordUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    optimizationRunId?: StringFieldUpdateOperationsInput | string
    tokenCount?: IntFieldUpdateOperationsInput | number
    costUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAnalysisCreateManyResumeInput = {
    id?: string
    jobDescription: string
    overallScore: number
    keywordMatches: JsonNullValueInput | InputJsonValue
    similarityScore: number
    atsCompatibility: JsonNullValueInput | InputJsonValue
    sectionScores: JsonNullValueInput | InputJsonValue
    recommendations: JsonNullValueInput | InputJsonValue
    insights: JsonNullValueInput | InputJsonValue
    analysisVersion?: string
    modelUsed?: string
    processingTime?: number | null
    createdAt?: Date | string
  }

  export type ResumeShareCreateManyResumeInput = {
    id?: string
    shareToken: string
    isPublic?: boolean
    password?: string | null
    expiresAt?: Date | string | null
    viewCount?: number
    lastViewed?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResumeAnalysisUpdateWithoutResumeInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    keywordMatches?: JsonNullValueInput | InputJsonValue
    similarityScore?: FloatFieldUpdateOperationsInput | number
    atsCompatibility?: JsonNullValueInput | InputJsonValue
    sectionScores?: JsonNullValueInput | InputJsonValue
    recommendations?: JsonNullValueInput | InputJsonValue
    insights?: JsonNullValueInput | InputJsonValue
    analysisVersion?: StringFieldUpdateOperationsInput | string
    modelUsed?: StringFieldUpdateOperationsInput | string
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAnalysisUncheckedUpdateWithoutResumeInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    keywordMatches?: JsonNullValueInput | InputJsonValue
    similarityScore?: FloatFieldUpdateOperationsInput | number
    atsCompatibility?: JsonNullValueInput | InputJsonValue
    sectionScores?: JsonNullValueInput | InputJsonValue
    recommendations?: JsonNullValueInput | InputJsonValue
    insights?: JsonNullValueInput | InputJsonValue
    analysisVersion?: StringFieldUpdateOperationsInput | string
    modelUsed?: StringFieldUpdateOperationsInput | string
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeAnalysisUncheckedUpdateManyWithoutResumeInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobDescription?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    keywordMatches?: JsonNullValueInput | InputJsonValue
    similarityScore?: FloatFieldUpdateOperationsInput | number
    atsCompatibility?: JsonNullValueInput | InputJsonValue
    sectionScores?: JsonNullValueInput | InputJsonValue
    recommendations?: JsonNullValueInput | InputJsonValue
    insights?: JsonNullValueInput | InputJsonValue
    analysisVersion?: StringFieldUpdateOperationsInput | string
    modelUsed?: StringFieldUpdateOperationsInput | string
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResumeShareUpdateWithoutResumeInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: ShareViewUpdateManyWithoutShareNestedInput
  }

  export type ResumeShareUncheckedUpdateWithoutResumeInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: ShareViewUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ResumeShareUncheckedUpdateManyWithoutResumeInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareToken?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
    lastViewed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareViewCreateManyShareInput = {
    id?: string
    ipAddress?: string | null
    userAgent?: string | null
    referer?: string | null
    country?: string | null
    viewedAt?: Date | string
  }

  export type ShareViewUpdateWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareViewUncheckedUpdateWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareViewUncheckedUpdateManyWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    viewedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}